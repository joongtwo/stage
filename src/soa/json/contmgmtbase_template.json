{
  "BusinessObjectInterface": [
    {
      "createRelease": "tc9000.0.0",
      "description": "Teamcenter::contmgmtbase::Ctm0BOMLine",
      "libraryName": "contmgmtbase",
      "name": "Ctm0BOMLine",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "Ctm0BOMLine"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Teamcenter::contmgmtbase::Ctm0BOMWindow",
      "libraryName": "contmgmtbase",
      "name": "Ctm0BOMWindow",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "Ctm0BOMWindow"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_PubType",
      "libraryName": "contmgmtbase",
      "name": "DC_PubType",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_PubType"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_Publication",
      "libraryName": "contmgmtbase",
      "name": "DC_Publication",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_Publication"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_PublicationRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_PublicationRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_PublicationRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_RefTopicType",
      "libraryName": "contmgmtbase",
      "name": "DC_RefTopicType",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_RefTopicType"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ReviewerDoc",
      "libraryName": "contmgmtbase",
      "name": "DC_ReviewerDoc",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ReviewerDoc"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ReviewerDocRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_ReviewerDocRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ReviewerDocRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_Topic",
      "libraryName": "contmgmtbase",
      "name": "DC_Topic",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_Topic"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_TopicRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_TopicRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_TopicRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_TopicType",
      "libraryName": "contmgmtbase",
      "name": "DC_TopicType",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_TopicType"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_TransfPolicy",
      "libraryName": "contmgmtbase",
      "name": "DC_TransfPolicy",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_TransfPolicy"
    },
    {
      "createRelease": "tc10000.1.3",
      "description": "Interface Name for Business Object Ctm0SNSNode",
      "libraryName": "contmgmtbase",
      "name": "Ctm0SNSNode",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "Ctm0SNSNode"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_UnparsedDocRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_UnparsedDocRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_UnparsedDocRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DCt_GrphcTrnsltnRevision",
      "libraryName": "contmgmtbase",
      "name": "DCt_GrphcTrnsltnRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_GrphcTrnsltnRevision"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DCt_ItemRevision",
      "libraryName": "contmgmtbase",
      "name": "DCt_ItemRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_ItemRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DCt_TopicTypeGrp",
      "libraryName": "contmgmtbase",
      "name": "DCt_TopicTypeGrp",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_TopicTypeGrp"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DCt_TranslationRevision",
      "libraryName": "contmgmtbase",
      "name": "DCt_TranslationRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_TranslationRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DCt_XmlAttrMap",
      "libraryName": "contmgmtbase",
      "name": "DCt_XmlAttrMap",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_XmlAttrMap"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DCt_XmlAttrMapTbl",
      "libraryName": "contmgmtbase",
      "name": "DCt_XmlAttrMapTbl",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DCt_XmlAttrMapTbl"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_Admin",
      "libraryName": "contmgmtbase",
      "name": "DC_Admin",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_Admin"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ComposedDoc",
      "libraryName": "contmgmtbase",
      "name": "DC_ComposedDoc",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ComposedDoc"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ComposedDocRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_ComposedDocRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ComposedDocRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_ExtEntAdmin",
      "libraryName": "contmgmtbase",
      "name": "DC_ExtEntAdmin",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ExtEntAdmin"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ExtEntAdminRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_ExtEntAdminRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ExtEntAdminRevision"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "Interface Name for Business Object DC_GrphcAttrMap",
      "libraryName": "contmgmtbase",
      "name": "DC_GrphcAttrMap",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_GrphcAttrMap"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Interface Name for Business Object DC_ProcedureRevision",
      "libraryName": "contmgmtbase",
      "name": "DC_ProcedureRevision",
      "namespace": "Teamcenter::contmgmtbase",
      "primaryInterface": "true",
      "typeName": "DC_ProcedureRevision"
    }
  ],
  "Date": "Mon Mar 15 08:37:00 PM 2021",
  "Library": [
    {
      "DependentOn": [
        {
          "name": "metaframework"
        },
        {
          "name": "tccore"
        },
        {
          "name": "tc"
        },
        {
          "name": "cxpom"
        }
      ],
      "createRelease": "tc11000.2.0",
      "description": "Example Callback Library",
      "isThirdParty": "false",
      "name": "Ctm0Callbacks",
      "namespace": "",
      "serviceLibrary": "false"
    },
    {
      "createRelease": "tc9000.0.0",
      "description": "This library provides base Content Mangement services.",
      "isThirdParty": "false",
      "name": "TcSoaContMgmtBase",
      "namespace": "Teamcenter::Soa::ContMgmtBase",
      "serviceLibrary": "true"
    },
    {
      "createRelease": "P8000.0.0",
      "description": "Base library for content management",
      "isThirdParty": "false",
      "name": "contmgmtbase",
      "namespace": "",
      "serviceLibrary": "false"
    }
  ],
  "Operation": [
    {
      "ParameterInfo": [
        {
          "description": "Compose input structure.",
          "parameterName": "input"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "decomposeContent",
      "description": "Create composed XML, and also get the Schemas/DTDs, graphics and other information.  During the composition, if it is determined a property needs to be mapped from the topic to the content, the function uses the applicable attribute mapping object to insert the topic property into the xml element or attribute.  Specific functions within the xml attribute mapping are performed against the applicable attribute.  The xml attribute map also provides namespace prefixes that are used in the attributes defined in the map.  This allows the attribute mapping to be defined with prefixes that do not need to be the same as those defined for the topic itself. If the requesting function uses a tool that requires processing instruction, the compose function inserts the processing instruction into the content.  The format of the instruction conforms to the current xml standard for processing instructions.",
      "exceptionCondition": "Possible partial errors are: <br /><b>CONTMGMTBASE_GENERAL_ERROR</b> 239100 An error has occurred in the Content Management Base module.<br /><b>CONTMGMTBASE_Xml_to_sgml_exception</b> 239124 An exception was detected while converting XML to SGML.<br /><b>CONTMGMTBASE_transform_error</b> 239108 The Xalan transformer has failed to execute the procedure.",
      "id": "composeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "composeContent",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::composeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeInput>,&",
      "returnDescription": "A composed XML document created from the XML fragments in the <b>DC_TopicRevisions</b> that make up the entire document.  Possible partial errors are:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">CONTMGMTBASE_Xml_to_sgml_exception 239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">CONTMGMTBASE_transform_error 239108: The Xalan transformer has failed to execute the procedure.</li></ul></ul>",
      "useCase": "<b>Use case 1: Open for View, Edit, or Publish</b><br />This document can be used by many different functions such as, preview, edit, publish, or just a snapshot in time.  These functions determine which revision rule to pass to the compose function.  The resulting content, when applicable, is validated against an xml schema or DTD.  Multiple DTDs and xml schemas are available in the system at any time.  The compose function provides all the applicable schema files along with the composed content for the function requesting the content.<br /><br /><b>Use case 2: Export Document</b><br />The user may export a document from the database.<br />"
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of BomWindowInfo structures.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "The operation creates a <b>Ctm0BOMWindow</b> used in the publication structure editor.",
      "exceptionCondition": "Possible partial error is:<br /><b>CONTMGMTBASE_GENERAL_ERROR</b> 239100 An error has occurred in the Content Management Base module.",
      "id": "createBomWindow#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowInfo>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "createBomWindow",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::createBomWindow#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowInfo>,&",
      "returnDescription": "Returns the BomWindowResponse structure. Possible partial error is:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li></ul></ul>",
      "useCase": "The user wants to create a BOM window to hold a Content Management topic."
    },
    {
      "ParameterInfo": [
        {
          "description": "user action code",
          "parameterName": "userAction"
        },
        {
          "description": "name of the tool",
          "parameterName": "toolName"
        },
        {
          "description": "name of the xml file to be transformed",
          "parameterName": "inputXMLFileName"
        },
        {
          "description": "Name of the output xml file",
          "parameterName": "outputXMLFileName"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "transforms the input xml using an xslt",
      "exceptionCondition": "",
      "id": "ctm0Transform#const,int$const,std::string,*$const,std::string,*$std::string,*",
      "interface": "Teamcenter::contmgmtbase::DC_TransfPolicy",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0Transform",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_TransfPolicy::ctm0Transform#const,int$const,std::string,*$const,std::string,*$std::string,*",
      "returnDescription": "error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of DecomposeInput structs. Each item in the vector represents an XML file that will be decomposed. See DecomposeInput for more details.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "composeContent",
      "description": "The decompose operation breaks up the XML based on its schema into smaller XML segments. The XML segments are then stored as <b>Datasets</b> that are attached to <b>DC_Topic</b> or <b>DC_Publication</b> objects in Teamcenter. If an XML is decomposed for the first time, for example through the import operation, then new <b>DC_Topic</b> or <b>DC_Publication</b> objects are created to hold the <b>Datasets</b>. Otherwise the <b>Datasets</b> attached to existing objects are updated with any new content.",
      "exceptionCondition": "239100: An error has occurred in the Content Management Base module.<br />239169: And XML exception occurred.<br />239173: A key reference cannot be resolved.<br />239175: A reference cannot be created to a topic that doesn't exist",
      "id": "decomposeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "decomposeContent",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "returnDescription": "A list of <b>ItemRevisions</b> representing the newly created or updated root Topics or Publications for each of the xml that is decomposed is returned. The DecomposeOutput struct holds the <b>ItemRevisions</b> that are returned. The ServiceData element is used to hold the status of the operation and any errors encountered during the operation.",
      "useCase": "<b>Use case 1: Edit and Save</b><br />After the user finishes editing a document created with a composeContent call, user can save the changes back into Teamcenter Content Management. <br />To save the changes they can call decomposeContent with a keyValueArgs entry Type = Save_from_edit.This will decompose the edited document, compare it with the original composed document and update the database with any changes.<br /><b>Use case 2:  Import or receive a translation</b><br />After a topic has been translated, user can import the translation in to Teamcenter Content Management. <br />To import a translation the user can call this operation with a keyValueArgs entry Type = Translation_receive.  This will add or update a translation in the entered language for the Topic that was translated.<br /><b>Use case 3:  Import an XML Document</b><br />Users can import a new Topic or Publication into Teamcenter Content Management.<br />To import a new Topic or Publication into the database, the user can call decomposeContent with a keyValueArgs entry Type = Import.<br /><b>Use case 4: Import DITA map</b><br />Users can import a DITA Map into Teamcenter Content Management.<br />To import a new DITA map into the database, the user can call decomposeContent with a keyValueArgs entry Type = ImportDitaMap.<br />"
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of DecomposeInput structs. Each item in the vector represents an XML file that will be decomposed. See DecomposeInput for more details.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc11000.2.3",
      "dependencies": "composeContent",
      "description": "The decompose operation breaks up the XML based on its schema into smaller XML segments. The XML segments are then stored as <b>Datasets</b> that are attached to <b>DC_Topic</b> or <b>DC_Publication</b> objects in Teamcenter. If an XML is decomposed for the first time, for example through the import operation, then new <b>DC_Topic </b>or <b>DC_Publication</b> objects are created to hold the <b>Datasets</b>. Otherwise the <b>Datasets</b> attached to existing objects are updated with any new content.",
      "exceptionCondition": "",
      "id": "decomposeContentWithMetaData#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "decomposeContentWithMetaData",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement::DecomposeResponse2#Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContentWithMetaData#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "returnDescription": "A list of <b>ItemRevisions</b> representing the newly created or updated root Topics or Publications for each of the xml that is decomposed is returned. The DecomposeOutput struct holds the <b>ItemRevisions</b> that are returned. The ServiceData element is used to hold the status of the operation and any errors encountered during the operation.<br />May return the followin partial errors:<br />239100: An error has occurred in the Content Management Base module.<br />239169: And XML exception occurred.<br />239173: A key reference cannot be resolved.<br />239175: A reference cannot be created to a topic that doesn't exist",
      "useCase": "<b>Use case 1: Edit and Save</b><br />After the user finishes editing a document created with a composeContent call, user can save the changes back into Teamcenter Content Management. To save the changes they can call decomposeContent with a keyValueArgs entry Type = Save_from_edit.This will decompose the edited document, compare it with the original composed document and update the database with any changes.<br /><b>Use case 2: Import or receive a translation</b><br />After a topic has been translated, user can import the translation in to Teamcenter Content Management. To import a translation the user can call this operation with a keyValueArgs entry Type = Translation_receive. This will add or update a translation in the entered language for the Topic that was translated.<br /><b>Use case 3: Import an XML Document</b><br />Users can import a new Topic or Publication into Teamcenter Content Management. To import a new Topic or Publication into the database, the user can call decomposeContent with a keyValueArgs entry Type = Import.<br /><b>Use case 4: Import DITA map</b><br />Users can import a DITA Map into Teamcenter Content Management. To import a new DITA map into the database, the user can call decomposeContent with a keyValueArgs entry Type = ImportDitaMap."
    },
    {
      "ParameterInfo": [
        {
          "description": "The <b>DC_TopicType</b> of interest.",
          "parameterName": "topicType"
        },
        {
          "description": "The topic type name filter.  The topic type name filter supports wild cards and if the supplied value is * it will return all the <b>DC_TopicType</b> instances belonging to the<b> DCt_TopicTypeGrp</b> for the input <b>DC_TopicType</b>. Static alphanumeric string with * are supported.  If there is no match then an empty list will be return.",
          "parameterName": "topicTypeNameFilter"
        },
        {
          "description": "A boolean indicating if the output should include all <b>DC_TopicRevision </b>objects that reference the <b>DC_TopicType</b> objects through the property ctm0TopicTypeTagref.",
          "parameterName": "includeReferencedTopics"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc13000.2.0",
      "dependencies": "",
      "description": "The operation returns a structure containing <b>DC_TopicType </b>objects that matches all these conditions:<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;The <b>DC_TopicType</b> belongs to the same <b>DCt_TopicTypeGrp</b> as the input<b> DC_TopicType</b>.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;The <b>DC_topicType</b> object_name property matches the input topicTypeNameFilter.<br /><br />If the input includeReferencedTopics is TRUE, the output structure would also contain the list of <b>DC_TopicRevision </b>which has ctm0TopicTypeTagref property set to the <b>DC_TopicType</b> contained in the output list.",
      "exceptionCondition": "",
      "id": "getTopicTypesAndRelatedTopics#const,Teamcenter::BusinessObject,&$const,std::string$bool",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "getTopicTypesAndRelatedTopics",
      "opTemplate": "Teamcenter::Soa::Internal::ContMgmtBase::_2021_06::ContentManagement::TopicTypesOutput#Teamcenter::Soa::ContMgmtBase::ContentManagement::getTopicTypesAndRelatedTopics#const,Teamcenter::BusinessObject,&$const,std::string$bool",
      "returnDescription": "The structure containing the list of <b>DC_TopicType</b> objects and optionally the<b> DC_TopicRevision</b> objects that reference the<b> DC_TopicType</b> objects.<br /><br />The following partial error may be returned:<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239503: Topic type &quot;%1$&quot; does not belong to a topic type group.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239504: Topic type &quot;%1$&quot; does not exist.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239505: Regular expression is not correct: &quot;%1$&quot;.",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of ImportGraphicInput structs.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation creates a <b>GraphicOption</b>, <b>DCt_GrphcTrnsltn</b>, <b>Graphic</b> and Image <b>Dataset</b> for the input image so the user can use these to reference graphics in xml content in Teamcenter Content Management.",
      "exceptionCondition": "",
      "id": "importGraphicOption#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "importGraphicOption",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::importGraphicOption#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicInput>,&",
      "returnDescription": "An ImportGraphicResponse object holding a list of ImportGraphicOutput objects containing any status or error messages from the operation along with a ServiceData object is returned.",
      "useCase": "The user can import images to be used by Teamcenter Content Management.  This operation will import an image, create a <b>GraphicOption</b>, a <b>DCt_GrphcTrnsltn</b> and a <b>Graphic</b> for the image."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of  file tickets of the zip files to be processed.",
          "parameterName": "fileTickets"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc12000.3.0",
      "dependencies": "",
      "description": "This operation imports the translated data contained within the input zip files.  Each zip file<br />is in the format provided by the prepareTranslationDelivery service opration.",
      "exceptionCondition": "",
      "id": "importTranslation#const,std::vector<std::string>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "importTranslation",
      "opTemplate": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ContMgmtBase::ContentManagement::importTranslation#const,std::vector<std::string>,&",
      "returnDescription": "ServiceData <br /><br />The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">239140 A translation object cannot be found for the topic.</li><li type=\"disc\">239400 The input file ticket is not a zip file.</li></ul></ul>",
      "useCase": "<ul><ul><li type=\"disc\">Topics are sent out for translation using the perpareTranslationDelivery service operation</li><li type=\"disc\">After they are translated, they are imported in AW using the importTranslation service operation</li></ul></ul>"
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of PreparePublishRequestArgs containing the publish input information.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "For client side publishing, this operation prepares data for publishing.  The client is required to download the returned file (zip file includes the composed XML, schemas, style sheet, and\\or graphics) and then invoke the publishing tool.   For server side publishing, a Dispatcher Request will be created to publish the data.",
      "exceptionCondition": "",
      "id": "preparePublish#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishRequestArgs>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "preparePublish",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::preparePublish#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishRequestArgs>,&",
      "returnDescription": "<font face=\"courier\" height=\"10\">PreparePublishResponse</font> structure that includes a vector of <font face=\"courier\" height=\"10\">PreparePublishResult</font> objects and a <font face=\"courier\" height=\"10\">ServiceData</font> element. The <font face=\"courier\" height=\"10\">PreparePublishResult</font> contains a file ticket that is used by the client to download a zip file that includes the composed XML, schemas, style sheet, and\\or graphics if called using client side publish. Any failure will be returned with the client id mapped to an error message in the ServiceData list. Possible partial errors are: <br /><br /><ul><ul><li type=\"disc\">239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">239108: The Xalan transformer has failed to execute the procedure</li></ul></ul>",
      "useCase": "Users can use the preparePublish operation to create their own client side publishing."
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of InternalPreparePublishRequestArgs objects.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation prepares data such as a publishing tool, style sheets, composed XML, schema, and graphics files for server side publishing.  This can be called asynchronously if the Dispatcher is configured to support asynchronous operations.",
      "exceptionCondition": "",
      "id": "prepareServerPublishing#const,std::vector<Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement::InternalPreparePublishRequestArgs>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "prepareServerPublishing",
      "opTemplate": "void#Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareServerPublishing#const,std::vector<Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement::InternalPreparePublishRequestArgs>,&",
      "returnDescription": "There is no return for this operation so that it can be called asynchronously.",
      "useCase": "Users can use the prepareServerPublishing operation to create their own server side publishing."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of Translation Delivery input structures.",
          "parameterName": "input"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Perform operations specific to preparing translations for delivery.  Allows a user to create a <b>TranslatnDelvry</b> and relate it to <b>TranslationOrder</b>.  Creates the <b>DCt_Translation</b> object and relate to <b>DC_TopicRevision</b> or <b>DC_PublicationRevision</b>.  If multiple languages are chosen, then multiple translations are generated, each with a one to one relation with a <b>DC_TopicRevision</b> or <b>DC_PublicationRevision</b>.  A folder structure is created to save the composed and decomposed xml files for each language.  Zip the folder structure and save as <b>Dataset</b>.",
      "exceptionCondition": "",
      "id": "prepareTranslationDelivery#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "prepareTranslationDelivery",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareTranslationDelivery#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryInput>,&",
      "returnDescription": "Vector of output objects representing objects that were created. Possible partial errors are:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">CONTMGMTBASE_UnableToFindTranslationObject 239140: Unable to find the translation object</li></ul></ul>",
      "useCase": "The user wants to setup a topic and it's children to be translated."
    },
    {
      "ParameterInfo": [
        {
          "description": "A vector of SavedPublishInput containing the input information.",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation saves the published output to Teamcenter as a <b>Dataset</b> attached to either a <b>DC_ComposedDocRevision</b> or a <b>DC_ReviewerDocRevision</b>.  The published output file must be uploaded to Teamcenter volume first in order to obtain the FMS write ticket for the input for this operation.",
      "exceptionCondition": "",
      "id": "savePublishOutput#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishInput>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "savePublishOutput",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishOutputResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::savePublishOutput#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishInput>,&",
      "returnDescription": "The return is <font face=\"courier\" height=\"10\">SavePublishOutputResponse</font> structure to indicate failures when saving the published dataset. Any failures will be returned with the client id mapped to an error message in the <font face=\"courier\" height=\"10\">ServiceData</font> list. Any failures will be returned with the client id mapped to an error message in the <font face=\"courier\" height=\"10\">ServiceData</font> list. Possible partial errors are: <br /><br /><ul><ul><li type=\"disc\">239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">239108: The Xalan transformer has failed to execute the procedure</li></ul></ul>",
      "useCase": "Users can use the savePublishOutput operation to save their own published files to Teamcenter."
    },
    {
      "ParameterInfo": [
        {
          "description": "XML Attribute Map Object",
          "parameterName": "attributeMap"
        },
        {
          "description": "Vector Of Functions",
          "parameterName": "functions"
        },
        {
          "description": "DOM Document",
          "parameterName": "domDocument"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Maps Compose Attributes",
      "exceptionCondition": "",
      "id": "ctm0ComposeMapAttributes#Teamcenter::contmgmtbase::DCt_XmlAttrMap,*$std::vector<int>,*$void,**",
      "interface": "Teamcenter::contmgmtbase::Ctm0BOMLine",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0ComposeMapAttributes",
      "opTemplate": "int#Teamcenter::contmgmtbase::Ctm0BOMLine::ctm0ComposeMapAttributes#Teamcenter::contmgmtbase::DCt_XmlAttrMap,*$std::vector<int>,*$void,**",
      "returnDescription": "Returns error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "SetBomWindowTopLineInfo structure",
          "parameterName": "inputs"
        }
      ],
      "canOverride": "false",
      "component": "Ctm0ContentManagement",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation creates a <b>Ctm0BOMLine</b> and set the top line of the <b>Ctm0BOMWindow</b> to the newly created <b>Ctm0BOMLine</b>. It is used by the publication structure editor.",
      "exceptionCondition": "Possible partial error is:<br /><b>CONTMGMTBASE_GENERAL_ERROR</b> 239100 An error has occurred in the Content Management Base module.",
      "id": "setBomWindowTopLine#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineInfo>,&",
      "interface": "Teamcenter::Soa::ContMgmtBase::ContentManagement",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "setBomWindowTopLine",
      "opTemplate": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::setBomWindowTopLine#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineInfo>,&",
      "returnDescription": "Returns the SetBomWindowTopLineResponse structure. Possible partial error is:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li></ul></ul>",
      "useCase": "The user wants to populate the window created with createBomWindow with a topic."
    },
    {
      "ParameterInfo": [
        {
          "description": "The name of the file to be converted.",
          "parameterName": "inFileName"
        },
        {
          "description": "The name of the converted file name",
          "parameterName": "outFileName"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation is primary used by s1000d to convert the sgml content to xml. It does nothing in base content management.",
      "exceptionCondition": "",
      "id": "ctm0ConvertContent#const,std::string,*$std::string,*",
      "interface": "Teamcenter::contmgmtbase::DC_TopicRevision",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0ConvertContent",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertContent#const,std::string,*$std::string,*",
      "returnDescription": "error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "xamPath from xml attribute map",
          "parameterName": "xamPath"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation is used by s1000d to convert the xpath on the attribute map",
      "exceptionCondition": "",
      "id": "ctm0ConvertXAMPath#std::string,&",
      "interface": "Teamcenter::contmgmtbase::DC_TopicRevision",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "ctm0ConvertXAMPath",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertXAMPath#std::string,&",
      "returnDescription": "Error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "Vector Of Functions",
          "parameterName": "functions"
        },
        {
          "description": "DOM Document",
          "parameterName": "domDocument"
        },
        {
          "description": "Flag set if the DOM document was changed during decompose.",
          "parameterName": "domChanged"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Maps decomposed attributes",
      "exceptionCondition": "",
      "id": "ctm0DecomposeMapAttributes#std::vector<int>,*$void,**$bool,&",
      "interface": "Teamcenter::contmgmtbase::DC_TopicRevision",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0DecomposeMapAttributes",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0DecomposeMapAttributes#std::vector<int>,*$void,**$bool,&",
      "returnDescription": "Returns error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "Vector Of Functions",
          "parameterName": "functions"
        },
        {
          "description": "DOM Document",
          "parameterName": "domDocument"
        },
        {
          "description": "Flag set if the DOM document was changed during decompose.",
          "parameterName": "domChanged"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Maps Decompose Attributes",
      "exceptionCondition": "",
      "id": "ctm0DecomposeMapAttributesBase#std::vector<int>,*$void,**$bool,&",
      "interface": "Teamcenter::contmgmtbase::DC_PublicationRevision",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0DecomposeMapAttributesBase",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_PublicationRevision::ctm0DecomposeMapAttributesBase#std::vector<int>,*$void,**$bool,&",
      "returnDescription": "Returns error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "Topic or Publication Revision",
          "parameterName": "itemRevision"
        },
        {
          "description": "The path of the temp directory",
          "parameterName": "tempPath"
        },
        {
          "description": "Xml Attribute Map",
          "parameterName": "xmlAttrMap"
        },
        {
          "description": "Dom Document",
          "parameterName": "domDocument"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Executes a procedure on the topic and dom document",
      "exceptionCondition": "",
      "id": "ctm0ExecuteProcedure#tag_t,*$std::string,*$tag_t,*$void,**",
      "interface": "Teamcenter::contmgmtbase::DC_ProcedureRevision",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "ctm0ExecuteProcedure",
      "opTemplate": "int#Teamcenter::contmgmtbase::DC_ProcedureRevision::ctm0ExecuteProcedure#tag_t,*$std::string,*$tag_t,*$void,**",
      "returnDescription": "Error code",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "The element root of the document",
          "parameterName": "elementRoot"
        },
        {
          "description": "The path of the node to be set",
          "parameterName": "xamPath"
        },
        {
          "description": "The value of the node",
          "parameterName": "nodeValue"
        },
        {
          "description": "DOMNode found in xamPath",
          "parameterName": "targetNode"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Gets the DOMNode value",
      "exceptionCondition": "",
      "id": "ctm0GetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "interface": "Teamcenter::contmgmtbase::DCt_XmlAttrMap",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0GetDOMNode",
      "opTemplate": "int#Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0GetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "returnDescription": "Error code and value",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "The element root of the document",
          "parameterName": "elementRoot"
        },
        {
          "description": "The path of the node to be set",
          "parameterName": "xamPath"
        },
        {
          "description": "The value to set the node",
          "parameterName": "nodeValue"
        },
        {
          "description": "DOMNode found in xamPath",
          "parameterName": "targetNode"
        }
      ],
      "canOverride": "true",
      "component": "",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "Sets the DOMNode to the value",
      "exceptionCondition": "",
      "id": "ctm0SetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "interface": "Teamcenter::contmgmtbase::DCt_XmlAttrMap",
      "isPostActionAllowed": "true",
      "isPreActionAllowed": "true",
      "isPreConditionAllowed": "true",
      "isPublished": "true",
      "name": "ctm0SetDOMNode",
      "opTemplate": "int#Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0SetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "returnDescription": "Error code and target Node",
      "useCase": ""
    }
  ],
  "OperationTemplate": [
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Compose input structure.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "input"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Create composed XML, and also get the Schemas/DTDs, graphics and other information.  During the composition, if it is determined a property needs to be mapped from the topic to the content, the function uses the applicable attribute mapping object to insert the topic property into the xml element or attribute.  Specific functions within the xml attribute mapping are performed against the applicable attribute.  The xml attribute map also provides namespace prefixes that are used in the attributes defined in the map.  This allows the attribute mapping to be defined with prefixes that do not need to be the same as those defined for the topic itself. If the requesting function uses a tool that requires processing instruction, the compose function inserts the processing instruction into the content.  The format of the instruction conforms to the current xml standard for processing instructions.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::composeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposeInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::composeContent",
      "returnConst": "false",
      "returnDescription": "A composed XML document created from the XML fragments in the <b>DC_TopicRevisions</b> that make up the entire document.  Possible partial errors are:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">CONTMGMTBASE_Xml_to_sgml_exception 239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">CONTMGMTBASE_transform_error 239108: The Xalan transformer has failed to execute the procedure.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of BomWindowInfo structures.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "The operation creates a <b>Ctm0BOMWindow</b> used in the publication structure editor.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::createBomWindow#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BomWindowInfo>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::createBomWindow",
      "returnConst": "false",
      "returnDescription": "Returns the BomWindowResponse structure. Possible partial error is:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of SavedPublishInput containing the input information.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishOutputResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation saves the published output to Teamcenter as a <b>Dataset</b> attached to either a <b>DC_ComposedDocRevision</b> or a <b>DC_ReviewerDocRevision</b>.  The published output file must be uploaded to Teamcenter volume first in order to obtain the FMS write ticket for the input for this operation.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishOutputResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::savePublishOutput#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::savePublishOutput",
      "returnConst": "false",
      "returnDescription": "The return is <font face=\"courier\" height=\"10\">SavePublishOutputResponse</font> structure to indicate failures when saving the published dataset. Any failures will be returned with the client id mapped to an error message in the <font face=\"courier\" height=\"10\">ServiceData</font> list. Any failures will be returned with the client id mapped to an error message in the <font face=\"courier\" height=\"10\">ServiceData</font> list. Possible partial errors are: <br /><br /><ul><ul><li type=\"disc\">239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">239108: The Xalan transformer has failed to execute the procedure</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "SetBomWindowTopLineInfo structure",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation creates a <b>Ctm0BOMLine</b> and set the top line of the <b>Ctm0BOMWindow</b> to the newly created <b>Ctm0BOMLine</b>. It is used by the publication structure editor.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::setBomWindowTopLine#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SetBomWindowTopLineInfo>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::setBomWindowTopLine",
      "returnConst": "false",
      "returnDescription": "Returns the SetBomWindowTopLineResponse structure. Possible partial error is:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::contmgmtbase::DCt_XmlAttrMap",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "XML Attribute Map Object",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "attributeMap"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::vector<int>",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Vector Of Functions",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "functions"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "DOM Document",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domDocument"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Maps Compose Attributes",
      "id": "int#Teamcenter::contmgmtbase::Ctm0BOMLine::ctm0ComposeMapAttributes#Teamcenter::contmgmtbase::DCt_XmlAttrMap,*$std::vector<int>,*$void,**",
      "name": "Teamcenter::contmgmtbase::Ctm0BOMLine::ctm0ComposeMapAttributes",
      "returnConst": "false",
      "returnDescription": "Returns error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "tag_t",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Topic or Publication Revision",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "itemRevision"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The path of the temp directory",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "tempPath"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "tag_t",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Xml Attribute Map",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "xmlAttrMap"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Dom Document",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domDocument"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Executes a procedure on the topic and dom document",
      "id": "int#Teamcenter::contmgmtbase::DC_ProcedureRevision::ctm0ExecuteProcedure#tag_t,*$std::string,*$tag_t,*$void,**",
      "name": "Teamcenter::contmgmtbase::DC_ProcedureRevision::ctm0ExecuteProcedure",
      "returnConst": "false",
      "returnDescription": "Error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::vector<int>",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Vector Of Functions",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "functions"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "DOM Document",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domDocument"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "bool",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Flag set if the DOM document was changed during decompose.",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domChanged"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Maps Decompose Attributes",
      "id": "int#Teamcenter::contmgmtbase::DC_PublicationRevision::ctm0DecomposeMapAttributesBase#std::vector<int>,*$void,**$bool,&",
      "name": "Teamcenter::contmgmtbase::DC_PublicationRevision::ctm0DecomposeMapAttributesBase",
      "returnConst": "false",
      "returnDescription": "Returns error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The name of the file to be converted.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inFileName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The name of the converted file name",
          "freeOutputMemory": "false",
          "inputOutput": "Output",
          "name": "outFileName"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation is primary used by s1000d to convert the sgml content to xml. It does nothing in base content management.",
      "id": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertContent#const,std::string,*$std::string,*",
      "name": "Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertContent",
      "returnConst": "false",
      "returnDescription": "error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "xamPath from xml attribute map",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "xamPath"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation is used by s1000d to convert the xpath on the attribute map",
      "id": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertXAMPath#std::string,&",
      "name": "Teamcenter::contmgmtbase::DC_TopicRevision::ctm0ConvertXAMPath",
      "returnConst": "false",
      "returnDescription": "Error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::vector<int>",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Vector Of Functions",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "functions"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "DOM Document",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domDocument"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "bool",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Flag set if the DOM document was changed during decompose.",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "domChanged"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Maps decomposed attributes",
      "id": "int#Teamcenter::contmgmtbase::DC_TopicRevision::ctm0DecomposeMapAttributes#std::vector<int>,*$void,**$bool,&",
      "name": "Teamcenter::contmgmtbase::DC_TopicRevision::ctm0DecomposeMapAttributes",
      "returnConst": "false",
      "returnDescription": "Returns error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "int",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "user action code",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "userAction"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "name of the tool",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "toolName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "name of the xml file to be transformed",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputXMLFileName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "Name of the output xml file",
          "freeOutputMemory": "false",
          "inputOutput": "Output",
          "name": "outputXMLFileName"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "transforms the input xml using an xslt",
      "id": "int#Teamcenter::contmgmtbase::DC_TransfPolicy::ctm0Transform#const,int$const,std::string,*$const,std::string,*$std::string,*",
      "name": "Teamcenter::contmgmtbase::DC_TransfPolicy::ctm0Transform",
      "returnConst": "false",
      "returnDescription": "error code",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The element root of the document",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "elementRoot"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The path of the node to be set",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "xamPath"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The value of the node",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "nodeValue"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "DOMNode found in xamPath",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "targetNode"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Gets the DOMNode value",
      "id": "int#Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0GetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "name": "Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0GetDOMNode",
      "returnConst": "false",
      "returnDescription": "Error code and value",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of DecomposeInput structs. Each item in the vector represents an XML file that will be decomposed. See DecomposeInput for more details.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "The decompose operation breaks up the XML based on its schema into smaller XML segments. The XML segments are then stored as <b>Datasets</b> that are attached to <b>DC_Topic</b> or <b>DC_Publication</b> objects in Teamcenter. If an XML is decomposed for the first time, for example through the import operation, then new <b>DC_Topic</b> or <b>DC_Publication</b> objects are created to hold the <b>Datasets</b>. Otherwise the <b>Datasets</b> attached to existing objects are updated with any new content.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContent#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContent",
      "returnConst": "false",
      "returnDescription": "A list of <b>ItemRevisions</b> representing the newly created or updated root Topics or Publications for each of the xml that is decomposed is returned. The DecomposeOutput struct holds the <b>ItemRevisions</b> that are returned. The ServiceData element is used to hold the status of the operation and any errors encountered during the operation.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The element root of the document",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "elementRoot"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The path of the node to be set",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "xamPath"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "*"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The value to set the node",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "nodeValue"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "void",
              "qualifier": "**"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "DOMNode found in xamPath",
          "freeOutputMemory": "false",
          "inputOutput": "InputOutput",
          "name": "targetNode"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "int",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Sets the DOMNode to the value",
      "id": "int#Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0SetDOMNode#void,*$std::string,*$std::string,*$void,**",
      "name": "Teamcenter::contmgmtbase::DCt_XmlAttrMap::ctm0SetDOMNode",
      "returnConst": "false",
      "returnDescription": "Error code and target Node",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of DecomposeInput structs. Each item in the vector represents an XML file that will be decomposed. See DecomposeInput for more details.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement::DecomposeResponse2",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.2.3",
      "description": "The decompose operation breaks up the XML based on its schema into smaller XML segments. The XML segments are then stored as <b>Datasets</b> that are attached to <b>DC_Topic</b> or <b>DC_Publication</b> objects in Teamcenter. If an XML is decomposed for the first time, for example through the import operation, then new <b>DC_Topic </b>or <b>DC_Publication</b> objects are created to hold the <b>Datasets</b>. Otherwise the <b>Datasets</b> attached to existing objects are updated with any new content.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement::DecomposeResponse2#Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContentWithMetaData#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::decomposeContentWithMetaData",
      "returnConst": "false",
      "returnDescription": "A list of <b>ItemRevisions</b> representing the newly created or updated root Topics or Publications for each of the xml that is decomposed is returned. The DecomposeOutput struct holds the <b>ItemRevisions</b> that are returned. The ServiceData element is used to hold the status of the operation and any errors encountered during the operation.<br />May return the followin partial errors:<br />239100: An error has occurred in the Content Management Base module.<br />239169: And XML exception occurred.<br />239173: A key reference cannot be resolved.<br />239175: A reference cannot be created to a topic that doesn't exist",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::BusinessObject",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The <b>DC_TopicType</b> of interest.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "topicType"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The topic type name filter.  The topic type name filter supports wild cards and if the supplied value is * it will return all the <b>DC_TopicType</b> instances belonging to the<b> DCt_TopicTypeGrp</b> for the input <b>DC_TopicType</b>. Static alphanumeric string with * are supported.  If there is no match then an empty list will be return.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "topicTypeNameFilter"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "bool",
              "qualifier": ""
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "A boolean indicating if the output should include all <b>DC_TopicRevision </b>objects that reference the <b>DC_TopicType</b> objects through the property ctm0TopicTypeTagref.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "includeReferencedTopics"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Internal::ContMgmtBase::_2021_06::ContentManagement::TopicTypesOutput",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc13000.2.0",
      "description": "The operation returns a structure containing <b>DC_TopicType </b>objects that matches all these conditions:<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;The <b>DC_TopicType</b> belongs to the same <b>DCt_TopicTypeGrp</b> as the input<b> DC_TopicType</b>.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;The <b>DC_topicType</b> object_name property matches the input topicTypeNameFilter.<br /><br />If the input includeReferencedTopics is TRUE, the output structure would also contain the list of <b>DC_TopicRevision </b>which has ctm0TopicTypeTagref property set to the <b>DC_TopicType</b> contained in the output list.",
      "id": "Teamcenter::Soa::Internal::ContMgmtBase::_2021_06::ContentManagement::TopicTypesOutput#Teamcenter::Soa::ContMgmtBase::ContentManagement::getTopicTypesAndRelatedTopics#const,Teamcenter::BusinessObject,&$const,std::string$bool",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::getTopicTypesAndRelatedTopics",
      "returnConst": "false",
      "returnDescription": "The structure containing the list of <b>DC_TopicType</b> objects and optionally the<b> DC_TopicRevision</b> objects that reference the<b> DC_TopicType</b> objects.<br /><br />The following partial error may be returned:<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239503: Topic type &quot;%1$&quot; does not belong to a topic type group.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239504: Topic type &quot;%1$&quot; does not exist.<br />&bull;&nbsp;&nbsp;&nbsp;&nbsp;239505: Regular expression is not correct: &quot;%1$&quot;.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of ImportGraphicInput structs.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation creates a <b>GraphicOption</b>, <b>DCt_GrphcTrnsltn</b>, <b>Graphic</b> and Image <b>Dataset</b> for the input image so the user can use these to reference graphics in xml content in Teamcenter Content Management.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::importGraphicOption#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::importGraphicOption",
      "returnConst": "false",
      "returnDescription": "An ImportGraphicResponse object holding a list of ImportGraphicOutput objects containing any status or error messages from the operation along with a ServiceData object is returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of  file tickets of the zip files to be processed.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "fileTickets"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Server::ServiceData",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc12000.3.0",
      "description": "This operation imports the translated data contained within the input zip files.  Each zip file<br />is in the format provided by the prepareTranslationDelivery service opration.",
      "id": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ContMgmtBase::ContentManagement::importTranslation#const,std::vector<std::string>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::importTranslation",
      "returnConst": "false",
      "returnDescription": "ServiceData <br /><br />The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">239140 A translation object cannot be found for the topic.</li><li type=\"disc\">239400 The input file ticket is not a zip file.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishRequestArgs",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of PreparePublishRequestArgs containing the publish input information.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "For client side publishing, this operation prepares data for publishing.  The client is required to download the returned file (zip file includes the composed XML, schemas, style sheet, and\\or graphics) and then invoke the publishing tool.   For server side publishing, a Dispatcher Request will be created to publish the data.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::preparePublish#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishRequestArgs>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::preparePublish",
      "returnConst": "false",
      "returnDescription": "<font face=\"courier\" height=\"10\">PreparePublishResponse</font> structure that includes a vector of <font face=\"courier\" height=\"10\">PreparePublishResult</font> objects and a <font face=\"courier\" height=\"10\">ServiceData</font> element. The <font face=\"courier\" height=\"10\">PreparePublishResult</font> contains a file ticket that is used by the client to download a zip file that includes the composed XML, schemas, style sheet, and\\or graphics if called using client side publish. Any failure will be returned with the client id mapped to an error message in the ServiceData list. Possible partial errors are: <br /><br /><ul><ul><li type=\"disc\">239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">239124: An exception was detected while converting XML to SGML</li><li type=\"disc\">239108: The Xalan transformer has failed to execute the procedure</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement::InternalPreparePublishRequestArgs",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A vector of InternalPreparePublishRequestArgs objects.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "void",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation prepares data such as a publishing tool, style sheets, composed XML, schema, and graphics files for server side publishing.  This can be called asynchronously if the Dispatcher is configured to support asynchronous operations.",
      "id": "void#Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareServerPublishing#const,std::vector<Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement::InternalPreparePublishRequestArgs>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareServerPublishing",
      "returnConst": "false",
      "returnDescription": "There is no return for this operation so that it can be called asynchronously.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of Translation Delivery input structures.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "input"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "Perform operations specific to preparing translations for delivery.  Allows a user to create a <b>TranslatnDelvry</b> and relate it to <b>TranslationOrder</b>.  Creates the <b>DCt_Translation</b> object and relate to <b>DC_TopicRevision</b> or <b>DC_PublicationRevision</b>.  If multiple languages are chosen, then multiple translations are generated, each with a one to one relation with a <b>DC_TopicRevision</b> or <b>DC_PublicationRevision</b>.  A folder structure is created to save the composed and decomposed xml files for each language.  Zip the folder structure and save as <b>Dataset</b>.",
      "id": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryResponse#Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareTranslationDelivery#const,std::vector<Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryInput>,&",
      "name": "Teamcenter::Soa::ContMgmtBase::ContentManagement::prepareTranslationDelivery",
      "returnConst": "false",
      "returnDescription": "Vector of output objects representing objects that were created. Possible partial errors are:<br /><ul><ul><li type=\"disc\">CONTMGMTBASE_GENERAL_ERROR 239100: An error has occurred in the Content Management Base module</li><li type=\"disc\">CONTMGMTBASE_UnableToFindTranslationObject 239140: Unable to find the translation object</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    }
  ],
  "ServiceInterface": [
    {
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This service adds operations required by content management to perform operations specific to content management.  These operations allow the user to perform some of the basic functions of content management: compose, decompose, translation import/export and import graphics.<br />These SOAs would allow a user to:<br /><ul><ul><li type=\"disc\">Import a set of graphics.  </li><li type=\"disc\">Import an XML document that references these graphics</li><li type=\"disc\">Compose the XML document for editing</li><li type=\"disc\">Decompose the edited XML document which updates the content management items in the database</li></ul></ul>",
      "libraryName": "TcSoaContMgmtBase",
      "name": "ContentManagement",
      "namespace": "Teamcenter::Soa::ContMgmtBase",
      "serviceLibraryRef": "Java<br /><ul><ul><li type=\"disc\">TcSoaContMgmtBaseTypes.jar</li><li type=\"disc\">TcSoaContMgmtBaseStrong.jar</li><li type=\"disc\">TcSoaContMgmtBaseLoose.jar</li></ul></ul><br />C++<br /><ul><ul><li type=\"disc\">libtcsoacontmgmtbase.dll</li><li type=\"disc\">libtcsoacontmgmtbasetypes.dll</li><li type=\"disc\">libtcsoacontmgmtbasestrongmngd.dll</li><li type=\"disc\">libtcsoacontmgmtbasestrong.dll</li></ul></ul><br />C#<br /><ul><ul><li type=\"disc\">TcSoaContMgmtBaseTypes.dll</li><li type=\"disc\">TcSoaContMgmtBaseStrong.dll</li><li type=\"disc\">TcSoaContMgmtBaseLoose.dll</li></ul></ul>"
    }
  ],
  "Struct": [
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier of the object.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::RevisionRule"
            }
          ],
          "description": "Revision Rule",
          "name": "revisionRule"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "input",
      "isPublished": "true",
      "name": "BomWindowInfo",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier that helps the client to track the object created.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BOMWindow"
            }
          ],
          "description": "The <b>Ctm0BOMWindow</b> object that was created.",
          "name": "bomWindow"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA framework object containing objects that were created, deleted, or updated by the Service, plain objects, and error information.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Response",
      "isPublished": "true",
      "name": "BomWindowResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Graphic file name.",
          "name": "name"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Size in bytes of graphic file specified by <i>name</i>.",
          "name": "size"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Transient file write ticked of the content.",
          "name": "transientFileWriteTicket"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure contains Graphic Name and Size information.",
      "isPublished": "true",
      "name": "GraphicNameAndSize",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Client Id",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the Graphic Attribute Mapping in the database.",
          "name": "graphicAttrMapping"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "List of Graphic usages, separated by comma.",
          "name": "graphicUsages"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Graphic Class Name.  Either <i>Graphic</i> or <i>S1000D Graphic</i>.",
          "name": "graphicClassName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the <b>DCt_Language</b> object in the database.",
          "name": "language"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::GraphicNameAndSize"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Path, graphic name and size of the graphic imported.",
          "name": "nameAndSize"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Define Overwrite mode.  Either <i>Skip</i>,<i> keep</i>, <i>merge</i> or <i>overwrite</i>.",
          "name": "overwriteMode"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Import Graphic Structure, contains: Graphic Name/Path and Size, Graphic Attribute Mapping name, Graphic Usage, Graphic Class name and Language.",
      "isPublished": "true",
      "name": "ImportGraphicInput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Client Id",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Error message if there was a problem.",
          "name": "errorMessage"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Structure of Import Graphic Output.",
      "isPublished": "true",
      "name": "ImportGraphicOutput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ImportGraphicOutput"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Return output response",
          "name": "outPut"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Structure of Import Graphic Response.",
      "isPublished": "true",
      "name": "ImportGraphicResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The publication or topic revision to be published.",
          "name": "primaryObject"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The publish tool used to publish.",
          "name": "publishTool"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "The priority to assign to the dispatcher request.  Note: This is currently not implemented.",
          "name": "priority"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The start time to start the request.  Note: This is currently not implemented.",
          "name": "startTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The end time at which no new requests will be created based on interval settings.  Note: This is currently not implemented.",
          "name": "endTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement::InternalNameValueMap"
            }
          ],
          "description": "The name value pairs (string/string) that contain the publishing parameters. The following are out of the box name value pairs.  Extra name value pairs can be passed in for customization if needed.<br /><ul><ul><li type=\"disc\">compVerSel: compose version selection that is a valid revision rule (Any Status; No Working, Latest Working, Working; Any Status, etc)</li><li type=\"disc\">language: name of the language to be published (English US, German, Japanese, etc)</li><li type=\"disc\">styleType: the defined style type name that user chooses</li><li type=\"disc\">registerResult: saves the published output back to Teamcenter to either a Composed Document or Reviewer Document</li><li type=\"disc\">transVerSel: the translation version of the topic (Latest Received, Match Topic, or Received)</li><li type=\"disc\">resultingFileFolder: the folder path that user chooses to store the published output (for client side publishing, must be a valid path)</li><li type=\"disc\">resultingFileName: the file name user chooses (for client side publishing, can be any string)</li><li type=\"disc\">publishToFileSystem: whether or not the published output will be saved to a file system (true or false) </li><li type=\"disc\">ditaFilterValues: the name(s) of DITA value filter(s)</li></ul></ul>",
          "name": "keyValueArgs"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The InternalPreparePublishRequestArgs struct is used to pass in multiple sets of data to be used in a single call.",
      "isPublished": "false",
      "name": "InternalPreparePublishRequestArgs",
      "namespace": "Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "<b>DCt_Language</b> objects to be related to <b>TranslationOrder</b>.",
          "name": "languageRef"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "Review order flag which indicates a review of the <b>TranslationOrder</b> is requested.  If true, the user is expected to request a review of the translation.",
          "name": "reviewOrder"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This table contains the DCt_Language object and a Boolean indicating whether a review is requested.",
      "isPublished": "true",
      "name": "LanguageTableRow",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The publication or topic revision to be published.",
          "name": "primaryObject"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The publish tool used to publish.",
          "name": "publishTool"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "The priority of the request.  This only applies to the server side publishing request.  Note: This is currently not implemented.",
          "name": "priority"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The start time to start the request.  This only applies to the server side publishing request.  Note: This is currently not implemented.",
          "name": "startTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The end time at which no new requests will be created based on interval setting.  If request is still processing, the request WILL be completed and will not be stopped. This only applies to the server-side publishing request.",
          "name": "endTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::NameValueMap"
            }
          ],
          "description": "The name value pairs (string/string) that contain the publishing parameters.  The following are out of the box name value pairs.  Extra name value pairs can be passed in for customization if needed.<br /><ul><ul><li type=\"disc\">compVerSel: compose version selection that is a valid revision rule (Any Status; No Working, Latest Working, Working; Any Status, etc)</li><li type=\"disc\">language: name of the language to be published (English US, German, Japanese, etc)</li><li type=\"disc\">styleType: the defined style type name that user chooses</li><li type=\"disc\">registerResult: saves the published output back to Teamcenter to either a Composed Document or Reviewer Document</li><li type=\"disc\">transVerSel: the translation version of the topic (Latest Received, Match Topic, or Received)</li><li type=\"disc\">resultingFileFolder: the folder path that user chooses to store the published output (for client side publishing, must be a valid path)</li><li type=\"disc\">resultingFileName: the file name user chooses (for client side publishing, can be any string)</li><li type=\"disc\">publishToFileSystem: whether or not the published output will be saved to a file system (true or false) </li><li type=\"disc\">ditaFilterValues: the name(s) of DITA value filter(s)</li></ul></ul>",
          "name": "keyValueArgs"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The PreparePublishRequestArgs structure is used to capture the information required to prepare the data for publishing.",
      "isPublished": "true",
      "name": "PreparePublishRequestArgs",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::PreparePublishResult"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "The Prepare Publish Result data.",
          "name": "dataResult"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA Service Data.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The response structure for preparePublish method.",
      "isPublished": "true",
      "name": "PreparePublishResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "A flag to indicate whether or not this is client side publishing.  Acceptable values are true or false.",
          "name": "clientSidePublishing"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The publish meta data xml transient file read ticket.  This file contains information about the tool, schema dataset, stylesheet dataset and graphics dataset.  This only applies to client side publishing",
          "name": "publishMetaDataReadTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The composed xml transient file read ticket.  The client will use the ticket to download the file using FMS.  File(s) will be returned as a zip file.  This only applies to client side publishing.",
          "name": "composedFileReadTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The Dispatcher Request objects created.  This only applies to server side publishing.",
          "name": "requestCreated"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The structure for preparePublish result data.",
      "isPublished": "true",
      "name": "PreparePublishResult",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The <b>DC_ComposedDocRevision</b> or <b>DC_ReviewerDocRevision</b> the published file is to be attached to.",
          "name": "composedOrReviewerDocRev"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::SavePublishNamedRefUploadInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector containing the upload information.",
          "name": "uploadInfos"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The SavePublishInput structure contains the information needed to save the output of the published as a <b>Dataset</b> in Teamcenter and relate it to the <b>DC_ComposedDocRevision</b> or <b>DC_ReviewerDocRevision</b>.",
      "isPublished": "true",
      "name": "SavePublishInput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique Identifier of the object.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "This object could be the following: <b>DC_Publication</b>, <b>DC_PublicationRevision</b>, <b>DC_Topic</b>, <b>DC_TopicRevision</b>, or <b>Ctm0BOMLine</b>.",
          "name": "composableBO"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::RevisionRule"
            }
          ],
          "description": "The revision rule that configures the publication or topic structure.",
          "name": "revisionRule"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::NameValueMap"
            }
          ],
          "description": "The name value pairs containing the compose parameters.<br />Typical key value pairs: <br /><ul><ul><li type=\"disc\">language &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;English, Japanese, etc</li><li type=\"disc\">styleType &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The defined style type name that user chooses</li><li type=\"disc\">translateVersion &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MatchTopic or Latest Received</li><li type=\"disc\">composedRefVariant &nbsp;&nbsp;&nbsp;&nbsp;The defined composable reference variant name that user chooses</li><li type=\"disc\">resultingFileFolder &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The folder path that user chooses to store the publish document</li><li type=\"disc\">resultingFileName &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The file name user chooses</li><li type=\"disc\">registerResult&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;true or false</li><li type=\"disc\">publishToFileSystem &nbsp;&nbsp;&nbsp;&nbsp;true or false</li><li type=\"disc\">createClassName &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The publish document class name to create for the composed output.  For example: <b>DC_ComposedDoc</b> or <b>DC_ReviewerDoc</b>.</li></ul></ul>",
          "name": "keyValueArgs"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::NameValueMap"
            }
          ],
          "description": "Processing data variables (currently not used).",
          "name": "processingDataVars"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Input for the compose operation",
      "isPublished": "true",
      "name": "ComposeInput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The file name of the published output.",
          "name": "fileName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A string to indicate the format of the published output (i.e. <b>PDF_Reference</b>, <b>ZIPFILE</b>, <b>Text</b>, or <b>MSWordXPart</b>) which is appended to the <b>Dataset</b> name.",
          "name": "refName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The FMS file write ticket.",
          "name": "fileWriteTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The <b>Dataset</b> type.",
          "name": "datasetTypeName"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The SavePublishNamedRefUploadInfo structure for the upload information needed to create or update a dataset on a Composed Document or Reviewer Document Revision.",
      "isPublished": "true",
      "name": "SavePublishNamedRefUploadInfo",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA service data.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The response structure for savePublishOutput method.",
      "isPublished": "true",
      "name": "SavePublishOutputResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier of the object.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BOMWindow"
            }
          ],
          "description": "The <b>Ctm0BOMWindow</b> to set.",
          "name": "bomWindow"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Item"
            }
          ],
          "description": "The <b>DC_Publication</b> or <b>DC_Topic</b>.",
          "name": "item"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The <b>DC_PublicationRevision</b> or <b>DC_TopicRevision</b>.",
          "name": "itemRevision"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Sets the top line of the <b>Ctm0BOMWindow</b>.",
      "isPublished": "true",
      "name": "SetBomWindowTopLineInfo",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier that helps the client to track the object created.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::BOMLine"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "The top <b>Ctm0BOMLine</b>.",
          "name": "topLine"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA framework object containing objects that were created, deleted, or updated by the Service, plain objects, and error information.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "response",
      "isPublished": "true",
      "name": "SetBomWindowTopLineResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::BusinessObject"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of <b>DC_TopicType</b> objects.",
          "name": "topicTypes"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::BusinessObject"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of <b>DC_TopicRevision </b>objects that reference the <b>DC_TopicType</b> objects through the property ctm0TopicTypeTagref when includeReferencedTopics is TRUE.",
          "name": "topicRevisions"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Contains the list of all <b>BusinessObject</b> objects that make up the output, as well as any errors that might have occurred as part of the service invocation.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc13000.2.0",
      "description": "The structure containing the list o<b>f DC_TopicType</b> objects and optionally the <b>DC_TopicRevision</b> objects that reference the <b>DC_TopicType</b> objects",
      "isPublished": "false",
      "name": "TopicTypesOutput",
      "namespace": "Teamcenter::Soa::Internal::ContMgmtBase::_2021_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier of the object.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::TranslationOrderRevision"
            }
          ],
          "description": "<b>TranslationOrderRevision</b> object.",
          "name": "translationOrderRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::BooleanMap"
            }
          ],
          "description": "Boolean properties for translation delivery. Keys are: Include Graphics, Include Supporting Data, Deliver Composed Topic, Deliver Decomposed Topic, Include Published Content.",
          "name": "booleanProps"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::LanguageTableRow"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of LanguageTableRow objects that containt the language that the document will be translated into.",
          "name": "languageRow"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Input for the prepareTranslationDelivery Operation",
      "isPublished": "true",
      "name": "TranslationDeliveryInput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::TranslatnDelvryRevision"
            }
          ],
          "description": "The created <b>TranslatnDelvry</b>.",
          "name": "tranlationDeliveryRev"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Vector of output objects representing objects that were created",
      "isPublished": "true",
      "name": "TranslationDeliveryOut",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::TranslationDeliveryOut"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of created objects.",
          "name": "output"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA framework object containing objects that were created, deleted, or updated by the Service, plain objects, and error information.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Vector of output objects representing objects that were created.",
      "isPublished": "true",
      "name": "TranslationDeliveryResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::ComposedData"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of composed documents.",
          "name": "composedData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The SOA framework object containing objects that were created, deleted, or updated by the Service, plain objects, and error information.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Vector of compose output objects",
      "isPublished": "true",
      "name": "ComposeResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique identifier.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Transient file read ticket to the compose content. The client will use the ticket to download the file using FMS. Multiple files or single file will be returned as a zip file.",
          "name": "composedTransientFileReadTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The composed meta data xml transient file read ticket. The file contains information about the schema dataset, graphics dataset, compose version log transient FMS read ticket, compose error log FMS read ticket, and etc.",
          "name": "composedMetaDataReadTicket"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This data structure contains information about the composed data.",
      "isPublished": "true",
      "name": "ComposedData",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique client identifier.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Transient file write ticket of the content to be decomposed.",
          "name": "transientFileWriteTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::NameValueMap"
            }
          ],
          "description": "The name value pairs (string, string) containing the decompose parameters. To use this map a master key/value pair is used to govern all subsequent added key/value pairs: <br /><br />Supported master key/value pairs:<br />Key: &ldquo;Type&rdquo; : Values: &ldquo;Import&rdquo;, &ldquo;Translation_receive&rdquo;, &ldquo;Save_from_edit&rdquo;, and &ldquo;ImportDitaMap&rdquo;<br /> <br />If master value is: &ldquo;Import&rdquo;, &ldquo;Save_from_edit&rdquo; or &ldquo;ImportDitaMap&rdquo; the following subsequent key/value pairs are supported:<br />Key: &ldquo;Topic_Type&rdquo;, Value: Name of the root topic type.<br />Key: &ldquo;Graphic_attr_mapping&rdquo;, Value:  The object_name property of the DC_GraphicAttrMap object that will be used during the decompose operation.  <br />Key: &ldquo;Graphic_mode&rdquo; Values: &ldquo;Public_id&rdquo;, &ldquo;Import_org_name&rdquo;, &ldquo;XML_number&rdquo;, and &ldquo;Graphic_name&rdquo;. <br /><br />If master value is: &ldquo;Translation_receive&rdquo; the following subsequent key/value pairs are supported:<br />Key: &ldquo;Language_code&rdquo; Value: the isoLanguageCode property of a DCt_Language object that will be used during the decompose operation. <br />Key: &ldquo;Country_code&rdquo;, Value: the isoCountryCode property of a DCt_Language object that will be used during the decompose operation.",
          "name": "keyValueArgs"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Input for the decompose operation. This holds the XML file to be decomposed and the arguments in keyValueArgs that define how the XML file is decomposed. See keyValueArgs for more details.",
      "isPublished": "true",
      "name": "DecomposeInput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique client identifier",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The root topic or publication revision of decomposed content.",
          "name": "topicRevision"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The DecomposeOutput struct is used to hold the data returned by the decomposeContent operation.",
      "isPublished": "true",
      "name": "DecomposeOutput",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique client identifier",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The root topic or publication revision of decomposed content.",
          "name": "topicRevision"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The decomposed meta data xml transient file read ticket. The file contains information about the items and relationships created during decompose.",
          "name": "decomposedMetaDataReadTicket"
        }
      ],
      "createRelease": "tc11000.2.3",
      "description": "The DecomposeOutput2 struct is used to hold the data returned by the decomposeContentWithMetaData operation.",
      "isPublished": "true",
      "name": "DecomposeOutput2",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement::DecomposeOutput"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of Decomposed Output structs.",
          "name": "descomposeOutput"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Service data.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "Return value for the decompose operation. It contains decompose output as well as ServiceData which contains partial errors.",
      "isPublished": "true",
      "name": "DecomposeResponse",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement::DecomposeOutput2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of Decomposed Output structs.",
          "name": "decomposeOutput2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Service data.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc11000.2.3",
      "description": "Return value for the decompose operation. It contains decompose output as well as ServiceData which contains partial errors.",
      "isPublished": "true",
      "name": "DecomposeResponse2",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2016_10::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    }
  ],
  "TcVersion": "tc13000.0.0",
  "Typedef": [
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "dataType": "bool"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "boolean properties for translation delivery",
      "isPublished": "true",
      "name": "BooleanMap",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "dataType": "std::string"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The name value pairs containing the input parameters.",
      "isPublished": "false",
      "name": "InternalNameValueMap",
      "namespace": "Teamcenter::Soa::Internal::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "dataType": "std::string"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The name value pairs containing the compose and decompose parameters.",
      "isPublished": "true",
      "name": "NameValueMap",
      "namespace": "Teamcenter::Soa::ContMgmtBase::_2011_06::ContentManagement",
      "scope": "Teamcenter::Soa::ContMgmtBase::ContentManagement"
    }
  ],
  "xmlns": "http://teamcenter.com/BusinessModel/TcBusinessData"
}