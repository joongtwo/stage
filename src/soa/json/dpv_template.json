{
  "Date": "Fri Jun 05 04:01:52 PM 2020",
  "Library": [
    {
      "createRelease": "tc2007.1.2",
      "description": "TcSoaProductionManagement",
      "isThirdParty": "false",
      "name": "TcSoaProductionManagement",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibrary": "true"
    },
    {
      "DependentOn": [
        {
          "name": "metaframework"
        },
        {
          "name": "tccore"
        },
        {
          "name": "tc"
        },
        {
          "name": "cxpom"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "for dpv",
      "isThirdParty": "false",
      "name": "gdis",
      "namespace": "",
      "serviceLibrary": "false"
    }
  ],
  "Operation": [
    {
      "ParameterInfo": [
        {
          "description": "A list of target events that  includes a plant ID, measurement event ID that belongs  to a plant ID, and an active status. Different <font face=\"courier\" height=\"10\">TargetEvents</font> can have different active statuses.",
          "parameterName": "targetRows"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.3",
      "dependencies": "",
      "description": "This operation updates the status of one or more measurement events specified in the list of <font face=\"courier\" height=\"10\">TargetEvents</font> to active or inactive.  <font face=\"courier\" height=\"10\">TargetEvents</font>  includes a plant ID, measurement event that belongs to the plant ID, and its associated active status",
      "exceptionCondition": "",
      "id": "activateOrDeactivateData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataEdit::TargetEvents>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataEdit",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "activateOrDeactivateData",
      "opTemplate": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataEdit::activateOrDeactivateData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataEdit::TargetEvents>,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font> holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Change the active status of measurement events using the Dimensional Planning and Validation (DPV) Measurement user interface in the Teamcenter rich client."
    },
    {
      "ParameterInfo": [
        {
          "description": "The link name for the external database, <font face=\"courier\" height=\"10\">dbName</font><br /><br />",
          "parameterName": "linkName"
        },
        {
          "description": "User name for the external database, <font face=\"courier\" height=\"10\">dbName</font>",
          "parameterName": "userName"
        },
        {
          "description": "Password for the <font face=\"courier\" height=\"10\">userName</font> for the external database, <font face=\"courier\" height=\"10\">dbName</font>",
          "parameterName": "passWord"
        },
        {
          "description": "The external database name to which a link is created",
          "parameterName": "dbName"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation will create database links to external databases, in the Teamcenter database. The link names will be stored in the USER_DB_LINKS system table of the Teamcenter database. The external databases store measurement data for the Dimensional Planning and Validation (DPV) application. The link names are used to store the measurement data and query measurement data from measurement database by external applications, such as Extraction Transaction and Load (ETL) and Teamcenter lifecycle visualization.<br />",
      "exceptionCondition": "",
      "id": "createLinkNames#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "createLinkNames",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::CreateLinkNameInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::createLinkNames#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "In the Manufacturing Process Planner application in the Teamcenter rich client, the send plant ID context menu under a <b>MEPrPlantProcessRevision</b> object is used to gather measurement database name, measurement database user name, measurement database password, and link name. Then, this operation is used to create the database link."
    },
    {
      "ParameterInfo": [
        {
          "description": "This data is used as a search criteria to get the corresponding feature attributes from a given specification sheet. ",
          "parameterName": "inputToGetFtrAtt"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc10000.1.3",
      "dependencies": "",
      "description": "This operation gets all feature attribute codes (X deviation (X_DEV),Y deviation (Y_DEV) Z deviation( Z_DEV)) from a given specification sheet.<br /><br />The feature attribute codes are further used to query corresponding measurement data and engineering data based on search criteria<br />",
      "exceptionCondition": "",
      "id": "getFeatureAttributesForSpec#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetAttrCode>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getFeatureAttributesForSpec",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetFtrAttResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributesForSpec#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetAttrCode>,&",
      "returnDescription": "The results include the feature attribute .<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given Operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given specification sheet name is not available in excel sheet.</li></ul></ul>",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of routine set information structures. Each structure contains a <font face=\"courier\" height=\"10\">clientId</font> and a pair of routine revisions for which the mapped feature information is requested. The <font face=\"courier\" height=\"10\">clientId</font> is a unique integer and a key that represents the pair of routine revisions in the structure. It is the responsibility of the user to ensure that the <font face=\"courier\" height=\"10\">clientId</font> is unique",
          "parameterName": "request"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "P8000.0.0",
      "dependencies": "",
      "description": "This operation returns a set of mapped features for each pair of routine revisions in the request list. For each pair of routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine revision. This map information is for features and not feature attributes. If one feature is mapped to another feature, then all the common attribute codes between the two features are mapped that is, there is no way to map select attribute codes under a feature).",
      "exceptionCondition": "",
      "id": "getMappedFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::RoutineSetInfo>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getMappedFeatureData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::MappedFeatureResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::RoutineSetInfo>,&",
      "returnDescription": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Given two routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "The DPV Reporting & Analysis client application in standalone Teamcenter lifecycle visualization queries Teamcenter for mapped features between two routine revisions."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of routine set information structures. Each structure contains a clientId and a pair of routine revisions for which the mapped feature information is requested. The clientId is a unique integer and a key that represents the pair of routine revisions in the structure.",
          "parameterName": "request"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.4.0",
      "dependencies": "",
      "description": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Routine revision is the <b>ItemRevision</b> with operation of type &quot;Manufacturing Engineering Inspection&quot;. For each pair of routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine revision. This map information is for features and not feature attributes. If one feature is mapped to another feature, then all the common attribute codes between the two features are mapped (there is no way to map select attribute codes under a feature).",
      "exceptionCondition": "",
      "id": "getMappedPortFeatureData#const,std::vector<Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::PortRoutineSetInfo>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "getMappedPortFeatureData",
      "opTemplate": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::MappedPortFeatureResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedPortFeatureData#const,std::vector<Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::PortRoutineSetInfo>,&",
      "returnDescription": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Given two routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine. The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. The following partial errors maybe returned:<br /><ul><ul><li type=\"disc\">231117: No Excel dataset could be found under the given operation/routine.</li><li type=\"disc\">231128: The provided Routine Revision is invalid.</li></ul></ul>",
      "useCase": ""
    },
    {
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.4.0",
      "dependencies": "",
      "description": "This operation returns all the measurement databases information stored in the Teamcenter database. The measurement database information is obtained from the <b>DPV_LINK_LOCATOR</b> database table. Measurement database information includes the database key, database name, database type, hostname and username.",
      "exceptionCondition": "",
      "id": "getMeasurementDatabaseDetails#",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "getMeasurementDatabaseDetails",
      "opTemplate": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::MeasurementDatabaseDetailsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementDatabaseDetails",
      "returnDescription": "The response consists a list of measurement database information.<br />The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">231111: The Primary key constraint is violated. Please check for duplicate rows.</li><li type=\"disc\">231112: The DPV database table does not exist in the database.</li></ul></ul>",
      "useCase": "External applications such as <b>Teamcenter lifecycle visualization and Dimensional Planning and Validation ETL</b> (Extraction, Transformtion and Loading) obtain the measurement information before querying the measurement data."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font> structures. This has a <font face=\"courier\" height=\"10\">clientId</font> key provided as an input. Also, it includes the engineering data for which a query is to be performed.  In addition,  it includes the shift and query criteria to filter the measurement data.  The clientId is a key for the remaining data in the <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font> and is used in the output parameter to represent the complete <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font>",
          "parameterName": "request"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "P8000.0.0",
      "dependencies": "",
      "description": "Given a search criteria with primarily the routine revision and filter data, such as last number of builds and date range, this operation gives a text file with engineering data and measurement data for the routine revision.",
      "exceptionCondition": "",
      "id": "getMeasurementTicket#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::SearchCriteriaInfo>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getMeasurementTicket",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::MeasurementsTicketResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementTicket#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::SearchCriteriaInfo>,&",
      "returnDescription": "The return is a list of maps. Each map has the <font face=\"courier\" height=\"10\">clientId</font> key and a measurement ticket for the file that contains the requested engineering and measurement data.",
      "useCase": "The DPV Reporting & Analysisi client application in standalone Teamcenter lifecycle visualization queries Teamcenter for engineering and measurement data of a routine revision"
    },
    {
      "ParameterInfo": [
        {
          "description": "This data is used as a search criteria to get all available specification sheet names.",
          "parameterName": "plantAndRtnInfo"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc10000.1.3",
      "dependencies": "",
      "description": "This operation is using to get all spec sheet names available in an excel dataset of type <b>DPVExcel</b> attached to the given Operation Revision.<br /><br />The spec sheet names are further used to get all the defined data specific to that sheet. These sheets consist of Lower Specification Limit (LSL), Upper Specification Limit (USL) and Target values of a particular feature.<br />",
      "exceptionCondition": "",
      "id": "getSpecSheetNames#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetSpecSheetNames>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getSpecSheetNames",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecInfoResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecSheetNames#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetSpecSheetNames>,&",
      "returnDescription": "This operation returns the result in SpecInfoResponse. The result includes spec sheet names and partial errors if any.<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in Excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li></ul></ul>",
      "useCase": "<b>Use Case 1: To know Available spec sheets for an excel sheet.</b><br />Excel sheet might have 10's of spec sheets and user wants to know what they are so that he/she can choose any spec sheet to get further data from it to analyze it.<br />"
    },
    {
      "ParameterInfo": [
        {
          "description": "This data is used as a search criteria to get the corresponding specification limits. It includes date based and last number of processed jobs criteria.",
          "parameterName": "specLimitInput"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc10000.1.3",
      "dependencies": "",
      "description": "This operation gets all specification limits for a given feature attributes codes based on given search criteria.",
      "exceptionCondition": "",
      "id": "getSpecificationLimits#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInput>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getSpecificationLimits",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInfoResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecificationLimits#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInput>,&",
      "returnDescription": "This operation returns the result in GetSpecLimitInfoResponse. The results include Specification Limits information and partial errors if any.<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given Operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given specification sheet name is not available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given feature attribute code is not available.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There is no data for a given search criteria.</li></ul></ul>",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of feature import data. Each element has the routine revision object for which the feature data is to be imported, the FMS file ticket for an XML file with feature data for the routine revision,  the name of the <b>DPVExcel</b> dataset that is to be attached to the routine revision, and a description of the <b>DPVExcel</b> dataset",
          "parameterName": "input"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.2",
      "dependencies": "",
      "description": "This operation uploads the feature data for a routine revision. A routine revision is an <b>ItemRevision</b> of the type <b>MEInspection_Revision</b>. This operation takes an FMS file ticket of an XML file containing engineering data of a routine, such as feature ID, feature name, feature attributes and specification limits, as an input. It creates a <b>DPVExcel</b> dataset under the routine revision with an <font face=\"courier\" height=\"10\">IMAN_specification</font> relation on successful execution of the operation. All the features and attributes in the XML file are included in the <b>DPVExcel</b>  dataset.",
      "exceptionCondition": "",
      "id": "importFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::RoutineAndFile>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "importFeatureData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::ImportFeatureDataResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::importFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::RoutineAndFile>,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Import an XML file in Manufacturing Process Planner (MPP) application in the Teamcenter rich client by selecting a routine revision of type <b>MEInspection_Revision</b> and usinging the Tools|\"Import Feature Data\" menu option."
    },
    {
      "ParameterInfo": [
        {
          "description": "The plant item ID to which the measurement event or <font face=\"courier\" height=\"10\">eventSysId</font> belongs. The plant ID information is used to identify the measurement database to which the trace code information is to be added",
          "parameterName": "plantId"
        },
        {
          "description": "The measurement event for which the <font face=\"courier\" height=\"10\">eventTraceval</font> is to be added",
          "parameterName": "eventSysId"
        },
        {
          "description": "A structure that includes trace codes and corresponding event trace code values for the measurement event or <font face=\"courier\" height=\"10\">eventSysId</font>",
          "parameterName": "eventTraceval"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "This operation inserts trace codes and the corresponding values into the measurement database, given the measurement event sys ID and plant item ID.",
      "exceptionCondition": "",
      "id": "insertEventTrace#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::TraceEvent>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "insertEventTrace",
      "opTemplate": "bool#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertEventTrace#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::TraceEvent>,&",
      "returnDescription": "This operation returns '<i>0</i>' for success and '<i>1</i>' for failure.",
      "useCase": "The external Extraction Transfer and Load (ETL) application adds the trace codes and corresponding values to the measurement database after adding measurement event and feature attribute values."
    },
    {
      "ParameterInfo": [
        {
          "description": "The <font face=\"courier\" height=\"10\">plant ID</font> to which the routine corresponding to measurement event or <font face=\"courier\" height=\"10\">eventSysID</font> belongs. This information is used by the operation to decide which measurement database should be used to enter the event data<br />",
          "parameterName": "plantId"
        },
        {
          "description": "ID for the measurement event",
          "parameterName": "eventSysId"
        },
        {
          "description": "The measured values for feature attribute for a measurement event or <font face=\"courier\" height=\"10\">eventSysId</font><br />",
          "parameterName": "featureActuals"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "Inserts the given set of feature actual values into the measurement database for a measurement event. This operation is used to add measurement data for a single measurement event.",
      "exceptionCondition": "",
      "id": "insertFeatureActuals#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::FtrActual>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "insertFeatureActuals",
      "opTemplate": "bool#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertFeatureActuals#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::FtrActual>,&",
      "returnDescription": "This operation returns '<i>0</i>' for success and '<i>1</i>' for failure.",
      "useCase": "External applications, such as Extraction Transfer and Load (ETL), use this operation to store feature actual data into the measurement database for a measurement event."
    },
    {
      "ParameterInfo": [
        {
          "description": "The <b>Dpv0RuleSetDataset</b> dataset attached to a<b> Dpv0rulesetRevision</b>",
          "parameterName": "xlsbDs"
        },
        {
          "description": "A routine revision of type <b>MEInspection_Revison</b>",
          "parameterName": "routineRev"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation creates a <b>Dpv0CustomRoutineRuleset</b>  relationship between a  <b>Dpv0ruleset</b>  and a routine revision (<b>MEInspection_Revison</b>). The operation determines the <b>Dpv0ruleset</b> from the <font face=\"courier\" height=\"10\">xlsbDs</font>, which is associated to any revision of the <b>Dpv0ruleset</b>.",
      "exceptionCondition": "",
      "id": "createRelBwDsRoutineRev#const,Teamcenter::Dataset,&$const,Teamcenter::ItemRevision,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "createRelBwDsRoutineRev",
      "opTemplate": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::createRelBwDsRoutineRev#const,Teamcenter::Dataset,&$const,Teamcenter::ItemRevision,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "In the Manufacturing Process Planner (MPP) application in the Teamcenter rich client, a user can associate a <b>Dpv0ruleset</b>  with  a routine revision via Tools|\"Import Feature Data\" after a routine revision is selected.<br /><br />In the MPP application, a user can associate a <b>Dpv0ruleset</b>  with  a routine revision by right-clicking the routine revision and selecting \"Apply Rule Set\" from the ensuing context menu.<br />"
    },
    {
      "ParameterInfo": [
        {
          "description": "A string that should be either '<i>SPECLIMIT</i>' (for inserting specification limits) or                                    '<i>REJECTLIMIT</i>' (for inserting reject limits)<br />",
          "parameterName": "targetTable"
        },
        {
          "description": "A list used to give the reject or specification  limit information",
          "parameterName": "limitInput"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "Inserts the given set of specification limit data for a feature attribute.",
      "exceptionCondition": "",
      "id": "insertLimitData#const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::Limit>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "insertLimitData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LimitInsertResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLimitData#const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::Limit>,&",
      "returnDescription": "The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "An external application, such as Extraction Transfer and Load (ETL), uses this operation to insert the given set of specification limit data for a feature attribute."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of log values for a measurement event",
          "parameterName": "logInput"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "insertMeasurementData",
      "description": "This operation inserts the log data into the measurement database. The log data has error and warning messages pertaining to a measurement event.",
      "exceptionCondition": "",
      "id": "insertLogData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogData>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "insertLogData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogInsertResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLogData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogData>,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "External application, such as Extraction Transfer and Load (ETL), insert measurement data into measurement database using other operations in the <font face=\"courier\" height=\"10\">MeasurementDataLoad</font> service. The log information is entered into the <font face=\"courier\" height=\"10\">DPV_LOG_INFO</font> table of measurement database for every event whether the data insertion was successful or not"
    },
    {
      "ParameterInfo": [
        {
          "description": "The measurement data including event parameters, measured feature attribute values and trace code information",
          "parameterName": "rawdata"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "This operation inserts the given measurement data including event parameters, measured feature attribute values and trace code information. It returns event system IDs on successful completion of the insertions. This inserts all the feature attribute measurement values pertaining to several measurement events in bulk.",
      "exceptionCondition": "",
      "id": "insertMeasurementData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtData>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "insertMeasurementData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtLoadResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertMeasurementData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtData>,&",
      "returnDescription": "A list Event system IDs corresponding to each <font face=\"courier\" height=\"10\">MeasmtData</font> provided in the input and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "This operation is used by external application such as Extraction Transaction and Load (ETL) to insert measurement data into measurement database."
    },
    {
      "ParameterInfo": [
        {
          "description": "The Plant Identifier",
          "parameterName": "plantId"
        },
        {
          "description": "The database key",
          "parameterName": "dbKey"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.5.0",
      "dependencies": "",
      "description": "This operation will populate the <b>DPV_DB_LOCATOR</b> table in the Teamcenter database. <b>DPV_DB_LOCATOR</b> table has plant ID(s) and database key(s). One plant ID can belong to only one database. Plant ID and measurement database are mapped on the basis of database key which acts as primary key in DPV_LINK_LOCATOR and foreign key in DPV_DB_LOCATOR.One Plant ID cannot be assigned to more than one measurement database as it may lead to unique constraint violation.",
      "exceptionCondition": "",
      "id": "populateDBLocatorTable#const,std::string,&$const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "populateDBLocatorTable",
      "opTemplate": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateDBLocatorTable#const,std::string,&$const,std::string,&",
      "returnDescription": "The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">230111:  The primary key constraint is violated</li></ul></ul>",
      "useCase": "External applications such as <b>Teamcenter lifecycle visualization </b>and<b> Dimensional Planning and Validation ETL (Extraction, Transformation and Loading)</b> obtain the measurement information before querying the measurement data."
    },
    {
      "ParameterInfo": [
        {
          "description": "The database key",
          "parameterName": "dbKey"
        },
        {
          "description": "The database name that will be entered into DPV_LINK_LOCATOR table",
          "parameterName": "dbName"
        },
        {
          "description": "The target database type to be entered in the DPV_LINK_LOCATOR table. Supported values are: 'ORACLE',' SQLSERVER' and 'SQLSERVERLOCAL'",
          "parameterName": "targetDbType"
        },
        {
          "description": "The server that hosts the measurement database. It will be entered in the <b>DPV_LINK_LOCATOR</b> table",
          "parameterName": "serverName"
        },
        {
          "description": "The username of the user in the measurement database",
          "parameterName": "userName"
        },
        {
          "description": "The password of the user in the measurement database",
          "parameterName": "password"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.5.0",
      "dependencies": "",
      "description": "This operation populates the <b>DPV_LINK_LOCATOR</b> table in the Teamcenter database. DPV_LINK_LOCATOR table has measurement databases information.",
      "exceptionCondition": "",
      "id": "populateLinkLocatorTable#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "populateLinkLocatorTable",
      "opTemplate": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkLocatorTable#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "returnDescription": "The following partial error may be returned: <br /><ul><ul><li type=\"disc\">230111: The primary key constraint is violated.</li></ul></ul>",
      "useCase": "External applications such as <b>Teamcenter lifecycle visualization </b>and<b> Dimensional Planning and Validation ETL (Extraction, Transformation and Loading)</b> obtain the measurement information before querying the measurement data."
    },
    {
      "ParameterInfo": [
        {
          "description": "The plant ID",
          "parameterName": "plantId"
        },
        {
          "description": "The database name that will be entered into DPV_DB_LOCATOR and DPV_LINK_LOCATOR tables<br />",
          "parameterName": "dbName"
        },
        {
          "description": "The user name of the user in the measurement database. The user name is prepended to the database name<br />",
          "parameterName": "userName"
        },
        {
          "description": "The link name of the measurement database. It will be entered in the DPV_LINK_LOCATOR table<br />",
          "parameterName": "linkName"
        },
        {
          "description": "The target database type to be entered in the DPV_LINK_LOCATOR table. It can be '<i>ORACLE</i>','<i> SQLSERVER</i>' OR '<i>SQLSERVERLOCAL</i>' <br />",
          "parameterName": "targetDbType"
        },
        {
          "description": "The server that hosts the measurement database. It will be entered in the DPV_LINK_LOCATOR table<br />",
          "parameterName": "serverName"
        },
        {
          "description": "Based on this input the data will either inserted or updated in the tables. If this string  is '<i>No_Info</i>' then the data will be inserted. If the string is '<i>Update_Yes</i>' then the data will be updated in the tables<br />",
          "parameterName": "updateTables"
        },
        {
          "description": "The old link name will be used to update the tables",
          "parameterName": "oldLinkName"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation will populate the DPV_DB_LOCATOR and DPV_LINK_LOCATOR  tables in the Teamcenter database. DPV_DB_LOCATOR table has plant ID(s) and database name(s). One plant ID can belong to only one database. DPV_LINK_LOCATOR  table has database names and corresponding database links.",
      "exceptionCondition": "",
      "id": "populateLinkTables#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "populateLinkTables",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::PopulateLinkTablesResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkTables#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Database links are used by external applications such as Extraction Transfer and Load (ETL) and standalone Teamcenter lifecycle visualization to insert data into, as well as, query from measurement databases."
    },
    {
      "ParameterInfo": [
        {
          "description": "The criteria to filter for the measurement event such as plant ID, active status, build labels, from and to dates.<br />",
          "parameterName": "searchCriterion"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.3",
      "dependencies": "",
      "description": "This operation gives the measurement event information stored in the DIS_MEASMT_EVENT table.",
      "exceptionCondition": "",
      "id": "queryActiveOrDeactiveData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::SearchCriteria>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryActiveOrDeactiveData",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::SearchCriteria>,&",
      "returnDescription": "The measurement event data and the associated feature attribute measurement values, as well as, the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "DPVMeasurements functionality in Teamcenter rich client can be used to display measurement event values."
    },
    {
      "ParameterInfo": [
        {
          "description": "The criteria to filter for the measurement event, such as plant ID, active status, build labels, and from and to dates.<br />",
          "parameterName": "searchCriterion"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc8000.2.0",
      "dependencies": "",
      "description": "This operation gives the measurement event information stored in the DIS_MEASMT_EVENT table and the corresponding feature attribute measurement information, including feature name, feature attribute code, and the actual measurement value from the DIS_MEASMT_FTR_ACTUAL table.",
      "exceptionCondition": "",
      "id": "queryActiveOrDeactiveData2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::SearchCriteria2>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryActiveOrDeactiveData2",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse2#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::SearchCriteria2>,&",
      "returnDescription": "The measurement event data and the associated feature attribute measurement values, as well as the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "The DPVMeasurements functionality in the Teamcenter rich client can be used to display measurement event and corresponding feature attribute measurement values."
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of routine revisions. A routine revision is an item revision of type <b>MEInspection_Revision</b>",
          "parameterName": "routineRevs"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation gives a list of <b>DPVClusterGroup _Revision</b>(s) associated with a routine revision. There is no direct relation between a routine revision and cluster group revisions. From the routine revision, a list of <b>DPVCluster_Revision</b>(s) related to it with <font face=\"courier\" height=\"10\">Manifestation</font> relation is obtained. Then for each <b>DPVCluster</b>, the <b>DPVClusterGroup _Revision</b>  to which it is related with the <b>DPVClusterGroupContent</b> relation is obtained",
      "exceptionCondition": "",
      "id": "queryClusterGroupInfo#const,std::vector<Teamcenter::ItemRevision>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryClusterGroupInfo",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::ClusterGroupInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryClusterGroupInfo#const,std::vector<Teamcenter::ItemRevision>,&",
      "returnDescription": "A list of cluster group revisions and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "In the Manufacturing Process Planner (MPP) application, a list of cluster groups associated with a routine revision is displayed via a context menu in the routine revision."
    },
    {
      "ParameterInfo": [
        {
          "description": "A DPVExcel dataset",
          "parameterName": "xlsxDs"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "The operation gets the <b>Dpv0RuleSetDataset</b> datasets associated with a <b>DPVExcel</b> dataset. The <b>Dpv0RuleSetDataset</b> is a dataset attached to a <b>Dpv0rulesetRevision</b>. The <b>DPVExcel</b>  dataset is attached to <b>MEInspection_Revision</b>. There is a relationship <b>Dpv0CustomRoutineRuleset</b>  between <b>MEInspection_Revision</b> and <b>Dpv0ruleset</b>  and based on these relations, the  <b>Dpv0RuleSetDataset</b> datasets associated with a <b>DPVExcel</b> dataset are obtained.",
      "exceptionCondition": "",
      "id": "queryCustomXlsbDs#const,Teamcenter::Dataset,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryCustomXlsbDs",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::CustomXlsbDsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryCustomXlsbDs#const,Teamcenter::Dataset,&",
      "returnDescription": "A list of  <b>Dpv0RuleSetDataset</b> datasets and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Display the current <b>Dpv0RuleSetDataset</b> datasets associated with a <b>MEInspection_Revision</b>. This information is useful prior to associating a new <b>Dpv0RuleSetDataset</b> dataset to a <b>MEInspection_Revision</b>."
    },
    {
      "ParameterInfo": [
        {
          "description": "List of plant IDs whose database information is required",
          "parameterName": "plantids"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "Given a list of plant IDs, for each plant ID, this operation returns the database name of the database that contains measurement data for the plant, the server in which the database resides, and the type of database. There are two possible types of databases: '<i>Oracle</i>' and '<i>MSSQL</i>'.",
      "exceptionCondition": "",
      "id": "getDatabaseDetailsForPlant#const,std::vector<std::string>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getDatabaseDetailsForPlant",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::DatabaseDetailsResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getDatabaseDetailsForPlant#const,std::vector<std::string>,&",
      "returnDescription": "<font face=\"courier\" height=\"10\">DatabaseDetailsResponse</font> has the details of the databases corresponding to the given plant IDs. The database details for each plant consists of the database name, hosting server, and database type ('<i>Oracle</i>' or '<i>MSSQL</i>'). The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Dimensional Planning and Validation (DPV) Analysis Services client application queries Teamcenter for the plant details."
    },
    {
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.6.0",
      "dependencies": "",
      "description": "This operation returns a set of Database keys present in the <b>DPV_LINK_LOCATOR</b> table.",
      "exceptionCondition": "",
      "id": "queryDatabaseKeysList#",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "queryDatabaseKeysList",
      "opTemplate": "Teamcenter::Soa::Internal::ProductionManagement::_2018_11::MeasurementDataQuery::DatabaseKeysListResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryDatabaseKeysList",
      "returnDescription": "A list of Database keys stored in the <b>DPV_LINK_LOCATOR</b> table. The following partial errors maybe returned:<br /><ul><ul><li type=\"disc\">231112: The DPV database table does not exist in the database.</li></ul></ul>",
      "useCase": "External applications such as Teamcenter lifecycle visualization and Dimensional Planning and Validation ETL (Extraction, Transformtion and Loading) obtain the measurement information before querying the measurement data."
    },
    {
      "ParameterInfo": [
        {
          "description": "Determines what operation will be performed.  Possible values for this are   <i>\"Program</i>\",<i>\"DeviceType</i>\",<i>\"Part</i>\",<i>\"Routine</i>\",<i>\"DeviceID</i>\", <i>\"Phase</i>\", and <i>\"EventType</i>\". The order of the possible values mentioned here and in the EngineeringData structure from the top upto  the <font face=\"courier\" height=\"10\">routineid</font> is important.The <font face=\"courier\" height=\"10\">additionalinfo</font> parameter is not used. For any structure element that is queried for, all the information above it should be provided. However, no input information for structure elements below the routineid parameter is required. For example, if the \"<i>DeviceType</i>\" information is required, the <font face=\"courier\" height=\"10\">plantid</font> and <font face=\"courier\" height=\"10\">vehicleprogram</font> information should be filled in the <font face=\"courier\" height=\"10\">EngineeringData</font> structure. Similarly for routineid, the plantid, vehicleprogram, devicetype, and partnames should be sent in the input. Also, as no input information for structure elements below the routineid parameter is required, for example, if the \"<i>EventType</i>\" is required, there is no need to specify routinerev, device or phasename",
          "parameterName": "operationType"
        },
        {
          "description": "Has the different input parameters. The output parameter will be filled in based on the <font face=\"courier\" height=\"10\">operationType</font>. What data needs to be sent in as part of the input parameter is described under <font face=\"courier\" height=\"10\">operationType</font>",
          "parameterName": "request"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "P8000.0.0",
      "dependencies": "",
      "description": "This operation gets data pertaining to a <b>MEInspection</b> (routine) depending on what is specified in the <font face=\"courier\" height=\"10\">operationType</font> parameter. For example, if the desired data is program then the operation type should be set to '<i>Program</i>'. The values are obtained by querying the measurement databases for the routines.",
      "exceptionCondition": "",
      "id": "queryEngineeringParameters#const,std::string$const,Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringData,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryEngineeringParameters",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryEngineeringParameters#const,std::string$const,Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringData,&",
      "returnDescription": "The display name and ID of the object requested in the <font face=\"courier\" height=\"10\">operationType</font> and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "This operation is used by the DPV Reporting & Analysis application in standalone Teamcenter lifecycle visualization to query routine data."
    },
    {
      "ParameterInfo": [
        {
          "description": "The database type of the DPV measurement database. Its possible values are \"<i>ORACLE</i>\", \"<i>SQLSERVER</i>\", and \"<i>SQLSEERVERLOCAL</i>\"",
          "parameterName": "dbType"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation will list all the database links to the Dimension Planning and Validation (DPV) measurement databases. It is obtained from the USER_DB_LINKS and DPV_LINK_LOCATOR tables.",
      "exceptionCondition": "",
      "id": "queryLinkNamesInfo#const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryLinkNamesInfo",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::LinkNamesInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryLinkNamesInfo#const,std::string,&",
      "returnDescription": "A list of link information and a corresponding list of plant and link name combination in addition to the <font face=\"courier\" height=\"10\">ServiceData</font>. Each link information or <font face=\"courier\" height=\"10\">linkNameSet</font>  includes the server hosting the measurement database, the database link name, and a user name for the measurement database. Each plant and link name combination or <font face=\"courier\" height=\"10\">plantLinkNameSet</font> is a combination of plant ID and link name with a comma delimiter. The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "The \"<i>Send Pland ID</i>...\" context menu under a plant in the Manufacturing Process Planner (MPP) application displays all the available links in a dialog after it is selected."
    },
    {
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc8000.2.0",
      "dependencies": "",
      "description": "This operation lists all the plants stored in the Teamcenter database based on the <b>dpv_raw_data_location</b> Teamcenter preference value. Plant information includes the plant item ID and name. If the <b>dpv_raw_data_location</b> preference value is \"0\" the plant information will be obtained from the Teamcenter database, otherwise; it is obtained from the \"DPV_DB_LOCATOR\" database table.",
      "exceptionCondition": "",
      "id": "queryPlantsInfo#",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryPlantsInfo",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::PlantsInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryPlantsInfo",
      "returnDescription": "This returns a list of plants and <font face=\"courier\" height=\"10\">ServiceData</font> object. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "External applications, such as Teamcenter lifecycle visualization, and internal applications, such as <font face=\"courier\" height=\"10\">DPVMeasurements</font>, obtain the plant information before querying for measurement data."
    },
    {
      "ParameterInfo": [
        {
          "description": "Plant item ID (of type <b>MEPrPlantProcess</b>) for which the routine information is requested<br />",
          "parameterName": "plantId"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc8000.2.0",
      "dependencies": "",
      "description": "This operation will list information for routine revisions of type <b>MEInspection_Revision</b> given a plant item ID. The routine information includes routine item ID, routine name, and routine revision. If the Teamcenter <b>dpv_raw_data_location</b> preference value is \"0\" the information is obtained from the DPV_MEASMT_EVENT (non-pom table) in the Teamcenter database; otherwise, it is obtained from the DPV_MEASMT_EVENT table in an external measurement database.",
      "exceptionCondition": "",
      "id": "queryRoutinesInfo#const,std::string,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryRoutinesInfo",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::RoutinesInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRoutinesInfo#const,std::string,&",
      "returnDescription": "A list of routine information and <font face=\"courier\" height=\"10\">ServiceData</font>. Each routine information consists of routine item ID, name, and revision. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "The standalone Teamcenter lifecycle visualization application queries for routine information from Teamcenter."
    },
    {
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "List all the datasets of  type <b>Dpv0RuleSetDataset</b> associated with the latest released item revisions of all <b>Dpv0ruleset</b>(s).",
      "exceptionCondition": "",
      "id": "queryRuleSetDataSet#",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "queryRuleSetDataSet",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::DpvRuleSetDsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRuleSetDataSet",
      "returnDescription": "This operation returns a list of ruleset datasets and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "List all the <b>Dpv0RuleSetDataset</b> datasets associated with the latest revisions of <b>Dpv0ruleset</b> items so they can be associated with a routine revision of type <b>MEInspection_Revision</b>.  The <b>Dpv0RuleSetDataset</b> contains validation rules that are used to verify the <b>DPVExcel</b> dataset associated with routine revisions."
    },
    {
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc9000.0.0",
      "dependencies": "",
      "description": "This operation gives all the SQL Server Reporting Service (SSRS) server URLs stored in Teamcenter. These values are stored as values of the <b>DPV_ccuaservice_url</b> preference.",
      "exceptionCondition": "",
      "id": "querySsrsUrlInfo#",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "querySsrsUrlInfo",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::SsrsUrlInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::querySsrsUrlInfo",
      "returnDescription": "A list of SSRS server URLs and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "In the Manufacturing Process Planner (MPP) application, all the SSRS server URLs are listed so a user can choose one of them to upload a .rdl (Report Definition Language) to it."
    },
    {
      "ParameterInfo": [
        {
          "description": "A structure with <font face=\"courier\" height=\"10\">plantId</font>  for the measruement event, the <font face=\"courier\" height=\"10\">eventSysId</font>  of the event, the <font face=\"courier\" height=\"10\">columnName</font> to be modified, and the value to be set for the <font face=\"courier\" height=\"10\">columnNam</font>e<br />",
          "parameterName": "eventInfo"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "This operation updates the Active column value of the <font face=\"courier\" height=\"10\">DIS_MEASMT_EVENT</font> table  to '<i>1</i>' (active) or '<i>0</i>' (inactive) for  the given event information. The event information contains the <font face=\"courier\" height=\"10\">plantId</font> and <font face=\"courier\" height=\"10\">eventSysId</font>.  The <font face=\"courier\" height=\"10\">plantId</font> is used to identify the external measurement database that contains the events for the plant.",
      "exceptionCondition": "",
      "id": "updateEventColumn#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::NewEventInfo>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "updateEventColumn",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::UpdateEventResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::updateEventColumn#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::NewEventInfo>,&",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "This operation is used by external application, such as Extraction Transfer and Load (ETL) to update a column value in <font face=\"courier\" height=\"10\">DIS_MEASMT_EVENT</font> table with the given input event information."
    },
    {
      "ParameterInfo": [
        {
          "description": "List of plant ids.",
          "parameterName": "plantids"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc11000.4.0",
      "dependencies": "",
      "description": "This operation returns a map of plant ids, i.e. Item IDs of MePrPlantProcess objects and their respective database key information stored in the Teamcenter database. The information is obtained from <b>DPV_DB_LOCATOR</b> database table. The user obtains database key information which is required to perform database queries like inserting,updating the values in the measurement database table.",
      "exceptionCondition": "",
      "id": "getDatabaseKeysForPlants#const,std::vector<std::string>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "false",
      "name": "getDatabaseKeysForPlants",
      "opTemplate": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::GetDatabaseKeysForPlantsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getDatabaseKeysForPlants#const,std::vector<std::string>,&",
      "returnDescription": "The response consists of map of plant ids and respective database keys.<br />The following partial errors maybe be returned:<br /><br /><ul><ul><li type=\"disc\">231001: The target database for the given plant is not defined.</li><li type=\"disc\">231119: The provided plant ID does not exist in the database.</li></ul></ul>",
      "useCase": "External applications such as Teamcenter lifecycle visualization and Dimensional Planning and Validation ETL (Extraction, Transformation and Loading) obtain the measurement information before querying the measurement data."
    },
    {
      "DeprecationInfo": [
        {
          "deprecatedDescription": "getEngineeringDataFromRoutine is deprecated in TC2007 SR1 MP2 and would be supported for two more releases only. This operation is replaced with getEngineeringDataFromRoutine2",
          "deprecatedRelease": "tc2007.1.2"
        }
      ],
      "ParameterInfo": [
        {
          "description": "The Item Id and Revision of the Routine",
          "parameterName": "routineIdVer"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "Get the Engineering Data for a given Routine",
      "exceptionCondition": "There is no exception.",
      "id": "getEngineeringDataFromRoutine#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineIdVer>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getEngineeringDataFromRoutine",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineQryResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineIdVer>,&",
      "returnDescription": "Has the engineering data (Features, Feature Attributes and Forms attached to Feature Attributes) of the given routine",
      "useCase": ""
    },
    {
      "DeprecationInfo": [
        {
          "deprecatedDescription": "getEngineeringDataFromRoutine2 is deprecated in TC2007 SR1 MP3 and would be supported for two more releases only. This operation is replaced with getEngineeringDataFromRoutine3",
          "deprecatedRelease": "tc2007.1.3"
        }
      ],
      "ParameterInfo": [
        {
          "description": "The Item Id and Revision of the Routine",
          "parameterName": "routineIdVer"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.2",
      "dependencies": "",
      "description": "Get the Engineering Data for a given Routine",
      "exceptionCondition": "",
      "id": "getEngineeringDataFromRoutine2#std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineIdVer2>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getEngineeringDataFromRoutine2",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineQryResponse2#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine2#std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineIdVer2>,&",
      "returnDescription": "Has the engineering data (Features, Feature Attributes and Forms attached to Feature Attributes) of the given routine",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of <b>Item</b> IDs and revisions of routines",
          "parameterName": "routineIdVer"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.3",
      "dependencies": "",
      "description": "This operation returns the engineering data of routine revisions. A routine revision is an <b>ItemRevision</b> of  type <b>MEInspection_Revision</b>. The engineering data includes information, such as features, feature attributes, and specification limits associated with feature attributes.",
      "exceptionCondition": "",
      "id": "getEngineeringDataFromRoutine3#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineIdVer3>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getEngineeringDataFromRoutine3",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineQryResponse3#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine3#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineIdVer3>,&",
      "returnDescription": "A list of routine data for each routine revision and a <font face=\"courier\" height=\"10\">ServiceData</font> element. The routine data includes information such as features, feature attributes, and specification limits associated with feature attributes. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "External client applications, such as standalone Teamcenter  lifecycle visualization and Extracttion Transactaction and Load(ETL) query for engineering data from Teamcenter."
    },
    {
      "DeprecationInfo": [
        {
          "deprecatedDescription": "getFeatureAttributeDataOfCluster is deprecated in TC2007 SR1 MP2 and would be supported for two more releases only. This operation is replaced with getFeatureAttributeDataOfCluster2",
          "deprecatedRelease": "tc2007.1.2"
        }
      ],
      "ParameterInfo": [
        {
          "description": "The Item Id, Revision of the Routine and the Cluster ref",
          "parameterName": "clusterIdentifier"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "Get the contents of a given Cluster",
      "exceptionCondition": "There is no expection.",
      "id": "getFeatureAttributeDataOfCluster#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterIdentifier>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getFeatureAttributeDataOfCluster",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterQryResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterIdentifier>,&",
      "returnDescription": "Has the Feature Attributes clustered and Forms attached to Feature Attributes along with the parent feature occurrence",
      "useCase": ""
    },
    {
      "ParameterInfo": [
        {
          "description": "A list of cluster identifiers. Each cluster identifier consists of the <b>ItemRevision</b> of the cluster, as well as the <b>MEInspection_Revisio</b>n to which the cluster of interest is attached <br />",
          "parameterName": "clusterIdentifier"
        }
      ],
      "canOverride": "false",
      "component": "Dpv0DatabaseConfigurationforDpv",
      "createRelease": "tc2007.1.2",
      "dependencies": "",
      "description": "For a <b>DPVCluster_Revision</b>, this operation provides all the feature attributes that belong to it. The feature attribute information includes the feature ID, feature name, and attribute code for each feature attribute in the cluster.",
      "exceptionCondition": "",
      "id": "getFeatureAttributeDataOfCluster2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterIdentifier2>,&",
      "interface": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery",
      "isPostActionAllowed": "false",
      "isPreActionAllowed": "false",
      "isPreConditionAllowed": "false",
      "isPublished": "true",
      "name": "getFeatureAttributeDataOfCluster2",
      "opTemplate": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterQryResponse2#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterIdentifier2>,&",
      "returnDescription": "A list of cluster information data and the <font face=\"courier\" height=\"10\">ServiceData</font>. For each cluster identifier, a list of the feature attributes that belong to it are provided. The feature attribute information includes the feature ID, feature name, and attribute code for each feature attribute that belong to the <b>DPVCluster_Revision</b>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "useCase": "Client applications, such as standalone Teamcenter lifecycle visualization, query Teamcenter for cluster information."
    }
  ],
  "OperationTemplate": [
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::Dataset",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The <b>Dpv0RuleSetDataset</b> dataset attached to a<b> Dpv0rulesetRevision</b>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "xlsbDs"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::ItemRevision",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A routine revision of type <b>MEInspection_Revison</b>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "routineRev"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Server::ServiceData",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation creates a <b>Dpv0CustomRoutineRuleset</b>  relationship between a  <b>Dpv0ruleset</b>  and a routine revision (<b>MEInspection_Revison</b>). The operation determines the <b>Dpv0ruleset</b> from the <font face=\"courier\" height=\"10\">xlsbDs</font>, which is associated to any revision of the <b>Dpv0ruleset</b>.",
      "id": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::createRelBwDsRoutineRev#const,Teamcenter::Dataset,&$const,Teamcenter::ItemRevision,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::createRelBwDsRoutineRev",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::RoutineAndFile",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of feature import data. Each element has the routine revision object for which the feature data is to be imported, the FMS file ticket for an XML file with feature data for the routine revision,  the name of the <b>DPVExcel</b> dataset that is to be attached to the routine revision, and a description of the <b>DPVExcel</b> dataset",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "input"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::ImportFeatureDataResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.2",
      "description": "This operation uploads the feature data for a routine revision. A routine revision is an <b>ItemRevision</b> of the type <b>MEInspection_Revision</b>. This operation takes an FMS file ticket of an XML file containing engineering data of a routine, such as feature ID, feature name, feature attributes and specification limits, as an input. It creates a <b>DPVExcel</b> dataset under the routine revision with an <font face=\"courier\" height=\"10\">IMAN_specification</font> relation on successful execution of the operation. All the features and attributes in the XML file are included in the <b>DPVExcel</b>  dataset.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::ImportFeatureDataResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::importFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad::RoutineAndFile>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad::importFeatureData",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::PortRoutineSetInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of routine set information structures. Each structure contains a clientId and a pair of routine revisions for which the mapped feature information is requested. The clientId is a unique integer and a key that represents the pair of routine revisions in the structure.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "request"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::MappedPortFeatureResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.4.0",
      "description": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Routine revision is the <b>ItemRevision</b> with operation of type &quot;Manufacturing Engineering Inspection&quot;. For each pair of routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine revision. This map information is for features and not feature attributes. If one feature is mapped to another feature, then all the common attribute codes between the two features are mapped (there is no way to map select attribute codes under a feature).",
      "id": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::MappedPortFeatureResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedPortFeatureData#const,std::vector<Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::PortRoutineSetInfo>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedPortFeatureData",
      "returnConst": "false",
      "returnDescription": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Given two routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine. The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. The following partial errors maybe returned:<br /><ul><ul><li type=\"disc\">231117: No Excel dataset could be found under the given operation/routine.</li><li type=\"disc\">231128: The provided Routine Revision is invalid.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetSpecSheetNames",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "This data is used as a search criteria to get all available specification sheet names.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantAndRtnInfo"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc10000.1.3",
      "description": "This operation is using to get all spec sheet names available in an excel dataset of type <b>DPVExcel</b> attached to the given Operation Revision.<br /><br />The spec sheet names are further used to get all the defined data specific to that sheet. These sheets consist of Lower Specification Limit (LSL), Upper Specification Limit (USL) and Target values of a particular feature.<br />",
      "id": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecInfoResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecSheetNames#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetSpecSheetNames>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecSheetNames",
      "returnConst": "false",
      "returnDescription": "This operation returns the result in SpecInfoResponse. The result includes spec sheet names and partial errors if any.<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in Excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInput",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "This data is used as a search criteria to get the corresponding specification limits. It includes date based and last number of processed jobs criteria.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "specLimitInput"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc10000.1.3",
      "description": "This operation gets all specification limits for a given feature attributes codes based on given search criteria.",
      "id": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInfoResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecificationLimits#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetSpecLimitInput>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getSpecificationLimits",
      "returnConst": "false",
      "returnDescription": "This operation returns the result in GetSpecLimitInfoResponse. The results include Specification Limits information and partial errors if any.<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given Operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given specification sheet name is not available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given feature attribute code is not available.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There is no data for a given search criteria.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataEdit::TargetEvents",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of target events that  includes a plant ID, measurement event ID that belongs  to a plant ID, and an active status. Different <font face=\"courier\" height=\"10\">TargetEvents</font> can have different active statuses.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "targetRows"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Server::ServiceData",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.3",
      "description": "This operation updates the status of one or more measurement events specified in the list of <font face=\"courier\" height=\"10\">TargetEvents</font> to active or inactive.  <font face=\"courier\" height=\"10\">TargetEvents</font>  includes a plant ID, measurement event that belongs to the plant ID, and its associated active status",
      "id": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataEdit::activateOrDeactivateData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataEdit::TargetEvents>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataEdit::activateOrDeactivateData",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font> holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The link name for the external database, <font face=\"courier\" height=\"10\">dbName</font><br /><br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "linkName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "User name for the external database, <font face=\"courier\" height=\"10\">dbName</font>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "userName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Password for the <font face=\"courier\" height=\"10\">userName</font> for the external database, <font face=\"courier\" height=\"10\">dbName</font>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "passWord"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The external database name to which a link is created",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbName"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::CreateLinkNameInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation will create database links to external databases, in the Teamcenter database. The link names will be stored in the USER_DB_LINKS system table of the Teamcenter database. The external databases store measurement data for the Dimensional Planning and Validation (DPV) application. The link names are used to store the measurement data and query measurement data from measurement database by external applications, such as Extraction Transaction and Load (ETL) and Teamcenter lifecycle visualization.<br />",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::CreateLinkNameInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::createLinkNames#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::createLinkNames",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The plant item ID to which the measurement event or <font face=\"courier\" height=\"10\">eventSysId</font> belongs. The plant ID information is used to identify the measurement database to which the trace code information is to be added",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The measurement event for which the <font face=\"courier\" height=\"10\">eventTraceval</font> is to be added",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "eventSysId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::TraceEvent",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A structure that includes trace codes and corresponding event trace code values for the measurement event or <font face=\"courier\" height=\"10\">eventSysId</font>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "eventTraceval"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "bool",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "This operation inserts trace codes and the corresponding values into the measurement database, given the measurement event sys ID and plant item ID.",
      "id": "bool#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertEventTrace#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::TraceEvent>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertEventTrace",
      "returnConst": "false",
      "returnDescription": "This operation returns '<i>0</i>' for success and '<i>1</i>' for failure.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The <font face=\"courier\" height=\"10\">plant ID</font> to which the routine corresponding to measurement event or <font face=\"courier\" height=\"10\">eventSysID</font> belongs. This information is used by the operation to decide which measurement database should be used to enter the event data<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "ID for the measurement event",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "eventSysId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::FtrActual",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The measured values for feature attribute for a measurement event or <font face=\"courier\" height=\"10\">eventSysId</font><br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "featureActuals"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "bool",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "Inserts the given set of feature actual values into the measurement database for a measurement event. This operation is used to add measurement data for a single measurement event.",
      "id": "bool#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertFeatureActuals#const,std::string$const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::FtrActual>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertFeatureActuals",
      "returnConst": "false",
      "returnDescription": "This operation returns '<i>0</i>' for success and '<i>1</i>' for failure.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A string that should be either '<i>SPECLIMIT</i>' (for inserting specification limits) or                                    '<i>REJECTLIMIT</i>' (for inserting reject limits)<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "targetTable"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::Limit",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list used to give the reject or specification  limit information",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "limitInput"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LimitInsertResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "Inserts the given set of specification limit data for a feature attribute.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LimitInsertResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLimitData#const,std::string$const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::Limit>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLimitData",
      "returnConst": "false",
      "returnDescription": "The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogData",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of log values for a measurement event",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "logInput"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogInsertResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "This operation inserts the log data into the measurement database. The log data has error and warning messages pertaining to a measurement event.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogInsertResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLogData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::LogData>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertLogData",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtData",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The measurement data including event parameters, measured feature attribute values and trace code information",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "rawdata"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtLoadResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "This operation inserts the given measurement data including event parameters, measured feature attribute values and trace code information. It returns event system IDs on successful completion of the insertions. This inserts all the feature attribute measurement values pertaining to several measurement events in bulk.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtLoadResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertMeasurementData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::MeasmtData>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::insertMeasurementData",
      "returnConst": "false",
      "returnDescription": "A list Event system IDs corresponding to each <font face=\"courier\" height=\"10\">MeasmtData</font> provided in the input and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "List of plant IDs whose database information is required",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantids"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::DatabaseDetailsResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "Given a list of plant IDs, for each plant ID, this operation returns the database name of the database that contains measurement data for the plant, the server in which the database resides, and the type of database. There are two possible types of databases: '<i>Oracle</i>' and '<i>MSSQL</i>'.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::DatabaseDetailsResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getDatabaseDetailsForPlant#const,std::vector<std::string>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getDatabaseDetailsForPlant",
      "returnConst": "false",
      "returnDescription": "<font face=\"courier\" height=\"10\">DatabaseDetailsResponse</font> has the details of the databases corresponding to the given plant IDs. The database details for each plant consists of the database name, hosting server, and database type ('<i>Oracle</i>' or '<i>MSSQL</i>'). The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The Plant Identifier",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The database key",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbKey"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Server::ServiceData",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.5.0",
      "description": "This operation will populate the <b>DPV_DB_LOCATOR</b> table in the Teamcenter database. <b>DPV_DB_LOCATOR</b> table has plant ID(s) and database key(s). One plant ID can belong to only one database. Plant ID and measurement database are mapped on the basis of database key which acts as primary key in DPV_LINK_LOCATOR and foreign key in DPV_DB_LOCATOR.One Plant ID cannot be assigned to more than one measurement database as it may lead to unique constraint violation.",
      "id": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateDBLocatorTable#const,std::string,&$const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateDBLocatorTable",
      "returnConst": "false",
      "returnDescription": "The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">230111:  The primary key constraint is violated</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The database key",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbKey"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The database name that will be entered into DPV_LINK_LOCATOR table",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The target database type to be entered in the DPV_LINK_LOCATOR table. Supported values are: 'ORACLE',' SQLSERVER' and 'SQLSERVERLOCAL'",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "targetDbType"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The server that hosts the measurement database. It will be entered in the <b>DPV_LINK_LOCATOR</b> table",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "serverName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The username of the user in the measurement database",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "userName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The password of the user in the measurement database",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "password"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Server::ServiceData",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.5.0",
      "description": "This operation populates the <b>DPV_LINK_LOCATOR</b> table in the Teamcenter database. DPV_LINK_LOCATOR table has measurement databases information.",
      "id": "Teamcenter::Soa::Server::ServiceData#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkLocatorTable#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkLocatorTable",
      "returnConst": "false",
      "returnDescription": "The following partial error may be returned: <br /><ul><ul><li type=\"disc\">230111: The primary key constraint is violated.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The plant ID",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantId"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The database name that will be entered into DPV_DB_LOCATOR and DPV_LINK_LOCATOR tables<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The user name of the user in the measurement database. The user name is prepended to the database name<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "userName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The link name of the measurement database. It will be entered in the DPV_LINK_LOCATOR table<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "linkName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The target database type to be entered in the DPV_LINK_LOCATOR table. It can be '<i>ORACLE</i>','<i> SQLSERVER</i>' OR '<i>SQLSERVERLOCAL</i>' <br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "targetDbType"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The server that hosts the measurement database. It will be entered in the DPV_LINK_LOCATOR table<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "serverName"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Based on this input the data will either inserted or updated in the tables. If this string  is '<i>No_Info</i>' then the data will be inserted. If the string is '<i>Update_Yes</i>' then the data will be updated in the tables<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "updateTables"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The old link name will be used to update the tables",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "oldLinkName"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::PopulateLinkTablesResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation will populate the DPV_DB_LOCATOR and DPV_LINK_LOCATOR  tables in the Teamcenter database. DPV_DB_LOCATOR table has plant ID(s) and database name(s). One plant ID can belong to only one database. DPV_LINK_LOCATOR  table has database names and corresponding database links.",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad::PopulateLinkTablesResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkTables#const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&$const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::populateLinkTables",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::NewEventInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A structure with <font face=\"courier\" height=\"10\">plantId</font>  for the measruement event, the <font face=\"courier\" height=\"10\">eventSysId</font>  of the event, the <font face=\"courier\" height=\"10\">columnName</font> to be modified, and the value to be set for the <font face=\"courier\" height=\"10\">columnNam</font>e<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "eventInfo"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::UpdateEventResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "This operation updates the Active column value of the <font face=\"courier\" height=\"10\">DIS_MEASMT_EVENT</font> table  to '<i>1</i>' (active) or '<i>0</i>' (inactive) for  the given event information. The event information contains the <font face=\"courier\" height=\"10\">plantId</font> and <font face=\"courier\" height=\"10\">eventSysId</font>.  The <font face=\"courier\" height=\"10\">plantId</font> is used to identify the external measurement database that contains the events for the plant.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::UpdateEventResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::updateEventColumn#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::NewEventInfo>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad::updateEventColumn",
      "returnConst": "false",
      "returnDescription": "The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "List of plant ids.",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantids"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::GetDatabaseKeysForPlantsResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.4.0",
      "description": "This operation returns a map of plant ids, i.e. Item IDs of MePrPlantProcess objects and their respective database key information stored in the Teamcenter database. The information is obtained from <b>DPV_DB_LOCATOR</b> database table. The user obtains database key information which is required to perform database queries like inserting,updating the values in the measurement database table.",
      "id": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::GetDatabaseKeysForPlantsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getDatabaseKeysForPlants#const,std::vector<std::string>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getDatabaseKeysForPlants",
      "returnConst": "false",
      "returnDescription": "The response consists of map of plant ids and respective database keys.<br />The following partial errors maybe be returned:<br /><br /><ul><ul><li type=\"disc\">231001: The target database for the given plant is not defined.</li><li type=\"disc\">231119: The provided plant ID does not exist in the database.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::MeasurementDatabaseDetailsResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.4.0",
      "description": "This operation returns all the measurement databases information stored in the Teamcenter database. The measurement database information is obtained from the <b>DPV_LINK_LOCATOR</b> database table. Measurement database information includes the database key, database name, database type, hostname and username.",
      "id": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::MeasurementDatabaseDetailsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementDatabaseDetails",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementDatabaseDetails",
      "returnConst": "false",
      "returnDescription": "The response consists a list of measurement database information.<br />The following partial errors may be returned:<br /><ul><ul><li type=\"disc\">231111: The Primary key constraint is violated. Please check for duplicate rows.</li><li type=\"disc\">231112: The DPV database table does not exist in the database.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::SearchCriteriaInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font> structures. This has a <font face=\"courier\" height=\"10\">clientId</font> key provided as an input. Also, it includes the engineering data for which a query is to be performed.  In addition,  it includes the shift and query criteria to filter the measurement data.  The clientId is a key for the remaining data in the <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font> and is used in the output parameter to represent the complete <font face=\"courier\" height=\"10\">SearchCriteriaInfo</font>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "request"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::MeasurementsTicketResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "P8000.0.0",
      "description": "Given a search criteria with primarily the routine revision and filter data, such as last number of builds and date range, this operation gives a text file with engineering data and measurement data for the routine revision.",
      "id": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::MeasurementsTicketResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementTicket#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::SearchCriteriaInfo>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::getMeasurementTicket",
      "returnConst": "false",
      "returnDescription": "The return is a list of maps. Each map has the <font face=\"courier\" height=\"10\">clientId</font> key and a measurement ticket for the file that contains the requested engineering and measurement data.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::SearchCriteria",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The criteria to filter for the measurement event such as plant ID, active status, build labels, from and to dates.<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "searchCriterion"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.3",
      "description": "This operation gives the measurement event information stored in the DIS_MEASMT_EVENT table.",
      "id": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::SearchCriteria>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData",
      "returnConst": "false",
      "returnDescription": "The measurement event data and the associated feature attribute measurement values, as well as, the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::SearchCriteria2",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The criteria to filter for the measurement event, such as plant ID, active status, build labels, and from and to dates.<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "searchCriterion"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse2",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc8000.2.0",
      "description": "This operation gives the measurement event information stored in the DIS_MEASMT_EVENT table and the corresponding feature attribute measurement information, including feature name, feature attribute code, and the actual measurement value from the DIS_MEASMT_FTR_ACTUAL table.",
      "id": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::QueryActiveOrDeactiveDataResponse2#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::SearchCriteria2>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryActiveOrDeactiveData2",
      "returnConst": "false",
      "returnDescription": "The measurement event data and the associated feature attribute measurement values, as well as the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::ItemRevision",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of routine revisions. A routine revision is an item revision of type <b>MEInspection_Revision</b>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "routineRevs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::ClusterGroupInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation gives a list of <b>DPVClusterGroup _Revision</b>(s) associated with a routine revision. There is no direct relation between a routine revision and cluster group revisions. From the routine revision, a list of <b>DPVCluster_Revision</b>(s) related to it with <font face=\"courier\" height=\"10\">Manifestation</font> relation is obtained. Then for each <b>DPVCluster</b>, the <b>DPVClusterGroup _Revision</b>  to which it is related with the <b>DPVClusterGroupContent</b> relation is obtained",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::ClusterGroupInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryClusterGroupInfo#const,std::vector<Teamcenter::ItemRevision>,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryClusterGroupInfo",
      "returnConst": "false",
      "returnDescription": "A list of cluster group revisions and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineIdVer",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The Item Id and Revision of the Routine",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "routineIdVer"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineQryResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "Get the Engineering Data for a given Routine",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineQryResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineIdVer>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine",
      "returnConst": "false",
      "returnDescription": "Has the engineering data (Features, Feature Attributes and Forms attached to Feature Attributes) of the given routine",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::Dataset",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A DPVExcel dataset",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "xlsxDs"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::CustomXlsbDsResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "The operation gets the <b>Dpv0RuleSetDataset</b> datasets associated with a <b>DPVExcel</b> dataset. The <b>Dpv0RuleSetDataset</b> is a dataset attached to a <b>Dpv0rulesetRevision</b>. The <b>DPVExcel</b>  dataset is attached to <b>MEInspection_Revision</b>. There is a relationship <b>Dpv0CustomRoutineRuleset</b>  between <b>MEInspection_Revision</b> and <b>Dpv0ruleset</b>  and based on these relations, the  <b>Dpv0RuleSetDataset</b> datasets associated with a <b>DPVExcel</b> dataset are obtained.",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::CustomXlsbDsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryCustomXlsbDs#const,Teamcenter::Dataset,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryCustomXlsbDs",
      "returnConst": "false",
      "returnDescription": "A list of  <b>Dpv0RuleSetDataset</b> datasets and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2018_11::MeasurementDataQuery::DatabaseKeysListResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc11000.6.0",
      "description": "This operation returns a set of Database keys present in the <b>DPV_LINK_LOCATOR</b> table.",
      "id": "Teamcenter::Soa::Internal::ProductionManagement::_2018_11::MeasurementDataQuery::DatabaseKeysListResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryDatabaseKeysList",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryDatabaseKeysList",
      "returnConst": "false",
      "returnDescription": "A list of Database keys stored in the <b>DPV_LINK_LOCATOR</b> table. The following partial errors maybe returned:<br /><ul><ul><li type=\"disc\">231112: The DPV database table does not exist in the database.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": ""
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Determines what operation will be performed.  Possible values for this are   <i>\"Program</i>\",<i>\"DeviceType</i>\",<i>\"Part</i>\",<i>\"Routine</i>\",<i>\"DeviceID</i>\", <i>\"Phase</i>\", and <i>\"EventType</i>\". The order of the possible values mentioned here and in the EngineeringData structure from the top upto  the <font face=\"courier\" height=\"10\">routineid</font> is important.The <font face=\"courier\" height=\"10\">additionalinfo</font> parameter is not used. For any structure element that is queried for, all the information above it should be provided. However, no input information for structure elements below the routineid parameter is required. For example, if the \"<i>DeviceType</i>\" information is required, the <font face=\"courier\" height=\"10\">plantid</font> and <font face=\"courier\" height=\"10\">vehicleprogram</font> information should be filled in the <font face=\"courier\" height=\"10\">EngineeringData</font> structure. Similarly for routineid, the plantid, vehicleprogram, devicetype, and partnames should be sent in the input. Also, as no input information for structure elements below the routineid parameter is required, for example, if the \"<i>EventType</i>\" is required, there is no need to specify routinerev, device or phasename",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "operationType"
        },
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringData",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Has the different input parameters. The output parameter will be filled in based on the <font face=\"courier\" height=\"10\">operationType</font>. What data needs to be sent in as part of the input parameter is described under <font face=\"courier\" height=\"10\">operationType</font>",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "request"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "P8000.0.0",
      "description": "This operation gets data pertaining to a <b>MEInspection</b> (routine) depending on what is specified in the <font face=\"courier\" height=\"10\">operationType</font> parameter. For example, if the desired data is program then the operation type should be set to '<i>Program</i>'. The values are obtained by querying the measurement databases for the routines.",
      "id": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryEngineeringParameters#const,std::string$const,Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringData,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryEngineeringParameters",
      "returnConst": "false",
      "returnDescription": "The display name and ID of the object requested in the <font face=\"courier\" height=\"10\">operationType</font> and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "The database type of the DPV measurement database. Its possible values are \"<i>ORACLE</i>\", \"<i>SQLSERVER</i>\", and \"<i>SQLSEERVERLOCAL</i>\"",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "dbType"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::LinkNamesInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation will list all the database links to the Dimension Planning and Validation (DPV) measurement databases. It is obtained from the USER_DB_LINKS and DPV_LINK_LOCATOR tables.",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::LinkNamesInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryLinkNamesInfo#const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryLinkNamesInfo",
      "returnConst": "false",
      "returnDescription": "A list of link information and a corresponding list of plant and link name combination in addition to the <font face=\"courier\" height=\"10\">ServiceData</font>. Each link information or <font face=\"courier\" height=\"10\">linkNameSet</font>  includes the server hosting the measurement database, the database link name, and a user name for the measurement database. Each plant and link name combination or <font face=\"courier\" height=\"10\">plantLinkNameSet</font> is a combination of plant ID and link name with a comma delimiter. The ServiceData  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::PlantsInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc8000.2.0",
      "description": "This operation lists all the plants stored in the Teamcenter database based on the <b>dpv_raw_data_location</b> Teamcenter preference value. Plant information includes the plant item ID and name. If the <b>dpv_raw_data_location</b> preference value is \"0\" the plant information will be obtained from the Teamcenter database, otherwise; it is obtained from the \"DPV_DB_LOCATOR\" database table.",
      "id": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::PlantsInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryPlantsInfo",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryPlantsInfo",
      "returnConst": "false",
      "returnDescription": "This returns a list of plants and <font face=\"courier\" height=\"10\">ServiceData</font> object. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "dataType": "std::string",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "Plant item ID (of type <b>MEPrPlantProcess</b>) for which the routine information is requested<br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "plantId"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::RoutinesInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc8000.2.0",
      "description": "This operation will list information for routine revisions of type <b>MEInspection_Revision</b> given a plant item ID. The routine information includes routine item ID, routine name, and routine revision. If the Teamcenter <b>dpv_raw_data_location</b> preference value is \"0\" the information is obtained from the DPV_MEASMT_EVENT (non-pom table) in the Teamcenter database; otherwise, it is obtained from the DPV_MEASMT_EVENT table in an external measurement database.",
      "id": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::RoutinesInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRoutinesInfo#const,std::string,&",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRoutinesInfo",
      "returnConst": "false",
      "returnDescription": "A list of routine information and <font face=\"courier\" height=\"10\">ServiceData</font>. Each routine information consists of routine item ID, name, and revision. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::DpvRuleSetDsResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "List all the datasets of  type <b>Dpv0RuleSetDataset</b> associated with the latest released item revisions of all <b>Dpv0ruleset</b>(s).",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::DpvRuleSetDsResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRuleSetDataSet",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::queryRuleSetDataSet",
      "returnConst": "false",
      "returnDescription": "This operation returns a list of ruleset datasets and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::SsrsUrlInfoResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc9000.0.0",
      "description": "This operation gives all the SQL Server Reporting Service (SSRS) server URLs stored in Teamcenter. These values are stored as values of the <b>DPV_ccuaservice_url</b> preference.",
      "id": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::SsrsUrlInfoResponse#Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::querySsrsUrlInfo",
      "name": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery::querySsrsUrlInfo",
      "returnConst": "false",
      "returnDescription": "A list of SSRS server URLs and the <font face=\"courier\" height=\"10\">ServiceData</font>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineIdVer2",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The Item Id and Revision of the Routine",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "routineIdVer"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineQryResponse2",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.2",
      "description": "Get the Engineering Data for a given Routine",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineQryResponse2#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine2#std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineIdVer2>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine2",
      "returnConst": "false",
      "returnDescription": "Has the engineering data (Features, Feature Attributes and Forms attached to Feature Attributes) of the given routine",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineIdVer3",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of <b>Item</b> IDs and revisions of routines",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "routineIdVer"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineQryResponse3",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.3",
      "description": "This operation returns the engineering data of routine revisions. A routine revision is an <b>ItemRevision</b> of  type <b>MEInspection_Revision</b>. The engineering data includes information, such as features, feature attributes, and specification limits associated with feature attributes.",
      "id": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineQryResponse3#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine3#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineIdVer3>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getEngineeringDataFromRoutine3",
      "returnConst": "false",
      "returnDescription": "A list of routine data for each routine revision and a <font face=\"courier\" height=\"10\">ServiceData</font> element. The routine data includes information such as features, feature attributes, and specification limits associated with feature attributes. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "MetaException": [
        {
          "name": "Teamcenter::Soa::Server::ServiceException"
        }
      ],
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterIdentifier",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "false",
          "defaultValue": "",
          "description": "The Item Id, Revision of the Routine and the Cluster ref",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "clusterIdentifier"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterQryResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1",
      "description": "Get the contents of a given Cluster",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterQryResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster#std::vector<Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterIdentifier>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster",
      "returnConst": "false",
      "returnDescription": "Has the Feature Attributes clustered and Forms attached to Feature Attributes along with the parent feature occurrence",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterIdentifier2",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of cluster identifiers. Each cluster identifier consists of the <b>ItemRevision</b> of the cluster, as well as the <b>MEInspection_Revisio</b>n to which the cluster of interest is attached <br />",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "clusterIdentifier"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterQryResponse2",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc2007.1.2",
      "description": "For a <b>DPVCluster_Revision</b>, this operation provides all the feature attributes that belong to it. The feature attribute information includes the feature ID, feature name, and attribute code for each feature attribute in the cluster.",
      "id": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterQryResponse2#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster2#const,std::vector<Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterIdentifier2>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributeDataOfCluster2",
      "returnConst": "false",
      "returnDescription": "A list of cluster information data and the <font face=\"courier\" height=\"10\">ServiceData</font>. For each cluster identifier, a list of the feature attributes that belong to it are provided. The feature attribute information includes the feature ID, feature name, and attribute code for each feature attribute that belong to the <b>DPVCluster_Revision</b>. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetAttrCode",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "This data is used as a search criteria to get the corresponding feature attributes from a given specification sheet. ",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "inputToGetFtrAtt"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetFtrAttResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "tc10000.1.3",
      "description": "This operation gets all feature attribute codes (X deviation (X_DEV),Y deviation (Y_DEV) Z deviation( Z_DEV)) from a given specification sheet.<br /><br />The feature attribute codes are further used to query corresponding measurement data and engineering data based on search criteria<br />",
      "id": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::GetFtrAttResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributesForSpec#const,std::vector<Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::InputToGetAttrCode>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getFeatureAttributesForSpec",
      "returnConst": "false",
      "returnDescription": "The results include the feature attribute .<br /><br />The following partial errors may be returned:<br /><br /><ul><ul><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231117&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Excel dataset is not found under given Operation.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231118&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No spec sheet available in excel sheet.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231119&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given plant id does not exist in the database.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231120&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine id/operation is not under given plant id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231121&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given routine revision does not exist for given routine id.</li><li type=\"disc\">&nbsp;&nbsp;&nbsp;&nbsp;231122&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Given specification sheet name is not available in excel sheet.</li></ul></ul>",
      "returnFreeMemory": "false",
      "static": "false"
    },
    {
      "OperationParameter": [
        {
          "OperationParameterDataTypeRef": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::RoutineSetInfo",
                  "qualifier": ""
                }
              ],
              "dataType": "std::vector",
              "qualifier": "&"
            }
          ],
          "const": "true",
          "defaultValue": "",
          "description": "A list of routine set information structures. Each structure contains a <font face=\"courier\" height=\"10\">clientId</font> and a pair of routine revisions for which the mapped feature information is requested. The <font face=\"courier\" height=\"10\">clientId</font> is a unique integer and a key that represents the pair of routine revisions in the structure. It is the responsibility of the user to ensure that the <font face=\"courier\" height=\"10\">clientId</font> is unique",
          "freeOutputMemory": "false",
          "inputOutput": "Input",
          "name": "request"
        }
      ],
      "OperationReturnDataTypeRef": [
        {
          "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::MappedFeatureResponse",
          "qualifier": ""
        }
      ],
      "accessControl": "false",
      "const": "false",
      "createRelease": "P8000.0.0",
      "description": "This operation returns a set of mapped features for each pair of routine revisions in the request list. For each pair of routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine revision. This map information is for features and not feature attributes. If one feature is mapped to another feature, then all the common attribute codes between the two features are mapped that is, there is no way to map select attribute codes under a feature).",
      "id": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::MappedFeatureResponse#Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedFeatureData#const,std::vector<Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::RoutineSetInfo>,&",
      "name": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery::getMappedFeatureData",
      "returnConst": "false",
      "returnDescription": "This operation returns a set of mapped features for each pair of routine revisions in the request list. Given two routine revisions, the mapped feature information maps a subset of features in the second routine to features in the first routine. The <font face=\"courier\" height=\"10\">ServiceData</font>  holds model objects and partial errors. No model objects are returned in this operation. Also, no specific partial error is returned by this operation and only errors from underlying subsystems are returned.",
      "returnFreeMemory": "false",
      "static": "false"
    }
  ],
  "ServiceInterface": [
    {
      "createRelease": "tc2007.1.2",
      "dependencies": "",
      "description": "The EngineeringDataLoad service exposes operations that import feature data for a routine revision and create relationship between a routine revision and a <b>Dpv0ruleset</b> item.<br /><br />This service provides the following use cases:<br /><br /><ul><ul><li type=\"disc\">Import an xml file with Feature data in the Manufacturing Process Planner (MPP) application in the Teamcemcenter rich client by selecting a Routine Revision of the type <b>MEInspection_Revision</b> and then using the Tools|'Import Feature Data' menu option.</li><li type=\"disc\">In the MPP application, a user can associate a <b>Dpv0ruleset</b> item to  a routine revision after selecting a routine revision and choosing the Tools|'Import Feature Data' menu option.</li><li type=\"disc\">In the MPP application, a user can associate a <b>Dpv0ruleset</b> item to  a routine revision by right-clicking the routine revision and then selecting \"Apply Rule Set\" from the ensuing context menu.</li></ul></ul>",
      "libraryName": "TcSoaProductionManagement",
      "name": "EngineeringDataLoad",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibraryRef": "<ul><ul><li type=\"disc\">Java<b> </b></li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementTypes.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementStrong.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementLoose.jar<br /><br /><ul><ul><li type=\"disc\">C++</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementtypes.dll<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementstrongmngd.dll "
    },
    {
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "The EngineeringDataQuery service exposes operations that are used to query engineering data of plants, routines, and clusters.<br /><br />This service provides the following use cases:<br /><br /><ul><ul><li type=\"disc\">Get database details of a plant</li><li type=\"disc\">Get feature attribute, specification limits, and data load information for a routine revision</li><li type=\"disc\">Get the mapped feature data given two routine revisions</li><li type=\"disc\">Get feature attributes associated with a <b>DPVCluster_Revision</b></li></ul></ul>",
      "libraryName": "TcSoaProductionManagement",
      "name": "EngineeringDataQuery",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibraryRef": "<ul><ul><li type=\"disc\">Java </li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementTypes.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementStrong.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementLoose.jar<br /><br /><ul><ul><li type=\"disc\">C++</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libtcsoaproductionmanagementtypes.dll<br />&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libtcsoaproductionmanagementstrongmngd.dll "
    },
    {
      "createRelease": "tc2007.1.3",
      "dependencies": "",
      "description": "The MeasurementDataEdit service exposes operations that are used to activate or deactivate a measurement event.<br /><br />This service provides the following use cases:<br /><br /><ul><ul><li type=\"disc\">Change the active status of measurement events using the Dimensional Planning and Validation (DPV) Measurement user interface in the rich client interface.</li></ul></ul>",
      "libraryName": "TcSoaProductionManagement",
      "name": "MeasurementDataEdit",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibraryRef": "<ul><ul><li type=\"disc\">Java</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementTypes.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementStrong.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementLoose.jar<br /><br /><ul><ul><li type=\"disc\">C++</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementtypes.dll<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementstrongmngd.dll "
    },
    {
      "createRelease": "tc2007.1",
      "dependencies": "",
      "description": "The MeasurementDataLoad service exposes operations that are used to load the measurement data into database tables, as well as, populate database link information.<br /><br />This service provides the following use cases:<br /><br /><ul><ul><li type=\"disc\">External client applications, such as Extraction Transfer and Load (ETL), load the measurement data including feature actuals, event trace, specification limits data, and event log data.</li><li type=\"disc\">The Manufacturing Process Planner application in the rich client interface is used to store the database links into measurement databases of the Dimensional Planning and Validation (DPV) application.</li></ul></ul>",
      "libraryName": "TcSoaProductionManagement",
      "name": "MeasurementDataLoad",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibraryRef": "<ul><ul><li type=\"disc\">Java: </li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementTypes.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementStrong.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementLoose.jar<br /><br /><ul><ul><li type=\"disc\">C++</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementtypes.dll<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementstrongmngd.dll "
    },
    {
      "createRelease": "tc2007.1.3",
      "dependencies": "",
      "description": "The MeasurementDataQuery service exposes operations that are used to query data of plant Items of type <b>MEPrPlantProcess</b>, routine items of type <b>MEInspection</b>.<br /><br />This service provides the following use cases:<br /><br /><ul><ul><li type=\"disc\">Get all plant Item IDs, names, and database links associated with a plant.</li><li type=\"disc\">Get Routine Item Revisions associated with a plant item.</li><li type=\"disc\">Get the <b>DPVClusterGroup</b> information.</li><li type=\"disc\">Get the plant, program, part, and so on information from Teamcenter so that a user can </li></ul></ul><br />query for the required Routine Revision in standalone Teamcenter lifecycle visualization.<br /><ul><ul><li type=\"disc\">Get measurement data associated with a <b>MEInspection_Revision</b>.</li><li type=\"disc\">Get the <b>Dpv0RuleSetDataset</b> associated with a <b>MEInspection_Revision</b>.Get all the <b>Dpv0RuleSetDataset</b>(s) associated with the latest released <b>Dpv0rulesetRevison</b>(s)</li><li type=\"disc\">Get the URL information of SQL Server Reporting Services server of the Dimensional Planning and Validation (DPV) application.</li></ul></ul>",
      "libraryName": "TcSoaProductionManagement",
      "name": "MeasurementDataQuery",
      "namespace": "Teamcenter::Soa::ProductionManagement",
      "serviceLibraryRef": "<ul><ul><li type=\"disc\">Java: </li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementTypes.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementStrong.jar<br />&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TcSoaProductionManagementLoose.jar<br /><br /><ul><ul><li type=\"disc\">C++</li></ul></ul><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementtypes.dll<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;libtcsoaproductionmanagementstrongmngd.dll "
    }
  ],
  "Struct": [
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Attribute Codes are the deviations to measures; eg: X_DEV(X Deviation),Y_DEV(Y Deviation), Z_DEV( Z Deviation) , Z_DEV(Z Deviation).",
          "name": "ftrAttrCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Lower Specification Limit value for corresponding Feature Attribute Code.",
          "name": "lowerSpecLimit"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Upper Specification Limit value for corresponding Feature Attribute Code.",
          "name": "upperSpecLimit"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Target value for corresponding Feature Attribute Code.",
          "name": "target"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about specification limits for a feature attribute code.",
      "isPublished": "true",
      "name": "AttrInfoForSpec",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "UID of the feature to which the attribute or <font face=\"courier\" height=\"10\">ftrattCode</font> belongs",
          "name": "ftrUid"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature attribute code",
          "name": "ftrattCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Lower specification limit for the attribute or <font face=\"courier\" height=\"10\">ftrattCode</font>",
          "name": "lsl"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Upper specification limit for the attribute or <font face=\"courier\" height=\"10\">ftrattCode</font>",
          "name": "usl"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The AttrLimits structure is used to give the reject or spec limits for a attribute",
      "isPublished": "true",
      "name": "AttrLimits",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Dataset"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of Dpv0RuleSetDataset datasets",
          "name": "customXlsbDs"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure consists of xlsb dataset  which is with the DPVExcel dataset  and a partial errors object giving error information, if any.",
      "isPublished": "true",
      "name": "CustomXlsbDsResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID whose database information is required",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The name of the database that contains the measurement data for the <font face=\"courier\" height=\"10\">plantId</font>",
          "name": "databaseName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The type of database, which is '<i>Oracle</i>' or '<i>MSSQL</i>'",
          "name": "databaseType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The name of the hosting server of the database",
          "name": "hostName"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The DatabaseDetails structure captures the database details for a plant",
      "isPublished": "true",
      "name": "DatabaseDetails",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::DatabaseDetails"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Structures containing details of database such as database name, database type ('<i>Oracle</i>' or '<i>MSSQL</i>'), as well as  a plant ID key for which the database information is sought",
          "name": "databaseDetails"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The service data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The DatabaseDetailsResponse has the details of the dbs corresponding to the given input plant ids",
      "isPublished": "true",
      "name": "DatabaseDetailsResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of strings containing database keys present in the DPV_LINK_LOCATOR table.",
          "name": "databaseKeysSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Standard service data containing partial errors.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc11000.6.0",
      "description": "The response consists of list of database keys stored in the <b>DPV_LINK_LOCATOR</b> database table.",
      "isPublished": "false",
      "name": "DatabaseKeysListResponse",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2018_11::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The time at the beginning of the date time range in the format \"MM-DD-YYYY HH24:MI:SS\"<br />",
          "name": "fromDateTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The time at the end of the date time range in the format \"MM-DD-YYYY HH24:MI:SS\"<br />",
          "name": "toDateTime"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The DateTimeRange structure represents the time at the beginning and end of the range.",
      "isPublished": "true",
      "name": "DateTimeRange",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Dataset"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of objects that includes all the <b>Dpv0RuleSetDataset</b> datasets associated with the latest revision of all the <b>Dpv0ruleset(s)</b> for which the user logged in has read privileges",
          "name": "dpvRuleSetDsSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure consists of Vector of Ruleset Datasets  and a partial errors object giving error information, if any.",
      "isPublished": "true",
      "name": "DpvRuleSetDsResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::AdditionalinfoMap"
            }
          ],
          "description": "Reserved for future use",
          "name": "additionalinfo"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant item ID pertaing to a <font face=\"courier\" height=\"10\">routineid</font>",
          "name": "plantid"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Vehicle program name associated with the <font face=\"courier\" height=\"10\">routineid</font>",
          "name": "vehicleprogram"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The device type used to measure a routine (<font face=\"courier\" height=\"10\">routineid</font>), such as \"<i>CMM</i>\", \"<i>Vision</i>\", and \"<i>Hand Held</i>\"",
          "name": "devicetype"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Part name of the measurement routine (<font face=\"courier\" height=\"10\">routineid</font>)",
          "name": "partnames"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of type <b>MEInspection</b>",
          "name": "routineid"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision of the <font face=\"courier\" height=\"10\">routineid</font>",
          "name": "routinerev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device ID used to measure the <font face=\"courier\" height=\"10\">routinerev</font>",
          "name": "device"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The production phase of the <font face=\"courier\" height=\"10\">routinerev</font>",
          "name": "phasename"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The measurement event type, such as \"<i>N</i>\" (Normal) and \"<i>D</i>\" (Duplicate)",
          "name": "eventtypes"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The EngineeringData structure represents all of the information about Engineering data Parameters.",
      "isPublished": "true",
      "name": "EngineeringData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::Response"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "The list of responses",
          "name": "response"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Service Data object with any partial errors",
          "name": "partialErrors"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The EngineeringResponse structure represents the vector of responses depending on the operationType.",
      "isPublished": "true",
      "name": "EngineeringResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID associated with the measurement event",
          "name": "eventSysId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Build label for the measurement event",
          "name": "buildLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the measured part",
          "name": "partName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device used to measure the event of the routine",
          "name": "device"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Shift with possible values of \"<i>0</i>\",\"<i>1</i>\",\"<i>2</i>\",\"<i>3</i>\", or \"<i>4</i>\"",
          "name": "shiftNumber"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The UTC time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "utcTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Is the production day which may not be the same as calendar day for e.g. all events measured after 10 pm the previous day may have the <font face=\"courier\" height=\"10\">shiftDay</font> of today",
          "name": "shiftDay"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A value which specifies if the routine is measured with high or low frequency",
          "name": "hiLow"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Specifies the active status of the event (\"<i>1</i>\" for active and \"<i>0</i>\" for inactive)",
          "name": "active"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The type of event such as \"<i>N</i>\"(Normal), \"<i>H</i>\"(Hold) and \"<i>D</i>\"(Duplicate)",
          "name": "eventType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The date and time at which the event (<font face=\"courier\" height=\"10\">eventSysId</font>) was measured",
          "name": "eventDatetime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The vehicle program associated with the routine",
          "name": "vehicleProgram"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Phase for e.g. production and pre-production, during which the event is measured",
          "name": "phaseName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID in which the routine is measured",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the routine which is measured",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision associated with the <font face=\"courier\" height=\"10\">routineId</font>",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device type of the measurement event such as \"CMM\", \"Vision\" an \"Hand Held\"",
          "name": "deviceType"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The Event structure is used to show the output result.",
      "isPublished": "true",
      "name": "Event",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID associated with the measurement event",
          "name": "eventSysId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Build label for the measurement event",
          "name": "buildLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the measured part",
          "name": "partName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device used to measure the event of the routine",
          "name": "device"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Shift with possible values of \"<i>0</i>\",\"<i>1</i>\",\"<i>2</i>\",\"<i>3</i>\", or \"<i>4</i>\"",
          "name": "shiftNumber"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The UTC time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "utcTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The production day that may not be the same as the calendar day (for example,  all events measured after 10 pm the previous day may have the <font face=\"courier\" height=\"10\">shiftDay</font> of today)",
          "name": "shiftDay"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A value that specifies if the routine is measured with high or low frequency",
          "name": "hiLow"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "The active status of the event (\"<i>1</i>\" for active and \"<i>0</i>\" for inactive)",
          "name": "active"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::FtrInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of feature information that includes all the features associated with the measurement event",
          "name": "ftrsData"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::TraceInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Certain tracking codes and values associated with the measurement event. For example, the code could be \"<i>Operator</i>\" and the value could be \"<i>Mike</i>\"<br />",
          "name": "traceData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The type of event, such as \"<i>N</i>\"(Normal), \"<i>H</i>\"(Hold), and \"<i>D</i>\"(Duplicate)",
          "name": "eventType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The date and time at which the event (<font face=\"courier\" height=\"10\">eventSysId</font>) was measured",
          "name": "eventDatetime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The vehicle program associated with the routine",
          "name": "vehicleProgram"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Phase  during which the event is measured (for example, production and pre-production)",
          "name": "phaseName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID in which the routine is measured",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the routine being measured",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision associated with the <font face=\"courier\" height=\"10\">routineId</font>",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device type of the measurement event, such as \"<i>CMM</i>\", \"<i>Vision</i>\" and \"<i>Hand Held</i>\"",
          "name": "deviceType"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure consists of Measurement Event information and a vector of corresponding feature information.",
      "isPublished": "true",
      "name": "Event2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::AppearanceGroup"
            }
          ],
          "description": "The Routine object to which the features belong",
          "name": "cluster"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::FeatureAttributeInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of FeatureAttributeInfo structures",
          "name": "featureAttributeInfo"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The ClusterData structure is used return the engineering data belonging to the cluster. Each cluster has set of feature attributes\nThese set of feature attributes are captured in a vector.",
      "isPublished": "true",
      "name": "ClusterData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller. This ID is used to identify return data elements and partial errors associated with the input structure<br />",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::Event"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Data associated with measurement event such as device type, part name, etc",
          "name": "eventsSet"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The EventResults structure is used to show the output",
      "isPublished": "true",
      "name": "EventResults",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller. This ID is used to identify return data elements and partial errors associated with the input structure<br />",
          "name": "clientId2"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::Event2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Data associated with measurement event such as device type, part name, and so on",
          "name": "eventsSet2"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "It will show the actual ouput of query; consists of Measurement Event information along with corresponding Feature information.",
      "isPublished": "true",
      "name": "EventResults2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "Tag of the feature attribute",
          "name": "featureAttribute"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Form"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Vector of POMRef of the form attached to the feature attribute",
          "name": "featureAttributeForm"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The FeatureAttributeData structure is used return the feature attribute information belonging to the routine",
      "isPublished": "true",
      "name": "FeatureAttributeData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute Code",
          "name": "attributeCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute Code Abbreviation",
          "name": "abbreviation"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Attribute Code Direction",
          "name": "codeDirection"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Attribute Significance",
          "name": "significance"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute measurement approach",
          "name": "measurementApproach"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute Need",
          "name": "need"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Attribute Nominal",
          "name": "nominal"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::SpecSetCode2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "vector of spec sets defined on the Attribute",
          "name": "specSetCodes"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The FeatureAttributeData2 structure is used return the feature attribute information belonging to the routine",
      "isPublished": "true",
      "name": "FeatureAttributeData2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID, code or name of a feature attribute",
          "name": "attributeCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Abbreviation of a <font face=\"courier\" height=\"10\">attribute</font>Code",
          "name": "abbreviation"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Direction of an <font face=\"courier\" height=\"10\">attribute</font>Code",
          "name": "codeDirection"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Significance of the feature attribute. '<i>0</i>' - Insignificant; '<i>1</i>' - significant",
          "name": "significance"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Specifies how the Coordinate Measuring Machine (CMM) probe measures a point for -  \"Surface\": takes into account the actual vector of the measured geometry; \"Vector\": Takes the nominal             vector<br />",
          "name": "measurementApproach"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute need with values such as '<i>Optional</i>', '<i>Planned</i>' or '<i>Required</i>'.This information is used by the Extract Transact and Loader (ETL) client application to determine if a feature attribute is required or optional for a routine revision",
          "name": "need"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "The ideal nominal value of each attribute. Typically, '<i>0</i>' for deviations",
          "name": "nominal"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Derived feature expression and it is not used for a non-derived feature",
          "name": "formula"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::SpecSetCode3"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of specification sets containing the tolerance limit information for the attribute",
          "name": "specSetCodes"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The FeatureAttributeData3 structure is used return the feature attribute information belonging to the routine",
      "isPublished": "true",
      "name": "FeatureAttributeData3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "Ref of the parent feature. Note that even though the variable name says occurrence, Tc2007.1 doesnt support occurrences. It is objects uid.",
          "name": "parentFeatureOccurrence"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "Tag of the feature attribute",
          "name": "featureAttribute"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Form"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Vector of POMRef of the form attached to the feature attribute",
          "name": "featureAttInfoForm"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The FeatureAttributeInfo structure is used return the feature attribute information belonging to the cluster",
      "isPublished": "true",
      "name": "FeatureAttributeInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the feature",
          "name": "parentFeatureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the feature",
          "name": "parentFeatureName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "An attribute code/name associated with the parentFeatureId",
          "name": "attributeCode"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The FeatureAttributeInfo2 structure is used return the feature attribute information belonging to the cluster",
      "isPublished": "true",
      "name": "FeatureAttributeInfo2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "The feature.  Note that even though the variable name says occurrence, Tc2007.1 doesnt support occurrences. It is objects uid.",
          "name": "featureOccurrence"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::FeatureAttributeData"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of FeatureAttributeData structures",
          "name": "featureAttributeData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The FeatureData structure is used return the feature information belonging to the routine. Each feature has set of feature attributes\nThese set of feature attributes are captured in a vector.",
      "isPublished": "true",
      "name": "FeatureData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Id of the Feature",
          "name": "featureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Name",
          "name": "featureLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Alternate name of the Feature",
          "name": "altLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Description",
          "name": "description"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Need",
          "name": "need"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "Active Status of the feature",
          "name": "activeStatus"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Loading Split Id of the feature",
          "name": "loadingSplitId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::FeatureNominals2"
            }
          ],
          "description": "Nominal values given in a structure",
          "name": "nominalValues"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::FeatureAttributeData2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Vector of attributes defined for this feature",
          "name": "attributeData"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The FeatureData2 structure is used return the feature information belonging to the routine. Each feature has set of feature attributes\nThese set of feature attributes are captured in a vector.",
      "isPublished": "true",
      "name": "FeatureData2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the feature",
          "name": "featureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature name",
          "name": "featureLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Specifies the type of feature such as '<i>Point</i>', '<i>Hole</i>', '<i>Pin</i>', '<i>Slot</i>', '<i>Tab</i>'<br />",
          "name": "featureType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "An alternative name for the feature for systems that may have length requirements so you can enter another name by which to reference the feature<br />",
          "name": "altLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature description",
          "name": "description"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Need with values such as '<i>Required</i>', '<i>Planned</i>' and '<i>Optional</i>'. This information is used by the Extraction Transaction and Load (ETL) client to determine if a feature is required or optional for a routine revision.",
          "name": "need"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": " Status that shows whether or not Dimensional Planning and Validation (DPV) device  client and DPV Reporting & Analysis should process data for this feature (<i>'Y</i>' - process the data; '<i>N</i>' - do not process the data)<br />",
          "name": "activeStatus"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Loading Split ID of the feature. If a routine is measured with two or more devices, the Loading Split ID identifies the portion of a routine (or several features) measured by a device. If the routine is measured by only one device, then the Loading Split ID is blank<br />",
          "name": "loadingSplitId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::FeatureNominals3"
            }
          ],
          "description": "Nominal values such as <font face=\"courier\" height=\"10\">x,y,z,i,j,k. x, y</font> and <font face=\"courier\" height=\"10\">z</font> are the anchor point coordinates used in interactive reporting <font face=\"courier\" height=\"10\">i,j</font> and <font face=\"courier\" height=\"10\">k</font> are the vector normal direction<br />",
          "name": "nominalValues"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::FeatureAttributeData3"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of attributes defined for the feature",
          "name": "attributeData"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The FeatureData3 structure is used return the feature information belonging to the routine. Each feature has set of feature attributes\nThese set of feature attributes are captured in a vector.",
      "isPublished": "true",
      "name": "FeatureData3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "A DPVCluster_Revision",
          "name": "cluster"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::FeatureAttributeInfo2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of  feature attribute information associated with the cluster",
          "name": "featureAttributeInfo"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The ClusterData2 structure is used return the engineering data belonging to the cluster. Each cluster has set of feature attributes\nThese set of feature attributes are captured in a vector.",
      "isPublished": "true",
      "name": "ClusterData2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "X Nominal",
          "name": "x"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Y Nominal",
          "name": "y"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Z Nominal",
          "name": "z"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "I Nominal",
          "name": "i"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "J Nominal",
          "name": "j"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "K Nominal",
          "name": "k"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "I2 Nominal",
          "name": "i2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "J2 Nominal",
          "name": "j2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "K2 Nominal",
          "name": "k2"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The FeatureNominals2 structure is used return the nominal values of the feature",
      "isPublished": "true",
      "name": "FeatureNominals2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "X location of the feature",
          "name": "x"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Y location of the feature",
          "name": "y"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Z location of the feature",
          "name": "z"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component i of the first feature vector",
          "name": "i"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component j of the first feature vector",
          "name": "j"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component k of the first feature vector",
          "name": "k"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component i of the second feature vector",
          "name": "i2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component j of the second feature vector",
          "name": "j2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "component k of the second feature vector",
          "name": "k2"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The FeatureNominals3 structure is used return the nominal values of the feature",
      "isPublished": "true",
      "name": "FeatureNominals3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the feature",
          "name": "ftrUid"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the feature",
          "name": "ftrName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature attribute code",
          "name": "ftrattCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "The measured value for the feature attribute for a given measurement event",
          "name": "actualValue"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The FtrActual structure is used to give details of measurement made for an attribute",
      "isPublished": "true",
      "name": "FtrActual",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Id of the feature defined in the engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the feature defined in the engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureName"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of feature attribute codes.",
          "name": "featureAttribCode"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about Features as part of search criteria.",
      "isPublished": "true",
      "name": "FtrAttrbs",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "It is a string with feature information including feature name (feature_name), feature attribute code (feature_att_code ) and actual measurement value (actual_value)  with \".\"(dot) and \",\"(comma) <br />delimiters in the format \"<i><feature_name>.<feature_att_code>,<actual_value></i>\"<br />",
          "name": "ftrNameFtrAttCodeAval"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "It is a string with feature information including feature name (feature_name), feature attribute code (feature_att_code ) and actual measurement value (actual_value)  with \".\"(dot) and \",\"(comma) <br />delimiters in the format \"<i>feature_name</i>.<i>feature_att_code</i>,<i>actual_value</i>\"<br />",
      "isPublished": "true",
      "name": "FtrInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Id of the feature defined in the Engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the feature defined in the Engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureName"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::AttrInfoForSpec"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of specification limits and feature attribute code info.",
          "name": "specInfo"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indications information about features and specification limits.",
      "isPublished": "true",
      "name": "FtrInfoForSpec",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::PlantDatabaseMap"
            }
          ],
          "description": "A map(string, string) of input parameter plant ids, which is the key, and their respective database keys in the <b>DPV_DB_LOCATOR</b> database table.",
          "name": "plantDatabaseInfo"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Standard service data containing partial errors.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The response structure represents the mapping of plant id to database key.",
      "isPublished": "false",
      "name": "GetDatabaseKeysForPlantsResponse",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::FtrInfoForSpec"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of Feature Id,Feature Name and corresponding Specification limits information.",
          "name": "featureInfo"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "This returns partial errors if any.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about output of features and partial errors if any.",
      "isPublished": "true",
      "name": "GetFtrAttResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::MainSpecLimitOutPut"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "Specification Limits of a particular feature attribute code.",
          "name": "specLimits"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "This returns partial errors if any.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about output for given search criterial and lists partial errors if any.",
      "isPublished": "true",
      "name": "GetSpecLimitInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID of type <b>MEPrPlantProcess</b>.",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine ID of type <b>MEInspection</b> or its subtypes(<b>MECMMInspection</b>,<b>MEVisInspection</b> and <b>MEHHInspection</b>).",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine Revision of type <b>MEInspectionRevision</b> or its subtypes(<b>MECMMInspectionRevision</b>,<b>MEVisInspectionRevision</b> and <b>MEHHInspectionRevision</b>).",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Specification sheet name to get Feature Attributes Codes.",
          "name": "specSheetName"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::FtrAttrbs"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of feature attribute codes given in above spec sheet name.",
          "name": "ftrAttribCodeInfo"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "This indicates to get last n number of jobs data from whole processed data.",
          "name": "lastNumOfJobs"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Another search criteria based on date range; this is from date.",
          "name": "fromDate"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "To date to use in date range search criteria.",
          "name": "toDate"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about input to get the Specification Limits.",
      "isPublished": "true",
      "name": "GetSpecLimitInput",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::ItemRevision"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of <b>DPVClusterGroup _Revision</b>(s)",
          "name": "clusterGroupInfoSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "The return structure consists of vector of business objects(cluster group rev). And it has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "ClusterGroupInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The ImportFeatureDataResponse structure is returned from the importFeatureData. This has serviceData object with any errors that occurred during execution of the operation",
      "isPublished": "true",
      "name": "ImportFeatureDataResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID of type <b>MEPrPlantProcess</b>.",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine ID of type <b>MEInspection</b> or its subtypes(<b>MECMMInspection</b>,<b>MEVisInspection</b> and <b>MEHHInspection</b>).",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine revision of type <b>MEInspectionRevision</b> or its subtypes(<b>MECMMInspectionRevision</b>,<b>MEVisInspectionRevision</b> and <b>MEHHInspectionRevision</b>).",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Specification sheet name to get Feature Attributes Codes.",
          "name": "specSheetName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "If trueall the Feature Attributes Codes irrespective of Active Status and Significance values are reteturned.<br />If false, only the Feature Attributes Codes where Active Status value is 'Y' and Significance value is '1' are returned.<br />",
          "name": "considerActiveSignificance"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about input to get the Feature Attribute Codes.",
      "isPublished": "true",
      "name": "InputToGetAttrCode",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant ID of type <b>MEPrPlantProcess</b>",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine ID of type <b>MEInspection</b> or its subtypes(<b>MECMMInspection</b>,<b>MEVisInspection</b> and <b>MEHHInspection</b>).",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine revision of type <b>MEInspectionRevision</b> or its subtypes(<b>MECMMInspectionRevision</b>,<b>MEVisInspectionRevision</b> and <b>MEHHInspectionRevision</b>).",
          "name": "routineRev"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about input to get the spec sheet names.",
      "isPublished": "true",
      "name": "InputToGetSpecSheetNames",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The build label of the beginning job of the job range",
          "name": "fromJob"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The build label of the ending job of the job range",
          "name": "toJob"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::DateTimeRange"
            }
          ],
          "description": "The data range within which the from and to builds need to be queried. Builds outside the date range will be ignored<br /><br />",
          "name": "dateTimeRange"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The JobRange structure represents the beginning and end of job range.",
      "isPublished": "true",
      "name": "JobRange",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the plant. This is used to identify the measurement database",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision of the routine",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device type of the measurement event, such as '<i>CMM</i>', '<i>Vision</i>' and '<i>Hand Held</i>'",
          "name": "deviceType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Creation time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "creationTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "Success or failure of limit insertion. Fails even if one of the limit insertions fail",
          "name": "success"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::AttrLimits"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of attribute specification limits",
          "name": "ftrLimits"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The Limit structure is used to give the reject or spec limit information",
      "isPublished": "true",
      "name": "Limit",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The LimitInsertResponse structure is used to return the status of insertions",
      "isPublished": "true",
      "name": "LimitInsertResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The measurement database link name. This information is obtained from the  USER_DB_LINKS and DPV_LINK_LOCATOR tables.",
          "name": "linkName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A user name for the measurement database. This information is obtained from the USER_DB_LINKS and DPV_LINK_LOCATOR tables.",
          "name": "userName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Host name of the measurement database's server. This information is obtained from the USER_DB_LINKS and DPV_LINK_LOCATOR tables.",
          "name": "hostName"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure conists of link name , user name and host name in it.",
      "isPublished": "true",
      "name": "LinkNameResults",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery::LinkNameResults"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list consisting of measurement database links,  the hosting servers, and a user name for each measurement database<br />",
          "name": "linkNameSet"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of plant and link name combinations with \",\" (comma) delimiter in the format of  <br />\"plant_id,link_name,current_db\" For e.g. \"GMO00001,link1,ORACLE\"<br /><br /><br /><br /><br />",
          "name": "plantLinkNameSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure constis of one vector of structure and one vector of strigs. In vector of structures; the structure consists of user name,link name and host name(db name). In vector of strings; the string is combination of plant id and link name with ,(comma) delimiter.And it has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "LinkNamesInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Event date time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "eventTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Upload time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "uploadTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "URL of device that measures the routine for the measurement event",
          "name": "urlToDevice"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature Name",
          "name": "featureName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Attribute code pertaining to the <font face=\"courier\" height=\"10\">errorCode</font>",
          "name": "attributeId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Error code for the measurement event",
          "name": "errorCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Error message for the measurement event",
          "name": "errorMessage"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Failure code for the measurement event",
          "name": "iFail"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item id of the plant",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device identifier for the measurement event",
          "name": "deviceId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Job sequence number or label for the measurement event",
          "name": "jsn"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of type \"<b>InspectionDevice</b>\" for the parsing script that processes the measurement event data",
          "name": "scriptId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Script revision of the <font face=\"courier\" height=\"10\">scriptId</font>",
          "name": "scriptRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the routine",
          "name": "routineName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature label pertaining to the <font face=\"courier\" height=\"10\">errorCode</font>",
          "name": "fileName"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The LogData structure is used to give event data to be inserted",
      "isPublished": "true",
      "name": "LogData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Service Data object with the error messages for the failed insertions",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The LogInsertResponse structure is used to return the status of insertions",
      "isPublished": "true",
      "name": "LogInsertResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::AppearanceGroup"
            }
          ],
          "description": "Ref to the cluster",
          "name": "cluster"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineIdVer"
            }
          ],
          "description": "RoutineIdVer structure with the routine information",
          "name": "routineIdRev"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The ClusterIdentifier structure is used give the information (i.e. routine id and revision and cluster ref) of the clusters of interest",
      "isPublished": "true",
      "name": "ClusterIdentifier",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Plant Id of type <b>MEPrPlantProcess</b>.",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine Id of type <b>MEInspection</b> or its subtypes(<b>MECMMInspection</b>,<b>MEVisInspection</b> and <b>MEHHInspection</b>).",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecLimitInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of specification limits info.",
          "name": "specLimitOutPut"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about specification limits for given search criteria.",
      "isPublished": "true",
      "name": "MainSpecLimitOutPut",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": " Integer identifier for first feature",
          "name": "featureId1"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Integer identifier for second feature",
          "name": "featureId2"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of attribute code values that are common to <font face=\"courier\" height=\"10\">featureId1</font> and <font face=\"courier\" height=\"10\">featureId2</font><br />",
          "name": "featureAttrCode"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The MappedFeature structure has a couple of features that are mapped and the attributes that are common to them",
      "isPublished": "true",
      "name": "MappedFeature",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::MappedFeatureMap"
            }
          ],
          "description": "A Map between the <font face=\"courier\" height=\"10\">clientId</font> as key and a list of mapped features as value. The  <font face=\"courier\" height=\"10\">clientId</font>  key identifies two routine revisions for which the mapped feature information is provided in the <font face=\"courier\" height=\"10\">MappedFeature</font> structure. Each <font face=\"courier\" height=\"10\">MappedFeature</font> structure has two features that are mapped and a list of attribute codes that are common to them<br />",
          "name": "mappedFeatureData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "partialErrors"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The MappedFeatureResponse structure represents the map which has the information of mapped feature data.for a client Id",
      "isPublished": "true",
      "name": "MappedFeatureResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Identifier for first feature.",
          "name": "featureID1"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Identifier for second feature.",
          "name": "featureID2"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of attribute code values that are common to featureID1 and featureID2.",
          "name": "featurePortAttrCode"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The MappedPortFeature structure has a couple of features that are mapped and the attributes that are common to them",
      "isPublished": "false",
      "name": "MappedPortFeature",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::MappedPortFeatureMap"
            }
          ],
          "description": "A Map (string, MappedPortFeature) between the clientId and a list of mapped features. The clientId key identifies two routine revisions for which the mapped feature information is provided in the MappedPortFeature structure. Each MappedPortFeature structure has two features that are mapped and a list of attribute codes that are common to them",
          "name": "mappedPortFeatureData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Standard service data containing partial errors.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The MappedPortFeatureResponse structure represents the map which has the information of mapped feature data for a client Id",
      "isPublished": "false",
      "name": "MappedPortFeatureResponse",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Build label of the measurement event",
          "name": "buildLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Event type of the measurement event",
          "name": "eventType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device identifier of the measurement device",
          "name": "device"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Shift number ('<i>0</i>', '<i>1</i>', '<i>2</i>', '<i>3</i>' or '<i>4</i>') of the measurement event.<br />\"0\" means shift information is not given. \"1\" means morning, \"2\" means afternoon, \"3\" means evening and \"4\" means night shifts<br />",
          "name": "shiftNumber"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Event execution time in UTC. Date format \"dd-mon-yy HH24:MI:SS\"",
          "name": "utcTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Shift day time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "shiftDay"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::FtrActual"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of feature actual information including feature attribute codes and corresponding measured values for one measurement event",
          "name": "ftrInput"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad::TraceEvent"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of trace code values for one measurement event",
          "name": "traceInput"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Event execution date time in \"dd-mon-yy HH24:MI:SS\" format",
          "name": "eventDateTime"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Vehicle program name associated with the measurement event",
          "name": "vehicleProgram"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Phase name associated with the measurement event",
          "name": "phaseName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the plant associated with the measurement event",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision of the routine associated with the measurement event",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision of the routine",
          "name": "routineRev"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Device type of the measurement event such as '<i>CMM</i>', '<i>Vision</i>' an '<i>Hand Held</i>'",
          "name": "deviceType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Part name of the measurement event",
          "name": "partName"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The MeasmtData structure is used to give event data to be inserted",
      "isPublished": "true",
      "name": "MeasmtData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of  event system IDs corresponding to each <font face=\"courier\" height=\"10\">MeasmtData</font> provided in the input",
          "name": "eventSysId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The MeasmtLoadResponse structure is used to return the event sys id and error information",
      "isPublished": "true",
      "name": "MeasmtLoadResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery::MeasurementDatabaseInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list consisting of measurement databases along with respective details like database key, database name, database type, host name and database username.",
          "name": "measurementDatabaseSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "Standard service data containing partial errors.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The response consists of vector of measurement database details.",
      "isPublished": "false",
      "name": "MeasurementDatabaseDetailsResponse",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Unique Identifier for the database.",
          "name": "databaseKey"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the database.",
          "name": "databaseName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Type of the database (Oracle or sql).",
          "name": "databaseType"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Host where the database is located.",
          "name": "hostName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Username of the database (Oracle or sql).",
          "name": "databaseUsername"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The MeasurementDatabaseInfo structure represents the information about the measurememt databases.",
      "isPublished": "false",
      "name": "MeasurementDatabaseInfo",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::MeasurementTicketMap"
            }
          ],
          "description": "A map of input parameter <font face=\"courier\" height=\"10\">clientId</font>, which is the key, and the file ticket to measurement file containing engineering and measurement data pertaining to the <font face=\"courier\" height=\"10\">clientId</font>  <br />",
          "name": "measurementTicketsInfo"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "partialErrors"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The MeasurementsTicketResponse structure represents the mapping of client id to measurement ticket",
      "isPublished": "true",
      "name": "MeasurementsTicketResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "A <b>DPVCluster_Revision</b>",
          "name": "clusterRevision"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The ClusterIdentifier2 structure is used give the information of the clusters of interest",
      "isPublished": "true",
      "name": "ClusterIdentifier2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item  ID of the plant of type <b>MEPrPlantProcess</b>. The plant information is used to determine in which measurement database the <font face=\"courier\" height=\"10\">eventSysId</font> is stored",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The event system ID of the measurement event",
          "name": "eventSysId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Column of the value to be modified in the <font face=\"courier\" height=\"10\">DIS_MEASMT_EVENT</font> table",
          "name": "columnName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The value to be set in the column identied by the <font face=\"courier\" height=\"10\">columnName</font> for the <font face=\"courier\" height=\"10\">eventSysId</font>",
          "name": "newValue"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The NewEventInfo structure is used to give the reject or spec limits for a attribute",
      "isPublished": "true",
      "name": "NewEventInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of the plant",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the plant",
          "name": "plantName"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure consits of Plant Information( Plant Id and Plant Name).",
      "isPublished": "true",
      "name": "PlantResults",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::PlantResults"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A  list of structures that consist of plant ID and name  <br />",
          "name": "plantSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure consists of Vector which consists of a structure with the Plant Information(Plant Id and Plant Name). And it has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "PlantsInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "It has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "PopulateLinkTablesResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A key provided as input that is unique and associated with the two routine revisions in the PortRoutineSetInfo structure. This key is used in the output MappedPortFeatureMap parameter to identify the routine revisions with the associated feature map information. The routine revision information is not used in the output and the clientId is used in its place.",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "First routine revision with operation type: &quot;Manufacturing Engineering Inspection&quot;.",
          "name": "routine1"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "Second routine revision with operation type: &quot;Manufacturing Engineering Inspection&quot;.",
          "name": "routine2"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "The PortRoutineSetInfo structure has the routines whose mapped features need to be retrieved",
      "isPublished": "false",
      "name": "PortRoutineSetInfo",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery::EventResults"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of event results with data associated with measurement event such as device type, part name, etc",
          "name": "events"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The QueryActiveOrDeactiveDataResponse structure is used to return the all column of the DIS_MEASMT_EVENT table and servicedata",
      "isPublished": "true",
      "name": "QueryActiveOrDeactiveDataResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::EventResults2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of event results with data associated with measurement event such as device type, part name, and so on",
          "name": "events2"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure is used to return the all columns of the DIS_MEASMT_EVENT table and corresponding Feature info(Feature Name,Feature Attribute Code,Acutal Value) from DIS_MEASMT_FTR_ACTUAL table.",
      "isPublished": "true",
      "name": "QueryActiveOrDeactiveDataResponse2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Last number of builds",
          "name": "queryLastXjobs"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Last number of hours",
          "name": "queryLastXhrs"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "Last number of minutes",
          "name": "queryLastXmin"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::DateTimeRange"
            }
          ],
          "description": "A date time range with from and to values in the format \"MM-DD-YYYY HH24:MI:SS\"<br />",
          "name": "queryDateTimeRange"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::JobRange"
            }
          ],
          "description": "A range of build labels",
          "name": "queryJobRange"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::SingleJob"
            }
          ],
          "description": "One build label",
          "name": "querySingleJob"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::AdditionalinfoMap"
            }
          ],
          "description": "This is for future use and not currently used",
          "name": "additionalinfo"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The QueryRange structure represents the user query information.",
      "isPublished": "true",
      "name": "QueryRange",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::AdditionalresponsesMap"
            }
          ],
          "description": "Reserved for future use",
          "name": "additionalresponses"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Identifier of the object/information requested",
          "name": "id"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Display name of the object/information requested",
          "name": "displayname"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The Response structure represents the id and displayname of each attribute that defined in EngineeringData struct.",
      "isPublished": "true",
      "name": "Response",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::BusinessObject"
            }
          ],
          "description": "A <b>MEInspection_Revision</b>  object",
          "name": "routineRevision"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "File ticket of a XML file that contains feature data of the <font face=\"courier\" height=\"10\">routineRevision</font>",
          "name": "fmsFileTicket"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the <b>DPVExcel</b>  dataset that the operation will create operation",
          "name": "datasetName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Optional information that gives the description of the dataset",
          "name": "datasetDescription"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The RoutineAndFile structure is given as input to importFeatureData.\nThis has routine revision tag for which the feature data is imported. It also has the details required for creating the excel dataset.",
      "isPublished": "true",
      "name": "RoutineAndFile",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::ClusterData"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of ClusterData structures with engineering data of a cluster",
          "name": "clusterData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data object",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The ClusterQryResponse structure is used return the engineering data of a cluster.\nThis structure has a ClusterData structure and the service data structure in it.",
      "isPublished": "true",
      "name": "ClusterQryResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The Routine object to which the features belong",
          "name": "routine"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::FeatureData"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of FeatureData structures",
          "name": "featureData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The RoutineData structure is used return the engineering data belonging to the routine. Each routine has set of features\nThese set of features are captured in a vector.",
      "isPublished": "true",
      "name": "RoutineData",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The Routine object to which the features belong",
          "name": "routine"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::FeatureData2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of FeatureData2 structures",
          "name": "featureData"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The RoutineData2 structure is used return the engineering data belonging to the routine. Each routine has set of features\nThese set of features are captured in a vector.",
      "isPublished": "true",
      "name": "RoutineData2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "The routine revision to which the <font face=\"courier\" height=\"10\">featureData</font> belongs",
          "name": "routine"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::FeatureData3"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of feature information, such as active status, name, description, and ID",
          "name": "featureData"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The RoutineData3 structure is used return the engineering data belonging to the routine. Each routine has set of features\nThese set of features are captured in a vector.",
      "isPublished": "true",
      "name": "RoutineData3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item id of the routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine revision of the routine",
          "name": "routineRev"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The RoutineIdVer structure is used give the information (i.e. item id and revision) of the routines of interest",
      "isPublished": "true",
      "name": "RoutineIdVer",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item id of the routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine revision of the routine",
          "name": "routineRev"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The RoutineIdVer2 structure is used give the information (i.e. item id and revision) of the routines of interest",
      "isPublished": "true",
      "name": "RoutineIdVer2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item id of the routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Routine revision of the routine",
          "name": "routineRev"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The RoutineIdVer3 structure is used give the information (i.e. item id and revision) of the routines of interest",
      "isPublished": "true",
      "name": "RoutineIdVer3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery::RoutineData"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of RoutineData structures with engineering data of a routine",
          "name": "routineData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data object",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The RoutineQryResponse structure is used return the engineering data of a routine.\nThis structure has a RoutineData structure and the service data structure in it.",
      "isPublished": "true",
      "name": "RoutineQryResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::RoutineData2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A vector of RoutineData2 structures with engineering data of a routine",
          "name": "routineData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data object",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The RoutineQryResponse2 structure is used return the engineering data of a routine.\nThis structure has a RoutineData2 structure and the service data structure in it.",
      "isPublished": "true",
      "name": "RoutineQryResponse2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery::RoutineData3"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of structures containing engineering data of routine revisions",
          "name": "routineData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The RoutineQryResponse3 structure is used return the engineering data of a routine.\nThis structure has a RoutineData3 structure and the service data structure in it.",
      "isPublished": "true",
      "name": "RoutineQryResponse3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item ID of a routine",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name associated with the <font face=\"courier\" height=\"10\">routineId</font>",
          "name": "routineName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Revision of the <font face=\"courier\" height=\"10\">routineId</font>",
          "name": "routineRev"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure consits of Routine Information( Routine Id,Routine Name and Routine Revision).",
      "isPublished": "true",
      "name": "RoutineResults",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery::ClusterData2"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "The feature attribute information associated with the cluster and a reference to the cluster",
          "name": "clusterData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The ClusterQryResponse2 structure is used return the engineering data of a cluster.\nThis structure has a ClusterData2 structure and the service data structure in it.",
      "isPublished": "true",
      "name": "ClusterQryResponse2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A key provided as input that is unique and associated with the two routine revisions in the <font face=\"courier\" height=\"10\">RoutineSetInfo</font> structure. This key is used in the output <font face=\"courier\" height=\"10\">MappedFeatureMap</font> parameter to identify the routine revisions with the associated feature map information. The routine revision information is not used in the output and the clientId is used in its place. It is the responsibility of the user  to ensure that the clientId is unique",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "First routine revision",
          "name": "routine1"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::ItemRevision"
            }
          ],
          "description": "Second routine revision",
          "name": "routine2"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The RoutineSetInfo structure has the routines whose mapped features need to be retrieved",
      "isPublished": "true",
      "name": "RoutineSetInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery::RoutineResults"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of  structures that consists of routine item ID, name, and revision",
          "name": "routineSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure consists of Vector which consists of a structure with the Routine Information(Routine Id ,Routine Name and Routine Revision). And it has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "RoutinesInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller. This ID is used to identify return data elements and partial errors associated with the input structure",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the plant for the search criteria",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the routine for the search criteria",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The start date and time associated with the search criteria",
          "name": "fromDate"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The end date and time associated with the search criteria",
          "name": "toDate"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Job Serial Number (JSN): An alphabetic and/or numeric combination that identifies a collection of measurement data resulting from a specific analysis job or assembly build. Such data generally  records the measured location of holes, pins, slots, tabs  and surface planes for each manufactured part or assembly",
          "name": "jsn"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "This is string value to specify what data to get (\"<i>ACTIVE</i>\": active events, \"<i>INACTIVE</i>\": inactive events, \"<i>ALL</i>\": active and inactive events)",
          "name": "activeInactive"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The SearchCriteria structure is used to get active or deactive measurement data",
      "isPublished": "true",
      "name": "SearchCriteria",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller. This ID is used to identify return data elements and partial errors associated with the input structure",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the plant for the search criteria",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "ID of the routine for the search criteria",
          "name": "routineId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The start date and time associated with the search criteria",
          "name": "fromDate"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::DateTime"
            }
          ],
          "description": "The end date and time associated with the search criteria",
          "name": "toDate"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Job Serial Number (JSN): An alphabetic and/or numeric combination that identifies a collection of measurement data resulting from a specific analysis job or assembly build. Such data generally records the measured location of holes, pins, slots, tabs  and surface planes for each manufactured part or assembly",
          "name": "jsn"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The string value to specify what data to get (\"<i>ACTIVE</i>\": active events, \"<i>INACTIVE</i>\": inactive events, \"<i>ALL</i>\": active and inactive events)",
          "name": "activeInactive"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "The SearchCriteria structure is used to get active or deactive mesurement data.",
      "isPublished": "true",
      "name": "SearchCriteria2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A unique string supplied by the caller. This ID is used to identify return data elements associated with this input structure",
          "name": "clientId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::EngineeringData"
            }
          ],
          "description": "This is primarily the <b>ItemRevision</b> of a routine. It has associated data such as plant ID, vehicle program, and device ID",
          "name": "enggData"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "int"
            }
          ],
          "description": "The shift filter to be applied to the search criteria. The allowed values are between '<i>0</i>' and '<i>4</i>', inclusive. Any other values will be ignored and a default of '<i>0</i>' will be used instead. If the value is '<i>0</i>', it indicates measurement data for all shifts",
          "name": "shiftNumber"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The type of <font face=\"courier\" height=\"10\">queryRange</font> with possible values of '<i>LAST_N_JOBS</i>', '<i>LAST_N_HRS</i>','<i>LAST_N_MIN</i>','<i>DATETIME_RANGE</i>','<i>JSN_RANGE</i>','<i>JSN</i>'",
          "name": "filter"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::QueryRange"
            }
          ],
          "description": "A specification of a range to be applied as a <font face=\"courier\" height=\"10\">filter</font> for the measurement data. The type of the queryRange is determined by the <font face=\"courier\" height=\"10\">filter</font> parameter. This has the details of all possible query ranges but only the details pertaining to filter parameter will be used to filter the measurement data",
          "name": "queryRange"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The SearchCriteriaInfo structure represents the whole information about the search criteria.",
      "isPublished": "true",
      "name": "SearchCriteriaInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "A build label",
          "name": "job"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery::DateTimeRange"
            }
          ],
          "description": "The data range within which the job need to be queried. Builds outside the date range will be ignored<br />",
          "name": "dateTimeRange"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "The SingleJob structure represents the single job",
      "isPublished": "true",
      "name": "SingleJob",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Spec sheet name from excel sheet; examples of spec sheet names are ENGG,1MM,2MM",
          "name": "specSheetName"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about output after getting the spec sheet names.",
      "isPublished": "true",
      "name": "SpecInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Value which we get from measurement database.",
          "name": "actualValue"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Job name of a particular event.",
          "name": "buildLabel"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Date and time of a particular event which with measurements in shop floor.",
          "name": "eventDateTime"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about event's from measurement database.",
      "isPublished": "true",
      "name": "SpecInfoForQuery",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecInfo"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of spec sheet names.",
          "name": "specInfoRes"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "This returns partial errors if any.",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about output with spec sheet names and partial errors if any.",
      "isPublished": "true",
      "name": "SpecInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Id of the feature defined in the Engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name of the feature defined in the Engineering excel file of type <b>DPVExcel</b>.",
          "name": "featureName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Feature attribute codes are the deviations to measures; eg: X_DEV(X Deviation),Y_DEV(Y Deviation), Z_DEV( Z Deviation).",
          "name": "featureAttribCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Lower specification limit value for corresponding feature attribute code.",
          "name": "lowerSpecLimit"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Target value for corresponding feature attribute code.",
          "name": "target"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "double"
            }
          ],
          "description": "Upper specification limit value for corresponding feature attribute code.",
          "name": "upperSpecLimit"
        },
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery::SpecInfoForQuery"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "List of events information.",
          "name": "attributeInfo"
        }
      ],
      "createRelease": "tc10000.1.3",
      "description": "This indicates information about feature and specification limit of a particular feature.",
      "isPublished": "true",
      "name": "SpecLimitInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2014_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "It has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "CreateLinkNameInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Item id of the routine",
          "name": "specSetCodeName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "target value of the spec set code",
          "name": "target"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "usl value of the spec set code",
          "name": "usl"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "lsl value of the spec set code",
          "name": "lsl"
        }
      ],
      "createRelease": "tc2007.1.2",
      "description": "The SpecSetCode2 structure is used return the spec set code values of an attribute",
      "isPublished": "true",
      "name": "SpecSetCode2",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_12::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Name or identifier for the specification limits. A character string to define the type of specification",
          "name": "specSetCodeName"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Target value of the spec set code",
          "name": "target"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Upper specification limit value of the spec set code",
          "name": "usl"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "float"
            }
          ],
          "description": "Lower specification limit value of the spec set code",
          "name": "lsl"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The SpecSetCode3 structure is used return the spec set code values of an attribute",
      "isPublished": "true",
      "name": "SpecSetCode3",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "description": "A list of strings consisting of SSRS server URLs",
          "name": "ssrsrUrlSet"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc9000.0.0",
      "description": "This structure consists of Vector which consists strings of Sql Server Reporing Service(SSRS) urls and it has a partial errors object giving error information, if any",
      "isPublished": "true",
      "name": "SsrsUrlInfoResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2011_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "<b>MEPrPlantProcess</b> to which a measurement event or <font face=\"courier\" height=\"10\">eventSysId</font> belongs",
          "name": "plantId"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "bool"
            }
          ],
          "description": "Use '<i>1</i>' to activate and '<i>0</i>' to deactive measurement events",
          "name": "activeInactive"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Event system ID stored in measurement database for the measurement event for which the <font face=\"courier\" height=\"10\">activeInactive</font> status is to be applied",
          "name": "eventSysId"
        }
      ],
      "createRelease": "tc2007.1.3",
      "description": "The TargetEvents structure is used to set as active or deactive based on the int value",
      "isPublished": "true",
      "name": "TargetEvents",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_03::MeasurementDataEdit",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataEdit"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "    Trace code for a measurement event,  fo rexample, '<i>Operator</i>'",
          "name": "traceCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The value of the traceCode for the measurement event, for example, '<i>Mike</i>' for a traceCode of '<i>Operator</i>'<br />",
          "name": "eventTraceCodeValue"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The TraceEvent structure is used to give details of event trace information",
      "isPublished": "true",
      "name": "TraceEvent",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "Trace codes are information added to a measurement data file to define specific conditions that apply to a particular measurement (for example, product variants, such as having a sunroof or no sunroof)",
          "name": "traceCode"
        },
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            }
          ],
          "description": "The value associated with the <font face=\"courier\" height=\"10\">traceCode</font> (usually for a measurement event",
          "name": "traceCodeValue"
        }
      ],
      "createRelease": "tc8000.2.0",
      "description": "This structure contains the event trace information like trace code and event trace code value.",
      "isPublished": "true",
      "name": "TraceInfo",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2010_04::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "StructElement": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "Teamcenter::Soa::Server::ServiceData"
            }
          ],
          "description": "The  Service  Data",
          "name": "serviceData"
        }
      ],
      "createRelease": "tc2007.1",
      "description": "The UpdateEventResponse structure is used to return the status of insertions",
      "isPublished": "true",
      "name": "UpdateEventResponse",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2007_06::MeasurementDataLoad",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataLoad"
    }
  ],
  "TcVersion": "tc13000.0.0",
  "Typedef": [
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "AdditionalinfoMap",
      "isPublished": "true",
      "name": "AdditionalinfoMap",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "DataTypeRefParam": [
                {
                  "dataType": "std::string"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "AdditionalresponsesMap",
      "isPublished": "true",
      "name": "AdditionalresponsesMap",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery::MappedFeature"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "MappedFeatureMap",
      "isPublished": "true",
      "name": "MappedFeatureMap",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "DataTypeRefParam": [
                {
                  "dataType": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery::MappedPortFeature"
                }
              ],
              "dataType": "std::vector"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "A Map of clientID as key and a list of mapped features as value.",
      "isPublished": "false",
      "name": "MappedPortFeatureMap",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::EngineeringDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::EngineeringDataQuery"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "dataType": "std::string"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "P8000.0.0",
      "description": "MeasurementTicketMap",
      "isPublished": "true",
      "name": "MeasurementTicketMap",
      "namespace": "Teamcenter::Soa::ProductionManagement::_2008_06::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    },
    {
      "DataTypeRefParam": [
        {
          "DataTypeRefParam": [
            {
              "dataType": "std::string"
            },
            {
              "dataType": "std::string"
            }
          ],
          "dataType": "std::map"
        }
      ],
      "createRelease": "tc11000.4.0",
      "description": "A map containing plant ids and database keys as key/value pair.",
      "isPublished": "false",
      "name": "PlantDatabaseMap",
      "namespace": "Teamcenter::Soa::Internal::ProductionManagement::_2017_11::MeasurementDataQuery",
      "scope": "Teamcenter::Soa::ProductionManagement::MeasurementDataQuery"
    }
  ],
  "xmlns": "http://teamcenter.com/BusinessModel/TcBusinessData"
}