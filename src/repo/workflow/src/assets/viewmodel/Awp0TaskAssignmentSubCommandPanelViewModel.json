
{
    "schemaVersion": "1.0.0",
    "imports": [
        "js/aw-panel-footer.directive",
        "js/aw-button.directive",
        "js/aw-panel-section.directive",
        "js/aw-label.directive",
        "js/aw-panel-body.directive",
        "js/aw-command-panel-section.directive",
        "js/aw-list.directive",
        "js/exist-when.directive",
        "js/aw-repeat.directive",
        "js/aw-i18n.directive",
        "js/visible-when.directive",
        "js/aw-include.directive"
    ],

    "data": {

        "name":{
            "displayName": "{{i18n.Workflow_Name}}",
            "type": "STRING",
            "isEditable": "false",
            "uiValue": "",
            "renderingHint": "label"
        },
        "status":{
            "displayName": "{{i18n.status}}",
            "type": "STRING",
            "isEditable": "false",
            "uiValue": "",
            "renderingHint": "label"
         },
         "addUsersOnPanelAnchor": "awp0_addUsersOnPanelAnchor",
         "addTaskParticipantAssignmentOnPanelAnchor": "awp0_addTaskParticipantAssignmentOnPanelAnchor",
         "isAddButtonVisible": true
    },

    "dataProviders": {

    },

    "actions": {
        "populatePanelData": {
            "actionType": "JSFunction",
            "method": "populatePanelData",
            "inputData": {
                "taskObject": "{{props.subPanelContext.selectionData.selected[0]}}",
                "taskInfoObject": "{{props.subPanelContext.taskInfoObject}}",
                "assignmentState": "{{props.subPanelContext.assignmentState}}",
                "nampProp": "{{data.name}}",
                "statusProp": "{{data.status}}"
            },
            "outputData": {
                "name": "nameProp",
                "status": "statusProp",
                "selectedOption": "selectedOption"
            },
            "deps": "js/Awp0WorkflowAssignmentPanelService"
        },
        "updateOrCloseAssignmentPanel": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "showUnsaveEditMessageAction",
                    "condition": "conditions.isValidSelectionModified"
                },
                {
                    "action": "populatePanelData",
                    "condition": "conditions.isValidInitialSelection"
                },
                {
                    "action": "closeCurrentOpenedPanel",
                    "condition": "conditions.isEmptySelection"
                },
                {
                    "action": "populatePanelData",
                    "condition": "data.selectedOption ==='cancelOperation' && conditions.isValidSelectionModified"
                },
                {
                    "action": "updateSelectedTaskAssignmentTable",
                    "condition": "data.selectedOption ==='saveOperation' && conditions.isValidSelectionModified"
                },
                {
                    "action": "populatePanelData",
                    "condition": "data.selectedOption ==='saveOperation' && conditions.isValidSelectionModified"
                }
            ]
        },
        "updateSelectedTaskAssignmentTable": {
            "actionType": "JSFunction",
            "method": "updatePropAssignmentContextInfo",
            "inputData": {
                "taskInfoObject": "{{props.subPanelContext.taskInfoObject}}",
                "taskObject": "{{props.subPanelContext.taskInfoObject.taskObject}}",
                "subPanelContent": "{{props.subPanelContext.assignmentState}}",
                "newSelectedTaskObject": "{{props.subPanelContext.selectionData.selected[0]}}"
            },
            "deps": "js/Awp0WorkflowAssignmentService"
        },
        "showUnsaveEditMessageAction": {
            "actionType": "JSFunctionAsync",
            "method": "showUnsaveEditMessageAction",
            "inputData": {
                "taskObject": "{{props.subPanelContext.taskInfoObject.taskObject}}",
                "data": "{{data}}"
            },
            "outputData": {
                "selectedOption": ""
            },
            "deps": "js/Awp0WorkflowAssignmentPanelService"
        },
        "closeCurrentOpenedPanel": {
            "actionType": "Event",
            "method": "Event",
            "inputData":
            {
                "events":
                [
                    {
                        "name": "complete",
                        "condition": "!data.isDestroyed()",
                        "eventData":
                        {
                            "source": "toolAndInfoPanel"
                        }
                    }
                ]
            }
        },
        "updateTaskAssignmentTable": {
            "actionType": "JSFunction",
            "method": "updatePropAssignmentContextInfo",
            "inputData": {
                "taskInfoObject": "{{props.subPanelContext.taskInfoObject}}",
                "taskObject": "{{props.subPanelContext.taskInfoObject.taskObject}}",
                "subPanelContent": "{{props.subPanelContext.assignmentState}}"
            },
            "events":
            {
                "success":
                [
                    {
                        "name": "complete",
                        "eventData": {
                            "source": "toolAndInfoPanel"
                        }
                    }

                ]
            },
            "deps": "js/Awp0WorkflowAssignmentService"
        }
    },
    "messages": {
    },

    "onEvent":
    [

    ],
    "lifecycleHooks": {
        "onUpdate": [
            {
                "action": "updateOrCloseAssignmentPanel",
                "observers": [ "props.subPanelContext.selectionData.selected[0].uid" ]
            }
        ]
    },

    "conditions":
    {
        "isValidToUpdateAssignment": {
            "expression": "conditions.isTaskNotCompleted && subPanelContext.taskInfoObject.props.assignee.modelObjects.length > 0"
        },
        "isTaskNotCompleted": {
            "expression": "subPanelContext.taskInfoObject.taskObject.props.state.dbValues[0] !== '8' && subPanelContext.taskInfoObject.isPrivilegedToAssign == 'true' && subPanelContext.taskInfoObject.updatePropContext && subPanelContext.taskInfoObject.updatePropContext.propName"
        },
        "isOnlyTaskObjectSelected": {
            "expression": "subPanelContext.taskInfoObject.taskObject.modelType.typeHierarchyArray.indexOf('EPMTask') > -1"
        },
        "isInvalidSelection": {
            "expression": "conditions.isEmptySelection || ( props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTask') <= -1 || props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTaskTemplate') <= -1)"
        },
        "isEmptySelection": {
            "expression": "!props.subPanelContext.selectionData.selected || props.subPanelContext.selectionData.selected.length <=0 || !props.subPanelContext.selectionData.selected[0].modelType || ( props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTask') <= -1 && props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTaskTemplate') <= -1)"
        },
        "isValidInitialSelection": {
            "expression": "props.subPanelContext.selectionData.selected && props.subPanelContext.selectionData.selected.length > 0 && props.subPanelContext.selectionData.selected[0].modelType && ( props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTask') > -1 || props.subPanelContext.selectionData.selected[0].modelType.typeHierarchyArray.indexOf('EPMTaskTemplate') > -1) && ( !subPanelContext.taskInfoObject.updatePropContext || !subPanelContext.taskInfoObject.updatePropContext.propName)"
        },
        "isValidSelectionModified": {
            "expression": "subPanelContext.taskInfoObject.taskObject && subPanelContext.taskInfoObject.taskObject.props.state.dbValues[0] !== '8' && subPanelContext.taskInfoObject.isPrivilegedToAssign == 'true' && subPanelContext.taskInfoObject.updatePropContext && subPanelContext.taskInfoObject.updatePropContext.propName"
        }
    },

    "i18n": {
        "taskAssignments": [ "WorkflowCommandPanelsMessages" ],
        "modify": [ "WorkflowCommandPanelsMessages" ],
        "task": [ "WorkflowCommandPanelsMessages" ],
        "Workflow_Name": [ "WorkflowCommandPanelsMessages" ],
        "status": [ "WorkflowCommandPanelsMessages" ],
        "save": [ "InboxMessages"],
        "discard": [ "InboxMessages"],
        "panelModificationWarningMsg": [ "WorkflowCommandPanelsMessages"]
    }

}

