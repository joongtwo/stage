{
    "schemaVersion": "1.0.0",

    "lifecycleHooks": {
        "onMount": "initPanel",
        "onUpdate": [
            {
                "action": "performPostProcessingAfterXRTLoaded",
                "observers": [ "viewModel.atomicData.xrtState.xrtTypeLoaded" ]
            },
            {
                "action": "assignUserProjectsJob",
                "observers": [ "viewModel.subPanelContext.projectState.triggerAssign" ]
            },
            {
                "action": "removeUserProjectsJob",
                "observers": [ "viewModel.subPanelContext.projectState.triggerRemove" ]
            },
            {
                "action": "updateAttachmentsJob",
                "observers": [ "viewModel.subPanelContext.attachmentsState.updateAttachmentsSection" ]
            },
            {
                "action": "assignResponsibleUserJob",
                "observers": [
                    "props.subPanelContext.addUserPanelState.value.selectedUsers"
                ]
            }
        ]
    },
    "editHandlers": {
        "addPanelEditHandler": {
            "context": "CREATE_PANEL_CONTEXT",
            "dataSource": {
                "xrtVMO": "{{data.xrtState}}"
            }
        }
    },
    "actions": {
        "initPanel": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "getTypeSelectedInformation"
                },
                {
                    "action": "loadChangePanel"
                },
                {
                    "action": "PopulateCopyOptions"
                },
                {
                    "action": "loadUserProjects"
                }
            ]
        },
        "getTypeSelectedInformation": {
            "actionType": "JSFunctionAsync",
            "method": "getTypeSelectedInformation",
            "inputData": {
                "data": "{{data}}",
                "selectedTypeObject": "{{props.subPanelContext.selectedTypeObject}}"
            },
            "outputData": {
                "boTypeConst":"boTypeConst",
                "getTypeConstInput":"getTypeConstInput",
                "selectedType": "selectedType",
                "displayedType":"displayedType",
                "openNewChange" : "openNewChange",
                "setActiveChange": "setActiveChange",
                "isSimpleChangeObjectCreation": "isSimpleChangeObjectCreation",
                "processTemplatePropName": "processTemplatePropName"
            },
            "events": {
                "success": [
                    {
                        "name": "changeGetTypeFromBOConstant"
                    }
                ]
            },

            "deps": "js/Cm1CreateChangeService"
        },
        "changeGetTypeFromBOConstant": {
            "actionType": "TcSoaService",
            "serviceName": "BusinessModeler-2007-06-Constants",
            "method": "getTypeConstantValues",
            "inputData": {
                "keys": "{{data.getTypeConstInput}}"
            },
            "outputData": {
                "boTypeConst":"{{function:outputForBOTypeConstant}}"
            },
            "deps": "js/changeMgmtUtils"
        },
        "submitToHostAction": {
            "actionType": "JSFunction",
            "method": "sendEventToHost",
            "inputData": {
                "data": "{{data}}"
            },
            "deps": "js/changeMgmtUtils"
        },
        "createChangeObject": {
            "actionType": "JSFunctionAsync",
            "method": "getCreateInput",
            "inputData": {
                "data": "{{data}}",
                "isSubmit": false,
                "editHandler": "{{editHandlers.addPanelEditHandler}}",
                "participantInfo": "{{props.participantInfo}}"
            },
            "outputData": {
                "createChangeInput": "",
                "isSubmitAction": false
            },
            "events": {
                "success": [
                    {
                        "condition": "conditions.isValidNewSOAForDerive",
                        "name": "createChange.callNewDeriveSoa"
                    },
                    {
                        "condition": "(data.selectedType.dbValue ==='C2Capa' || data.parent_types.dbValue.indexOf( 'TYPE::C2Capa::C2Capa::ProblemReport' ) > -1) && ctx.CreateChangePanel.isDerive && ctx.tcSessionData.tcMajorVersion >= 13",
                        "name": "createChange.callNewDeriveCAPASoa"
                    },
                    {
                        "condition": "!ctx.CreateChangePanel.isDerive && !conditions.isTCReleaseAtLeast142",
                        "name": "createChange.callSoa"
                    },
                    {
                        "condition": "!ctx.CreateChangePanel.isDerive && conditions.isTCReleaseAtLeast142",
                        "name": "createChange.callNewSoa"
                    }
                ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "submitChangeObject": {
            "actionType": "JSFunctionAsync",
            "method": "getCreateInput",
            "inputData": {
                "data": "{{data}}",
                "isSubmit": true,
                "editHandler": "{{editHandlers.addPanelEditHandler}}",
                "participantInfo": "{{props.participantInfo}}"
            },
            "outputData": {
                "submitChangeInput": "",
                "isSubmitAction": true
            },
            "events": {
                "success": [
                    {
                        "condition": "conditions.isValidNewSOAForDerive",
                        "name": "submitChange.callNewDeriveSoa"
                    },
                    {
                        "condition": "(data.selectedType.dbValue ==='C2Capa'|| data.parent_types.dbValue.indexOf( 'TYPE::C2Capa::C2Capa::ProblemReport' ) > -1) && ctx.CreateChangePanel.isDerive && ctx.tcSessionData.tcMajorVersion >= 13",
                        "name": "submitChange.callNewDeriveCAPASoa"
                    },
                    {
                        "condition": "!ctx.CreateChangePanel.isDerive && !conditions.isTCReleaseAtLeast142",
                        "name": "submitChange.callSoa"
                    },
                    {
                        "condition": "!ctx.CreateChangePanel.isDerive && conditions.isTCReleaseAtLeast142",
                        "name": "submitChange.callNewSoa"
                    }
                ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "clearSelectedType": {
            "actionType": "JSFunction",
            "method": "updateChangeAtomicData",
            "inputData": {
                "AtomicObj": "{{subPanelContext.selectedTypeObject}}",
                "value" : {}
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "openNewObjectInEditMode": {
            "actionType": "JSFunction",
            "method": "openNewObjectInEditMode",
            "inputData": {
                "data": "{{data}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "removeAttachement": {
            "actionType": "JSFunction",
            "method": "removeAttachementJs",
            "inputData": {
                "selectedAttachToRemove": "{{data.dataProviders.getAttachments.selectedObjects}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "createChangeObjectSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-Core-2012-10-DataManagement",
            "method": "createRelateAndSubmitObjects",
            "inputData": {
                "inputs": "{{data.createChangeInput}}"
            },
            "outputData": {
                "createdChangeObject": "output[0].objects[2]",
                "isCreatePinEvent": "true",
                "changeResponse":"output"
            },
            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation",
                    "eventData": {
                        "createChangeData": "{{data.createdChangeObject}}"
                    }
                } ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "createObjectSuccess",
                    "condition": "subPanelContext.panelPinned === true || data.openNewChange.dbValue === false"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "createChangeObjectNewSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ChangeManagement-2022-12-ChangeManagement",
            "method": "createAndSubmitChangeObjects",
            "inputData": {
                "input": "{{data.createChangeInput}}"
            },
            "outputData": {
                "createdChangeObject": "output[0].objects[2]",
                "isCreatePinEvent": "true",
                "changeResponse":"output"
            },
            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation",
                    "eventData": {
                        "createChangeData": "{{data.createdChangeObject}}"
                    }
                } ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "createObjectSuccess",
                    "condition": "subPanelContext.panelPinned === true || data.openNewChange.dbValue === false"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "submitChangeObjectSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-Core-2012-10-DataManagement",
            "method": "createRelateAndSubmitObjects",
            "inputData": {
                "inputs": "{{data.submitChangeInput}}"
            },
            "outputData": {
                "createdChangeObject": "output[0].objects[2]",
                "isCreatePinEvent": "true",
                "changeResponse":"output"
            },
            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation",
                    "eventData": {
                        "createChangeData": "{{data.createdChangeObject}}"
                    }
                } ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "submitToWorkflowSuccess"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "submitChangeObjectNewSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ChangeManagement-2022-12-ChangeManagement",
            "method": "createAndSubmitChangeObjects",
            "inputData": {
                "input": "{{data.submitChangeInput}}"
            },
            "outputData": {
                "createdChangeObject": "output[0].objects[2]",
                "isCreatePinEvent": "true",
                "changeResponse":"output"
            },

            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation",
                    "eventData": {
                        "createChangeData": "{{data.createdChangeObject}}"
                    }
                } ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "submitToWorkflowSuccess"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "deriveChangeObjectSoa": {
            "actionType": "TcSoaService",
            "serviceName": "ChangeManagement-2020-01-ChangeManagement",
            "method": "deriveChangeItems",
            "inputData": {
                "deriveInput": "{{data.createChangeInput}}"
            },
            "outputData": {
                "derivedObjectUid": "created[1]",
                "changeResponse":"modelObjects"
            },

            "events": {
                "success": [
                    {
                        "name": "createVisRelations",
                        "condition": "ctx.CreateChangePanel.isDerive && ctx.CreateChangePanel.exactTypeToCreate !== '' && ctx.CreateChangePanel.hasExtraAttachements=== true"
                    },
                    {
                        "name": "createchangePanel.fireEventsAfterCreateOperation",
                        "condition": "ctx.CreateChangePanel.hasExtraAttachements=== false "
                    }
                ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "deriveObjectSuccess",
                    "condition": "subPanelContext.panelPinned === true"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },

            "deps": "js/Cm1CreateChangeService"
        },
        "deriveCAPAObjectSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-Capaonawc-2020-12-QualityIssueManagement",
            "method": "deriveProblemSolvingItems",
            "inputData": {
                "deriveInput": "{{data.createChangeInput}}",
                "deriveOptions": "{{function:getDeriveOptions}}"
            },
            "outputData": {
                "derivedObjectUid": "created[1]"
            },

            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation"
                } ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "deriveObjectSuccess",
                    "condition": "subPanelContext.panelPinned === true"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },

            "deps": "js/Cm1CreateChangeService"
        },
        "submitDeriveChangeObjectSoa": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "getObjCreateEditableProperties"
                },
                {
                    "action": "submitDeriveChangeObjectCallSoa"
                }
            ]
        },
        "submitDeriveChangeObjectCallSoa":{
            "actionType": "TcSoaService",
            "serviceName": "ChangeManagement-2020-01-ChangeManagement",
            "method": "deriveChangeItems",
            "inputData": {
                "deriveInput": "{{data.submitChangeInput}}"
            },
            "outputData": {
                "derivedObjectUid": "created[1]",
                "changeResponse":"modelObjects"
            },
            "events": {
                "success": [
                    {
                        "name": "createVisRelations",
                        "condition": "ctx.CreateChangePanel.isDerive && ctx.CreateChangePanel.exactTypeToCreate !== '' && ctx.CreateChangePanel.hasExtraAttachements=== true"
                    },
                    {
                        "name": "createchangePanel.fireEventsAfterCreateOperation",
                        "condition": "ctx.CreateChangePanel.hasExtraAttachements=== false "
                    }
                ],
                "failure": [
                    {
                        "name": "visualizationChange.passFailResponse",
                        "condition": "ctx.CreateChangePanel.exactTypeToCreate !== ''"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "submitDeriveToWorkflowSuccess"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },

            "deps": "js/Cm1CreateChangeService"
        },
        "submitDeriveChangeCAPAObjectCallSoa": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-Capaonawc-2020-12-QualityIssueManagement",
            "method": "deriveProblemSolvingItems",
            "inputData": {
                "deriveInput": "{{data.submitChangeInput}}",
                "deriveOptions": "{{function:getDeriveOptions}}"
            },

            "outputData": {
                "derivedObjectUid": "created[1]"
            },

            "events": {
                "success": [ {
                    "name": "createchangePanel.fireEventsAfterCreateOperation"
                } ]
            },
            "actionMessages": {
                "success": [ {
                    "message": "submitDeriveToWorkflowSuccess"
                } ],
                "failure": [ {
                    "message": "failureMessageFromSOA"
                } ]
            },

            "deps": "js/Cm1CreateChangeService"
        },

        "navigateToCreateChangePanel": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "awPanel.navigate",
                    "eventData": {
                        "destPanelId": "Cm1CreateChangeSub",
                        "eventData": "{{data.eventData}}"
                    }
                } ]
            }
        },
        "navigateToMainPanel": {
            "actionType": "JSFunction",
            "method": "setActiveView",
            "deps": "js/addObjectUtils",
            "inputData": {
                "activeViewState": "{{props.activeState}}",
                "destPanelId": "Cm1CreateChangeSub"
            }
        },
        "hostedModeCreateNewIssueReport": {
            "actionType": "JSFunctionAsync",
            "method": "handleHostedModeIssueTypeCreation",
            "inputData": {
                "data": "{{data}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "initializeDefaultValues": {
            "actionType": "JSFunction",
            "method": "initializeDefaultValues",
            "inputData": {
                "data": "{{data}}",
                "editHandler": "{{editHandlers.addPanelEditHandler}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "autoAssignProperty": {
            "actionType": "JSFunction",
            "method": "autoAssignProperty",
            "inputData": {
                "prop": "{{data.eventData.prop}}",
                "operationType": "CREATE",
                "pattern": "{{data.eventData.newPattern}}",
                "selectedObj": "{{}}",
                "createType": "{{data.selectedType.dbValue}}",
                "editHandler": "{{editHandlers.addPanelEditHandler}}"
            },
            "deps": "js/autoAssignService"
        },
        "getCmOwningProjectsAct": {
            "actionType": "JSFunction",
            "method": "createViewModelObjectById",
            "inputData": {
                "uid": "{{ctx.userSession.props.project.dbValues[0]}}",
                "operationName": "CREATE"
            },

            "outputData": {
                "owningProjects": ""
            },
            "deps": "js/tcViewModelObjectService"
        },
        "loadChangePanel": {
            "actionType": "JSFunction",
            "method": "initializeCreateChangePanel",
            "inputData": {
                "data": "{{data}}"
            },
            "outputData": {
                "attachments": "attachments",
                "attachmentsUids":"attachmentsUids",
                "showCopyOptions": "showCopyOptions"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "loadUserProjects": {
            "actionType": "JSFunctionAsync",
            "method": "loadObjects",
            "inputData": {
                "data": [ "{{ctx.userSession.props.project.dbValues[0]}}" ]
            },
            "events": {
                "success": [ {
                    "condition": "ctx.userSession.props.project.dbValues[0] !== ''",
                    "name": "init.assignedChProjectsProvider"
                } ]
            },
            "deps": "soa/dataManagementService"
        },
        "assignProjectsToCreatedObject": {
            "actionType": "TcSoaService",
            "serviceName": "Core-2007-09-ProjectLevelSecurity",
            "method": "assignOrRemoveObjects",
            "inputData": {
                "assignedOrRemovedobjects": [ {
                    "projects": "{{data.dataProviders.getAssignedProjectsProvider.viewModelCollection.loadedVMObjects}}",
                    "objectToAssign": "{{function:getInputForAssignAndRemoveObjectsSOA}}",
                    "objectToRemove": []
                } ]
            },
            "events": {
                "success": [ {
                    "name": "closeCreatePanelOpenChangeObjectEvent"
                } ]
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "enableResponsibleUserDataProvider": {
            "actionType": "JSFunction",
            "method": "updateResponsibleUserDataProvider",
            "inputData": {
                "dataProvider": "{{data.dataProviders.getAssignedResponsibleUser}}",
                "selecedResources": "{{props.addUserPanelState.selectedUsers}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "generateNextValues": {
            "actionType": "JSFunction",
            "method": "autoAssignAllProperties",
            "inputData": {
                "data": "{{data}}",
                "operationType": "CREATE",
                "createType": "{{data.selectedType.dbValue}}",
                "editHandler": "{{editHandlers.addPanelEditHandler}}"
            },

            "deps": "js/autoAssignService"
        },
        "closePanel": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "complete",
                    "eventData": {
                        "source": "toolAndInfoPanel"
                    },
                    "condition": "conditions.panelCloseCondition"
                } ]
            }
        },
        "setConditionToPin": {
            "actionType": "JSFunction",
            "method": "setConditionToPin",
            "inputData": {
                "data": "{{data}}",
                "subPanelContext": "subPanelContext"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "panelUnpinClose": {
            "actionType": "JSFunction",
            "method": "panelUnpinClose",
            "inputData": {
                "data": "{{data}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "fireEventsAfterCreateOperation": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                        "name": "primaryWorkarea.reset",
                        "condition":"conditions.isCreateChangeInChangeSublocation && ((subPanelContext.panelPinned === false && data.openNewChange.dbValue === false) || subPanelContext.panelPinned === true)"
                    },
                    {
                        "name": "submissionSuccessful",
                        "eventData": {
                            "createChangeData": "{{data}}"
                        }
                    },
                    {
                        "name": "assignProjects",
                        "condition": "!conditions.isTCReleaseAtLeast142 && data.dataProviders.getAssignedProjectsProvider.viewModelCollection.loadedVMObjects.length>0"
                    },
                    {
                        "name": "closeCreatePanelOpenChangeObjectEvent",
                        "condition": "conditions.isTCReleaseAtLeast142 || data.dataProviders.getAssignedProjectsProvider.viewModelCollection.loadedVMObjects.length<=0"
                    },
                    {
                        "name": "cdm.relatedModified",
                        "eventData": {
                            "relatedModified": [
                                "{{ctx.xrtSummaryContextObject}}"
                            ]
                        }
                    },
                    {
                        "name": "cdm.relatedModified",
                        "condition": "( ctx.selected.modelType.typeHierarchyArray.indexOf( 'C2IssueRevision' ) > -1 && (ctx.pselected.modelType.typeHierarchyArray.indexOf( 'Prg0AbsPlan' ) > -1 || ctx.pselected.modelType.typeHierarchyArray.indexOf( 'Prg0AbsEvent' ) > -1 || ctx.pselected.modelType.typeHierarchyArray.indexOf( 'Psi0AbsChecklist' ) > -1 ))",
                        "eventData": {
                            "relatedModified": [
                                "{{ctx.pselected}}"
                            ]
                        }
                    },
                    {
                        "name": "setConditionToPin",
                        "condition": "subPanelContext.panelPinned === true"
                    },
                    {
                        "name": "awPanel.loadNextValues",
                        "condition": "subPanelContext.panelPinned === true"
                    }
                ]
            }
        },
        "closeCreatePanelOpenChangeObject": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "condition": "subPanelContext.panelPinned === false && data.openNewChange.dbValue === true && !conditions.isIssueFromVisualization",
                        "name": "Cm1CreateChange.openInEditMode"
                    },
                    {
                       "condition":"conditions.isIssueFromVisualization && conditions.openIssueInEditMode",
                       "name": "Cm1CreateChange.openInEditMode"
                    },
                    {
                        "name": "complete",
                        "eventData": {
                            "source": "toolAndInfoPanel"
                        },
                        "condition": "subPanelContext.panelPinned === false && data.createRelationForChange !== true"
                    },
                    {
                        "name": "createChangePanelClosed",
                        "eventData": {
                            "createChangeResponse":  "{{data.changeResponse}}"
                        }
                    }
                ]
            }
        },
        "removeSymptomDefect": {
            "actionType": "JSFunction",
            "method": "removeSymptomDefect",
            "inputData": {
                "data": "{{data}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "PopulateCopyOptions": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "loadDeepCopyData",
                    "condition": "conditions.isValidCopyOption"
                },
                {
                    "action": "loadRelations",
                    "condition": "conditions.isValidCopyOption"
                }
            ]
        },
        "loadDeepCopyData": {
            "actionType": "TcSoaService",
            "serviceName": "Core-2014-10-DataManagement",
            "method": "getDeepCopyData",
            "inputData": {
                "deepCopyDataInput": [{
                    "operation": "cm0DeriveChange",
                    "businessObject": "{{ctx.selected}}"
                }]
            },
            "outputData": {
                "deepCopyInfoMap": "deepCopyInfoMap"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "loadRelations": {
            "actionType": "JSFunction",
            "method": "getDeriveRelations",
            "inputData": {
                "data": "{{data}}",
                "deepCopyInfoMap": "{{data.deepCopyInfoMap}}"
            },
            "outputData": {
                "relationNames": "relationNames",
                "showCopyOptions":"showCopyOptions"
            },
            "deps": "js/cmDeriveRelationDirective"
        },

        "clearVisCtx":
        {
            "actionType": "JSFunctionAsync",
            "method": "clearVisCtx",
            "inputData":{},
            "deps": "js/Cm1ChangeCommandService"
        },

        "callCreateRelationForVis":{
            "actionType": "TcSoaService",
            "serviceName": "Core-2006-03-DataManagement",
            "method": "createRelations",
            "inputData": {
                "input": "{{function:getVisAttachmentData}}"
            },
            "outputData": {
                "relation": "visRelations",
                "serviceData": "IServiceData"
            },
            "events": {
                "success": [
                    {
                        "name": "createchangePanel.fireEventsAfterCreateOperation"
                    }
                ]
            },
            "deps": "js/changeMgmtUtils"
        },
        "passVisFailResponse": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "createChangePanelClosed",
                        "eventData": {
                            "createChangeResponse":  "{{data.changeResponse}}"
                        }
                }]
            }
        },
        "performPostProcessingAfterXRTLoaded": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "initializeDefaultValues",
                    "condition": "conditions.isXRTTypeLoaded"
                }
            ]
        },
        "getObjCreateEditableProperties": {
            "actionType": "JSFunction",
            "method": "getObjCreateEditableProperties",
            "inputData": {
                "objectType": "{{data.selectedType.dbValue}}",
                "type": "CREATE",
                "propertyNames": [ "object_name" ],
                "editHandler": "{{editHandlers.addPanelEditHandler}}"
            },
            "outputData":{
                "object_name": "object_name"
            },
            "deps": "js/addObjectUtils"
        },
        "submitDeriveChangeCAPAObjectSoa": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "getObjCreateEditableProperties"
                },
                {
                    "action": "submitDeriveChangeCAPAObjectCallSoa"
                }
            ]
        },
        "assignUserProjectsJob": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "navigateToShowSaveAsPage",
                    "condition": "conditions.isAssignUserProject"
                },
                {
                    "action": "updateAssignedProjectsProvider",
                    "condition": "conditions.isAssignUserProject"
                },
                {
                    "action": "updateAssignTrigger",
                    "condition": "conditions.isAssignUserProject"
                }
            ]
        },
        "updateAssignTrigger": {
            "actionType": "JSFunction",
            "method": "updateAtomicDataValue",
            "inputData": {
                "AtomicObj": "{{subPanelContext.projectState}}",
                "value" : {
                    "triggerAssign": false
                }
            },
            "deps": "js/addObjectUtils"
        },
        "navigateToShowSaveAsPage": {
            "actionType": "JSFunction",
            "method": "updateAtomicDataValue",
            "inputData": {
                "AtomicObj": "{{subPanelContext.activeState}}",
                "value" : {
                    "activeView": "Cm1CreateChangeSub"
                }
            },
            "deps": "js/addObjectUtils"
        },
        "updateAssignedProjectsProvider": {
            "actionType": "JSFunction",
            "method": "updateAssignedProjectsProvider",
            "inputData": {
                "data": "{{data}}",
                "selectedObjects": "{{subPanelContext.projectState.value.selectedProjects}}",
                "removeOnly": "{{subPanelContext.projectState.value.triggerRemove}}"
            },
            "deps": "js/addObjectUtils"
        },
        "removeUserProjectsJob": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "updateAssignedProjectsProvider",
                    "condition": "conditions.isRemoveUserProject"
                },
                {
                    "action": "updateRemoveTrigger",
                    "condition": "conditions.isRemoveUserProject"
                }
            ]
        },
        "updateRemoveTrigger": {
            "actionType": "JSFunction",
            "method": "updateAtomicDataValue",
            "inputData": {
                "AtomicObj": "{{subPanelContext.projectState}}",
                "value" : {
                    "triggerRemove": false
                }
            },
            "deps": "js/addObjectUtils"
        },
        "updateAttachmentsJob": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "updateAttachmentsProvider",
                    "condition": "conditions.isAttachmentsSectionUpdateNeeded"
                },
                {
                    "action": "resetAttachmentsContextData",
                    "condition": "conditions.isAttachmentsSectionUpdateNeeded"
                }
            ]
        },
        "updateAttachmentsProvider": {
            "actionType": "JSFunction",
            "method": "updateAttachmentsProvider",
            "inputData": {
                "data": "{{data}}",
                "newAttachments": "{{subPanelContext.attachmentsState.value.addAttachments}}"
            },
            "deps": "js/Cm1CreateChangeService"
        },
        "resetAttachmentsContextData": {
            "actionType": "JSFunction",
            "method": "updateAtomicDataValue",
            "inputData": {
                "AtomicObj": "{{subPanelContext.attachmentsState}}",
                "value" : {
                    "addAttachments": [],
                    "updateAttachmentsSection": false
                }
            },
            "deps": "js/addObjectUtils"
        },
        "assignResponsibleUserJob": {
            "actionType": "batchJob",
            "steps": [ {
                    "action": "enableResponsibleUserDataProvider",
                    "condition": "conditions.isResponsibleUserInPeoplePicker"
                },
                {
                    "action": "navigateToMainPanel",
                    "condition": "conditions.isResponsibleUserInPeoplePicker"
                }
            ]
        },
        "setCurrentUserAsAnalyst": {
            "actionType": "JSFunctionAsync",
            "method": "setCurrentUserAsAnalyst",
            "inputData": {
                "participantInfo": "{{props.participantInfo}}",
                "isActiveChangeSet": "{{data.setActiveChange.dbValue}}"
            },
            "deps": "js/Cm1CreateParticipantsService"
        }
    },
    "onEvent": [
        {
            "eventId": "changeGetTypeFromBOConstant",
            "action": "changeGetTypeFromBOConstant"
        },
        {
            "eventId": "submissionSuccessful",
            "action": "submitToHostAction"
        },
        {
            "eventId": "setConditionToPin",
            "action": "setConditionToPin"
        },
        {
            "eventId": "Cm1CreateChange.openInEditMode",
            "action": "openNewObjectInEditMode"
        },
        {
            "eventId": "createChange.callSoa",
            "action": "createChangeObjectSoa"
        },
        {
            "eventId": "createChange.callNewSoa",
            "action": "createChangeObjectNewSoa"
        },
        {
            "eventId": "createChange.callNewDeriveSoa",
            "action": "deriveChangeObjectSoa"
        },
        {
            "eventId": "createChange.callNewDeriveCAPASoa",
            "action": "deriveCAPAObjectSoa"
        },
        {
            "eventId": "submitChange.callSoa",
            "action": "submitChangeObjectSoa"
        },
        {
            "eventId": "submitChange.callNewSoa",
            "action": "submitChangeObjectNewSoa"
        },
        {
            "eventId": "submitChange.callNewDeriveSoa",
            "action": "submitDeriveChangeObjectSoa"
        },
        {
            "eventId": "submitChange.callNewDeriveCAPASoa",
            "action": "submitDeriveChangeCAPAObjectSoa"
        },
        {
            "eventId": "hostedModeCreateChange.IssueReport",
            "action": "hostedModeCreateNewIssueReport"
        },
        {
            "eventId": "Cm1RemoveAttachementCmdEvent",
            "action": "removeAttachement"
        },
        {
            "eventId": "awPattern.newPatternSelected",
            "cacheEventData": true,
            "action": "autoAssignProperty"
        },
        {
            "eventId": "cm1userProjects.assignProjects",
            "action": "getAssignedProjectsProvider"
        },
        {
            "eventId": "cm1userProjects.assignProjects",
            "action": "navigateToCreateChangePanel"
        },
        {
            "eventId": "caw0addSymptomDefect",
            "action": "getSymptomDefectProvider"
        },
        {
            "eventId": "init.assignedChProjectsProvider",
            "action": "getCmOwningProjectsProvider"
        },
        {
            "eventId": "assignProjects",
            "action": "assignProjectsToCreatedObject"
        },
        {
            "eventId": "closeCreatePanelOpenChangeObjectEvent",
            "action": "closeCreatePanelOpenChangeObject"
        },
        {
            "eventId": "addSelectionToMainPanel",
            "cacheEventData": true,
            "action": "navigateToCreateChangePanel"
        },
        {
            "eventId": "addSelectionToMainPanel",
            "cacheEventData": true,
            "action": "enableResponsibleUserDataProvider"
        },
        {
            "eventId": "awPanel.loadNextValues",
            "action": "generateNextValues"
        },
        {
            "eventId": "primaryWorkArea.selectionChangeEvent",
            "action": "panelUnpinClose"
        },
        {
            "eventId": "change.complete",
            "action": "closePanel"
        },
        {
            "eventId": "createchangePanel.fireEventsAfterCreateOperation",
            "action": "fireEventsAfterCreateOperation"
        },
        {
            "eventId": "Caw0RemoveSymptomDefectCommand.removeSymptomDefect",
            "action": "removeSymptomDefect"
        },
        {
            "eventId": "Cm1ShowCreateChangeInContext.contentUnloaded",
            "action": "clearVisCtx"

        },
        {
            "eventId": "Cm1ShowCreateChange.contentUnloaded",
            "action": "clearVisCtx"
        },
        {
            "eventId": "Cm1ShowDeriveChange.contentUnloaded",
            "action": "clearVisCtx"
        },
        {
            "eventId": "createVisRelations",
            "action": "callCreateRelationForVis"

        },
        {
            "eventId": "visualizationChange.passFailResponse",
            "action": "passVisFailResponse"
        }
    ],
    "data": {
        "typeName": {
            "type": "STRING",
            "dbValue": ""
        },
        "selectedType": {
            "type": "STRING",
            "dbValue": ""
        },
        "boTypeConst": {
            "showSubmitButton": {
                "dbValue": false,
                "type": "BOOLEAN"
            },
            "showCreateButton": {
                "dbValue": false,
                "type": "BOOLEAN"
            },
            "isEnableAssignProjects":{
                "dbValue": true,
                "type": "BOOLEAN"
            }
        },
        "selectedTypeDisplayName": {
            "type": "STRING",
            "dbValue": ""
        },
        "typeDisplayName": {
            "type": "STRING",
            "dbValue": ""
        },
        "displayedType": {
            "displayName": "",
            "type": "STRING"
        },
        "showCopyOptions": {
            "dbValue": false,
            "type": "BOOLEAN"
        },
        "addObjectCommands": "cm1_addObjectCommands",
        "projectSectionCommands": "cm1_projectSectionCommands",
        "addResponsibleUserCommand": "cm1_addRespUserCommands",
        "addSymptomDefectCommand": "caw0_addSymptomDefectCommand",
        "cm1PinCommands": "cm1_oneStepPinCommands",
        "createRelationForChange": "{{ctx.PaletteAndSearchData.showPaletteAndSearch}}",
        "isCreatePinEvent": {
            "type": "BOOLEAN",
            "dbValue": false
        },
        "openNewChange": {
            "displayName": "{{i18n.openNewChange}}",
            "type": "BOOLEAN",
            "isRequired": "false",
            "isEditable": "true",
            "dbValue": false,
            "uiValue": false,
            "labelPosition": "PROPERTY_LABEL_AT_RIGHT"
        },
        "setActiveChange": {
            "displayName": "{{i18n.setActiveChange}}",
            "type": "BOOLEAN",
            "isRequired": "false",
            "isEditable": "true",
            "dbValue": "",
            "labelPosition": "PROPERTY_LABEL_AT_RIGHT"
        },
        "xrtState": {
            "initialValues": {
                "xrtTypeLoaded": ""
            },
            "meta": {
                "xrtVMO": {
                    "field": "true",
                    "type": "viewModelObject"
                }
            }
        },
        "qa0FindingGuideline": {
            "type": "STRING",
            "dbValue": ""
        },
        "parent_types": {
            "type": "OBJECTARRAY",
            "dbValue": []
        }
    },
    "functions": {
        "getCreateInput": {
            "functionName": "getCreateInput",
            "parameters": [
                "{{data}}",
                "false"
            ]
        },
        "getInputForAssignAndRemoveObjectsSOA": {
            "functionName": "getInputForAssignAndRemoveObjectsSOA",
            "parameters": [
                "{{data}}"
            ]
        },
        "getCreateInputForSubmit": {
            "functionName": "getCreateInput",
            "parameters": [
                "{{data}}",
                "true"
            ]
        },
        "getDeriveInput": {
            "functionName": "getDeriveInput",
            "parameters": [
                "{{data}}",
                "false"
            ]
        },
        "getDeriveInputForSubmit": {
            "functionName": "getDeriveInput",
            "parameters": [
                "{{data}}",
                "true"
            ]
        },
        "getDeriveOptions": {
            "functionName": "getDeriveOptions",
            "parameters": [
                "{{data}}",
                "true"
            ]
        },
        "outputForBOTypeConstant": {
            "functionName": "outputForBOTypeConstant",
            "parameters": ["{{data}}"]
        },
        "getVisAttachmentData":{
            "functionName": "getVisAttachmentData",
            "parameters": ["{{data}}"]
        }
    },

    "messages": {
        "submitToWorkflowSuccess": {
            "messageType": "INFO",
            "messageText": "{{i18n.submitToWorkflowSuccess}}",
            "messageTextParams": [
                "{{data.createdChangeObject}}"
            ]
        },
        "submitDeriveToWorkflowSuccess": {
            "messageType": "INFO",
            "messageText": "{{i18n.submitToWorkflowSuccess}}",
            "messageTextParams": [
                "{{data.object_name.dbValue}}"
            ]
        },
        "createObjectSuccess": {
            "messageType": "INFO",
            "messageText": "{{i18n.changeObjectAdded}}",
            "messageTextParams": [
                "{{data.createdChangeObject}}"
            ]
        },
        "deriveObjectSuccess": {
            "messageType": "INFO",
            "messageText": "{{i18n.changeObjectAdded}}",
            "messageTextParams": [
                "{{data.object_name.dbValue}}"
            ]
        },
        "failureMessageFromSOA": {
                "messageType": "ERROR",
                "messageText": "{{errorCode}}"
            }
    },

    "i18n": {
        "CreateChange": [ "CreateChangeMessages" ],
        "CreateButtonTitle": [ "CreateChangeMessages" ],
        "CreateSubmitButtonTitle": [ "CreateChangeMessages" ],
        "DeriveButtonTitle": [ "CreateChangeMessages" ],
        "DeriveSubmitButtonTitle": [ "CreateChangeMessages" ],
        "submitToWorkflowSuccess": [ "CreateChangeMessages" ],
        "addattachments": [ "CreateChangeMessages" ],
        "removeattachments": [ "CreateChangeMessages" ],
        "attachmentsText": [ "CreateChangeMessages" ],
        "implementsText": [ "CreateChangeMessages" ],
        "ownProjectSectionTitle": [ "awAddDirectiveMessages" ],
        "projectsSectionTitle": [ "awAddDirectiveMessages" ],
        "responsibleUser": [ "PlantDataManagementConstants" ],
        "changeObjectAdded": [ "CreateChangeMessages" ],
        "openNewChange": [ "CreateChangeMessages" ],
        "symptomDefect": [ "CreateChangeMessages" ],
        "copyOptionsText": [ "ChangeMessages" ],
        "setActiveChange": [ "ChangeMessages" ]
    },

    "preferences": [
        "WRKFLW_user_panel_content_display"
    ],

    "conditions": {
        "isEnableAssignProjects":
        {
            "expression": "data.boTypeConst.isEnableAssignProjects.dbValue"
        },
        "isAttachementSelected": {
            "expression": "data.dataProviders.getAttachments.selectedObjects.length > 0"
        },
        "showCopyOptions": {
            "expression": "showCopyOptions.dbValue"
        },
        "showSubmitButton": {
            "expression": "data.boTypeConst.showSubmitButton.dbValue"
        },
        "isTemplateSelected": {
            "expression": "!(!data.xrtState.xrtVMO.props[ data.processTemplatePropName ] || data.xrtState.xrtVMO.props[ data.processTemplatePropName ].dbValue === null || data.xrtState.xrtVMO.props[ data.processTemplatePropName ].dbValue === '')"
        },
        "showCreateButton": {
            "expression": "data.boTypeConst.showCreateButton.dbValue && ( !conditions.isTCReleaseAtLeast142 || !conditions.isTemplateSelected )"
        },
        "isPlantPRTypeSelected": {
            "expression": "data.selectedType.dbValue =='Pdm1ProblemItem' "
        },
        "callNewSOAForDerive": {
            "expression": "((ctx.tcSessionData.tcMajorVersion >= 12 && ctx.tcSessionData.tcMinorVersion >= 3) || (ctx.tcSessionData.tcMajorVersion >= 13))"
        },
        "isHostedComponent": {
            "expression": "ctx.aw_hosting_state.currentHostedComponentId === 'com.siemens.splm.client.change.CreateChangeComponent'"
        },
        "panelCloseCondition": {
            "expression": "(ctx.CreateChangePanel.selectedObjects.length !== selectionData.mselected.length || ctx.CreateChangePanel.selectedObjects[0].uid !== selectionData.mselected[0].uid)"
        },
        "isCapaDerivingFromIssue": {
            "expression": "(data.selectedType.dbValue =='C2Capa' || data.parent_types.dbValue.indexOf( 'TYPE::C2Capa::C2Capa::ProblemReport' ) > -1) && (ctx.selected.modelType.typeHierarchyArray.indexOf( 'C2IssueRevision' ) > -1 || ctx.selected.modelType.typeHierarchyArray.indexOf('C2CapaRevision') > -1) && ctx.tcSessionData.tcMajorVersion >= 13"
        },
        "isValidNewSOAForDerive": {
            "expression": "((data.selectedType.dbValue !=='C2Capa' && data.parent_types.dbValue.indexOf( 'TYPE::C2Capa::C2Capa::ProblemReport' ) === -1) || (data.selectedType.dbValue ==='C2Capa' && ctx.tcSessionData.tcMajorVersion < 13)) && ctx.CreateChangePanel.isDerive && ( (ctx.tcSessionData.tcMajorVersion >= 12 && ctx.tcSessionData.tcMinorVersion >= 3) || (ctx.tcSessionData.tcMajorVersion >= 13) )"
        },
        "isValidCopyOption": {
            "expression": "ctx.CreateChangePanel.isDerive && ctx.mselected.length === 1"
        },
        "isSimpleChangeObjectCreation": {
            "expression": "data.isSimpleChangeObjectCreation"
        },
        "openIssueInEditMode": {
            "expression": "!ctx.CreateChangePanel || ctx.CreateChangePanel.openNewIssueInEditMode == true"
        },
        "isIssueFromVisualization":{
            "expression":"ctx.CreateIssueHostedMode"
        },
        "isXRTTypeLoaded": {
            "expression": "xrtState.xrtTypeLoaded"
        },
        "isCreateChangeInChangeSublocation":{
            "expression":"ctx.search.provider === 'Cm1MyChangesProvider' && ctx.sublocation.clientScopeURI==='fnd0Change'"
        },
        "isAssignUserProject": {
            "expression": "subPanelContext.projectState.value.triggerAssign == true"
        },
        "isRemoveUserProject": {
            "expression": "subPanelContext.projectState.value.triggerRemove == true"
        },
        "isAttachmentsSectionUpdateNeeded": {
            "expression": "subPanelContext.attachmentsState.value.updateAttachmentsSection === true"
        },
        "isAuditFindingSelected": {
            "expression": "data.xrtState.xrtVMO.props[ 'REF(revision,C2IssueRevisionCreI).c2Category' ].dbValue =='Audit'"
        },
        "isResponsibleUserInPeoplePicker": {
            "expression": "props.subPanelContext.addUserPanelState.selectedUsers && props.subPanelContext.addUserPanelState.selectedUsers.length > 0 && props.subPanelContext.addUserPanelState.criteria.participantType === ''"
        },
        "isActiveChangeCheckboxVisible": {
            "expression": "!ctx.CreateChangePanel.isDerive && subPanelContext.selectedTypeObject.uid.includes( 'ChangeNotice' ) && conditions.isTCReleaseAtLeast142"
        },
        "isTCReleaseAtLeast142": {
            "expression": "( ctx.tcSessionData.tcMajorVersion === 14 && ctx.tcSessionData.tcMinorVersion >= 2 ) || ctx.tcSessionData.tcMajorVersion > 14 "
        }
    },
    "dataProviders": {
        "getAttachments": {
            "response": "",
            "totalFound": "",
            "selectionModelMode": "multiple",
            "commands": {
                "Awp0ShowObjectCell": {
                    "id": "cmdOpen",
                    "title": "Open",
                    "areas": [ "com.siemens.splm.clientfx.ui.modelObjectListActionCommands" ],
                    "priorities": [ 300 ],
                    "dependencies": [ "js/showObjectCommandHandler" ],
                    "displayOption": "ON_HOVER_AND_SELECTION",
                    "position": "TOP_RIGHT"
                }
            }
        },
        "getImplements":{
            "selectionModelMode": "multiple",
            "commands": {
                "Awp0ShowObjectCell": {
                    "id": "cmdOpen",
                    "title": "Open",
                    "areas": [ "com.siemens.splm.clientfx.ui.modelObjectListActionCommands" ],
                    "priorities": [ 300 ],
                    "dependencies": [ "js/showObjectCommandHandler" ],
                    "displayOption": "ON_HOVER_AND_SELECTION",
                    "position": "TOP_RIGHT"
                }
            }

        },
        "getAssignedProjectsProvider": {
            "response": "{{subPanelContext.projectState.selectedProjects}}",
            "totalFound": "{{subPanelContext.projectState.selectedProjects.length}}",
            "preSelection": false,
            "selectionModelMode": "single",
            "commandsAnchor": "aw_removeProjectCellCommandAction"
        },
        "getCmOwningProjectsProvider": {
            "action": "getCmOwningProjectsAct",
            "response": [ "{{data.owningProjects}}" ],
            "totalFound": "{{data.owningProjects.length}}",
            "preSelection": false,
            "selectionModelMode": "single",
            "commands": {
                "Awp0ShowObjectCell": {
                    "id": "cmdOpen",
                    "areas": [
                        "com.siemens.splm.clientfx.ui.modelObjectListActionCommands"
                    ],

                    "priorities": [
                        300
                    ],

                    "dependencies": [
                        "js/showObjectCommandHandler"
                    ],

                    "displayOption": "ON_HOVER_AND_SELECTION",
                    "position": "TOP_RIGHT"
                }
            }
        },
        "getAssignedResponsibleUser": {
            "response": "{{data.dataProviders.getAssignedResponsibleUser.viewModelCollection.loadedVMObjects}}",
            "totalFound": "1",
            "selectionModelMode": "single",
            "outputData": {
                "searchResults": "{{data.dataProviders.getAssignedResponsibleUser.viewModelCollection.loadedVMObjects}}",
                "totalFound": "1",
                "totalLoaded": "1"
            }
        },
        "getSymptomDefectProvider": {
            "response": "{{data.subPanelContext.sharedData.selectedObjects.selection}}",
            "totalFound": "{{data.subPanelContext.sharedData.selectedObjects.selection.length}}",
            "selectionModelMode": "single",
            "commandsAnchor": "aw_removeSymptomDefectCellCommand"
        }
    }
}
