{
    "schemaVersion": "1.0.0",
    "imports": [
        "js/aw-splm-table.directive"
    ],
    "ports": {
        "designSelection": {
            "syncObject": {}
        },
        "findAlignedDesignsInput": {
            "syncObject": {},
            "onChangeAction": "selectAlignedDesigns"
        },
        "partsOutputAlignedDesigns": {
            "syncObject": {}
        },
        "designsInputAlignedParts": {
            "syncObject": {},
            "onChangeAction": "isSelectionValidToRefreshSecondary"
        }
    },
    "actions": {

        "selectObjectsInTree": {
            "actionType": "JSFunction",
            "method": "selectObjectsInTree",
            "deps": "js/cbaFindAlignedService",
            "inputData": {
                "eventData":"{{parameters.eventData}}"
            }
        },
        "activateWindow": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "ace.activateWindow",
                        "eventData": {
                            "key": "{{props.subPanelContext.provider.contextKey}}"
                        }
                    }
                ]
            }
        },

        "fireAceLoadAndSelectProvidedObjectInTree": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "aceLoadAndSelectProvidedObjectInTree",
                        "eventData": {
                            "objectsToSelect": "{{ports.findAlignedDesignsInput.syncObject.objectsToFind}}",
                            "viewToReact": "{{props.subPanelContext.provider.contextKey}}",
                            "productContextInfo": "{{props.subPanelContext.provider.occContext.productContextInfo}}"
                        }
                    }
                ]
            },
            "events": {
                "success": [{
                        "name": "cba.selectObjectsInTree",
                        "eventData": {
                            "overwriteSelections": false,
                            "objectsToSelect": "{{ports.findAlignedDesignsInput.syncObject.objectsToFind}}",
                            "viewToReact": "{{props.subPanelContext.provider.contextKey}}",
                            "occContext": "{{props.subPanelContext.provider.occContext}}"
                        }
                    }
                ]
            }
        },

        "selectSingleAlignedDesign": {
            "actionType": "JSFunction",
            "method": "updateValueOnCtxOrState",
            "deps": "js/occmgmtUtils",
            "inputData": {
                "path": "selectionsToModify",
                "value": {
                    "elementsToSelect": "{{ports.findAlignedDesignsInput.syncObject.objectsToFind}}",
                    "overwriteSelections": "{{parameters.overwriteSelections}}"
                },
                "target": "{{props.subPanelContext.provider.occContext}}"
            }
        },
        "selectMultipleAlignedDesigns": {
            "actionType": "JSFunction",
            "method": "updateValueOnCtxOrState",
            "deps": "js/occmgmtUtils",
            "inputData": {
                "path": "selectionsToModify",
                "value": {
                    "elementsToSelect": "{{ports.findAlignedDesignsInput.syncObject.objectsToFind}}",
                    "overwriteSelections":true
                },
                "target": "{{props.subPanelContext.provider.occContext}}"
            },
            "events": {
                "success": [{
                        "name": "cba.selectSingleAlignedDesign",
                        "eventData": {
                            "overwriteSelections": false
                        }
                    }
                ]
            }
        },
        "clearSelections": {
            "actionType": "JSFunction",
            "method": "updateValueOnCtxOrState",
            "deps": "js/occmgmtUtils",
            "inputData": {
                "path": "selectionsToModify",
                "value": {
                    "elementsToSelect": [],
                    "overwriteSelections": true
                },
                "target": "{{props.subPanelContext.provider.occContext}}"
            }
        },
        "selectAlignedDesigns": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "clearSelections"
                },
                {
                    "action": "activateWindow"
                },
                {
                    "action": "fireAceLoadAndSelectProvidedObjectInTree"

                }
            ]
        },
        "isSelectionValidToRefreshSecondary": {
            "actionType": "JSFunction",
            "method": "isSelectedObjectExistInList",
            "inputData": {
                "selectedObject": "{{ctx.CBASrcContext.selectedModelObjects[0]}}",
                "objects": "{{ports.designsInputAlignedParts.syncObject}}"
            },
            "outputData": {
                "isValidSelection":""
            },
            "events": {
                "success": [
                    {
                        "name": "cdm.relatedModified",
                        "condition":"isValidSelection && ctx.CBASrcContext.activeTab.id !== 'Awb0ViewerFeature'",
                        "eventData": {
                            "refreshLocationFlag": true,
                            "relations": "",
                            "relatedModified": [
                                "{{ctx.CBASrcContext.selectedModelObjects[0]}}"
                            ]
                        }
                    }
                ]
            },
            "deps": "js/CadBomAlignmentUtil"
        },
        "UpdateObjectToFindInCtx":{
            "actionType": "JSFunction",
            "method": "updatePartialCtx",
            "inputData": {
                "path": "cbaContext.findAlignedDesignsInput",
                "value": {
                    "objectsToFind": "{{data.eventMap['cba.findAlignedDesigns'].objectsToFind}}",
                    "sourceObject": "{{data.eventMap['cba.findAlignedDesigns'].sourceObject}}",
                    "firstObjectToFind": "{{data.eventMap['cba.findAlignedDesigns'].firstObjectToFind}}",
                    "restObjectToFind": "{{data.eventMap['cba.findAlignedDesigns'].restObjectToFind}}"
                }
            },
            "deps": "js/appCtxService"
        },
        "cbaUpdateSelectionsEvent": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{data.eventMap['cba.updateSelections'].sourceSelections}}",
                            "silentSelection": true,
                            "viewToReact": "{{data.eventMap['cba.updateSelections'].sourceContextName}}"
                        }
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "condition": "data.eventMap['cba.updateSelections'].targetSelections>0",
                        "eventData": {
                            "objectsToSelect": "{{data.eventMap['cba.updateSelections'].targetSelections}}",
                            "silentSelection": true,
                            "viewToReact": "{{data.eventMap['cba.updateSelections'].targetContextName}}"
                        }
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "condition": "data.eventMap['cba.updateSelections'].targetSelections===undefined",
                        "eventData": {
                            "objectsToSelect": [],
                            "silentSelection": true,
                            "viewToReact": "{{data.eventMap['cba.updateSelections'].targetContextName}}"
                        }
                    }
                ]
            }
        },
        "aceElementsSelectionUpdatedEvent": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{ctx.cbaContext.findAlignedDesignsInput.restObjectToFind}}",
                            "silentSelection": true,
                            "viewToReact": "CBASrcContext"
                        }
                    }
                ]
            }
        },
        "focusOnElementsEvent": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "focusOnElementsEvent",
                        "eventData": {
                            "elementsToFocus": "{{ctx.cbaContext.findAlignedDesignsInput.firstObjectToFind}}",
                            "silentSelection": true,
                            "viewToReact": "CBASrcContext"
                        }
                    }
                ]
            }
        },
        "fetchAlignedDesigns": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-EntCba-2021-12-Alignments",
            "method": "findAlignedOccurrences",
            "inputData": {
                "targetContext": {
                    "type":"{{ctx.CBASrcContext.topElement.type}}",
                    "uid":"{{ctx.CBASrcContext.topElement.uid}}"
                },
                "occurrences":  [
                    {
                        "type":"{{ctx.cbaContext.findAlignedDesignsInput.sourceObject.type}}",
                        "uid":"{{ctx.cbaContext.findAlignedDesignsInput.sourceObject.uid}}"
                    }
                ]
            },
            "outputData": {
                "findAlignedResponse":"{{function:processFindAlignedResponse}}"
            },
            "events": {
                "success": [
                    {
                        "name": "cba.clearAlignmentCheckIndicators"
                    },
                    {
                        "name": "cba.updateSelections",
                        "eventData": {
                            "sourceSelections": "{{data.findAlignedResponse.sourceObjects}}",
                            "sourceContextName":"CBATrgContext",
                            "targetSelections": "{{data.findAlignedResponse.objectsToFind}}",
                            "targetContextName":"CBASrcContext",
                            "contextName":"CBASrcContext",
                            "objectsToFind":"{{data.findAlignedResponse.objectsToFind}}"
                        }
                    },
                    {
                        "name": "cba.updateFindAlignedInfo",
                        "condition":"data.findAlignedResponse.findAlignedInfo !== undefined",
                        "eventData": {
                            "findAlignedInfo": "{{data.findAlignedResponse.findAlignedInfo}}",
                            "contextName":"CBASrcContext"
                        }

                    },
                    {
                        "name": "cba.findAlignedDesigns",
                        "condition":"data.findAlignedResponse.findAlignedInfo !== undefined",
                        "eventData": {
                            "objectsToFind": "{{data.findAlignedResponse.objectsToFind}}",
                            "sourceObject": "{{data.findAlignedResponse.sourceObject}}",
                            "firstObjectToFind": "{{data.findAlignedResponse.firstObjectToFind}}",
                            "restObjectToFind": "{{data.findAlignedResponse.restObjectToFind}}"
                        }
                    }
                ]
            },
            "actionMessages":{
                "success":[
                    {
                        "condition":"data.findAlignedResponse.objectsToFind===undefined",
                        "message":"FindAlignedNoAlignmentMessage"
                    }
                ],
                "failure":[
                    {
                        "message":"FindAlignedNoAlignmentERRORMessage"
                    }
                ]
            },
            "deps": "js/cbaFindAlignedService"
        },
        "notifyVMOPropertiesUpdated":{
            "actionType": "JSFunction",
            "method": "notifyVMOPropertiesUpdated",
            "inputData": {
                "data": {
                    "findAlignedInfo":"{{data.eventData.findAlignedInfo}}",
                    "sourceContext":"CBATrgContext",
                    "sourceColumn":"trgAlignmentIndication",
                    "targetColumn":"srcAlignmentIndication"
                }
            },
            "deps": "js/cbaFindAlignedService"
        },
        "updateFindAlignedInfo":{
            "actionType": "JSFunction",
            "method": "updatePartialCtx",
            "inputData": {
                "path": "cbaContext.findAlignedContext.findAlignedInfo",
                "value": "{{data.findAlignedResponse.findAlignedInfo}}"
            },
            "events": {
                "success": [
                    {
                        "name": "cba.vmoPropsUpdated",
                        "eventData": {
                            "findAlignedInfo": "{{data.findAlignedResponse.findAlignedInfo}}",
                            "contextName": "CBASrcContext"
                        }
                    }
                ]
            },
            "deps": "js/appCtxService"
        },
        "findAlignedDesigns": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "UpdateObjectToFindInCtx"
                },
                {
                    "action": "aceElementsSelectionUpdatedEvent",
                    "condition": "ctx.cbaContext.findAlignedDesignsInput.objectsToFind.length > 0"
                },
                {
                    "action": "focusOnElementsEvent",
                    "condition": "ctx.cbaContext.findAlignedDesignsInput.firstObjectToFind !== undefined"
                },
                {
                    "action": "fetchAlignedDesigns",
                    "condition": "ctx.cbaContext.findAlignedDesignsInput.objectsToFind.length == 0"
                }
            ]
        },
        "fireFindAlignedDesigns": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{ports.findAlignedDesignsInput.syncObject.sourceObject}}",
                            "silentSelection": true,
                            "viewToReact": "CBATrgContext"
                        }
                    },
                    {
                        "name": "cba.findAlignedDesigns",
                        "eventData": {
                            "objectsToFind": "{{ports.findAlignedDesignsInput.syncObject.objectsToFind}}",
                            "sourceObject": "{{ports.findAlignedDesignsInput.syncObject.sourceObject}}",
                            "firstObjectToFind": "{{ports.findAlignedDesignsInput.syncObject.firstObjectToFind}}",
                            "restObjectToFind": "{{ports.findAlignedDesignsInput.syncObject.restObjectToFind}}"
                        }
                    }
                ]
            }
        },
        "doArrangeEvent": {
            "actionType": "JSFunctionAsync",
            "method": "arrangeColumns",
            "inputData": {
                "declViewModel": "{{data}}",
                "eventData": {
                    "name": "cbaSourceTree",
                    "arrangeType": "{{data.eventData.arrangeType}}",
                    "columns": "{{data.eventData.columns}}",
                    "operationType": "{{data.eventData.operationType}}",
                    "objectSetUri": "{{data.eventData.objectSetUri}}"
                }
            },
            "deps": "js/CadBomColumnArrangeService"
        },
        "addSourcePCIOnUrl": {
            "actionType": "JSFunction",
            "method": "addParametersOnUrl",
            "inputData": {
                "paramsToBeStoredOnUrl": {
                    "pci_uid": "{{ctx.CBASrcContext.productContextInfo.uid}}"
                }
            },
            "deps": "js/CadBomOccurrenceAlignmentUtil"
        },
        "publishTreeTableRowToggledEvent": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "treeTableRowToggled",
                    "eventData": {
                        "vmos": "{{data.dataProviders.srcOccDataProvider.viewModelCollection.loadedVMObjects}}",
                        "row": "{{data.eventData}}"
                    }
                } ]
            }
        },
        "loadInitialOccurrences": {
            "actionType": "JSFunctionAsync",
            "method": "loadTreeTableData",
            "inputData": {
                "methodArgument": {
                    "treeLoadInput":     "request.treeLoadInput",
                    "dataProviderActionType": "initializeAction",
                    "loadIDs":           "request.loadIDs",
                    "grid": "{{data.grids.cbaSourceTree}}",
                    "uwDataProvider":    "{{data.dataProviders.srcOccDataProvider}}",
                    "declViewModel":     "{{data}}",
                    "sortCriteria":      "{{data.columnProviders.srcOccColumnProvider.sortCriteria}}",
                    "subPanelContext":   "{{props.subPanelContext.provider}}"
                }
            },
            "outputData": {
                "ctx.CBASrcContext.productContextInfo": "result.treeLoadResult.productContextInfo",
                "ctx.CBASrcContext.vmc":                "result.treeLoadResult.vmc",
                "ctx.CBASrcContext.sublocation.clientScopeURI":  "result.treeLoadResult.productContextInfo.props.awb0ClientScopeUri.dbValues[0]",
                "ctx.CBASrcContext.topElement":                 "result.treeLoadResult.topModelObject",
                "dataProviders.srcOccDataProvider.objectSetUri": "result.treeLoadResult.productContextInfo.props.awb0ClientScopeUri.dbValues[0]",
                "dataProviders.srcOccDataProvider.columnConfig": "result.treeLoadResult.columnConfig",
                "ctx.CBASrcContext.startFreshNavigation": "result.treeLoadResult.startFreshNavigation",
                "ctx.CBASrcContext.treeDataProvider": "result.treeLoadResult.treeDataProvider",
                "ctx.CBASrcContext.openedElement": "result.treeLoadResult.openedModelObject"
            },
            "events": {
                "success": [ {
                        "name": "sourcePCILoaded"
                    },
                    {
                        "name": "occDataLoadedEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}",
                            "dataProviderActionType": "initializeAction",
                            "occContext" :"{{props.subPanelContext.provider.occContext}}"
                        }
                    },{
                        "name": "updateActiveContextEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}"
                        }
                    },{
                        "name": "entCBA.visibilityStateChanged",
                        "eventData": {
                            "viewToReact": "CBASrcContext",
                            "subPanelContext":   "{{props.subPanelContext}}"
                        },
                        "condition":"subPanelContext.provider.cbaContext.srcStructure && subPanelContext.provider.cbaContext.trgStructure"
                    }
                ]
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "loadOccurrencesWithFocus":{
            "actionType": "JSFunctionAsync",
            "method": "loadOccurrencesWithFocusInTreeTable",
            "inputData": {
                "methodArgument": {
                    "treeLoadInput":    "request.treeLoadInput",
                    "dataProviderActionType": "focusAction",
                    "loadIDs":          "request.loadIDs",
                    "grid": "{{data.grids.cbaSourceTree}}",
                    "uwDataProvider":   "{{data.dataProviders.srcOccDataProvider}}",
                    "declViewModel":    "{{data}}",
                    "sortCriteria":     "{{data.columnProviders.srcOccColumnProvider.sortCriteria}}",
                    "subPanelContext":  "{{props.subPanelContext.provider}}"
                }
            },
            "outputData": {
                "ctx.CBASrcContext.isRestoreOptionApplicableForProduct":"result.treeLoadResult.isRestoreOptionApplicableForProduct",
                "dataProviders.srcOccDataProvider.columnConfig": "result.treeLoadResult.columnConfig"
            },
            "events": {
                "success": [ {
                        "name": "sourcePCILoaded"
                    },
                    {
                        "name": "occDataLoadedEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}",
                            "dataProviderActionType": "focusAction",
                            "occContext": "{{props.subPanelContext.provider.occContext}}"
                        }
                    },
                    {
                        "name": "updateActiveContextEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}"
                        }
                    }
                ]
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "loadNextOccurrences":{
            "actionType": "JSFunctionAsync",
            "method": "loadNextOccurrencesInTreeTable",
            "inputData": {
                "methodArgument": {
                    "treeLoadInput":    "request.treeLoadInput",
                    "dataProviderActionType": "nextAction",
                    "loadIDs":          "request.loadIDs",
                    "grid": "{{data.grids.cbaSourceTree}}",
                    "uwDataProvider":   "{{data.dataProviders.srcOccDataProvider}}",
                    "declViewModel":    "{{data}}",
                    "sortCriteria":     "{{data.columnProviders.srcOccColumnProvider.sortCriteria}}",
                    "subPanelContext":"{{props.subPanelContext.provider}}"
                }
            },
            "outputData": {
                "dataProviders.srcOccDataProvider.scrollPosition": "{{function:clearCurrentExpandBelowBufferVmo}}",
                "dataProviders.srcOccDataProvider.columnConfig": "result.treeLoadResult.columnConfig"
            },
            "events": {
                "success": [ {
                        "name": "sourcePCILoaded"
                    },
                    {
                        "name": "occDataLoadedEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}",
                            "dataProviderActionType": "nextAction",
                            "occContext" :"{{props.subPanelContext.provider.occContext}}"
                        }
                    },
                    {
                        "name": "updateActiveContextEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}"
                        }
                    }
                ]
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "loadPreviousOccurrences":{
            "actionType": "JSFunctionAsync",
            "method": "loadPreviousOccurrencesInTreeTable",
            "inputData": {
                "methodArgument": {
                    "treeLoadInput":    "request.treeLoadInput",
                    "dataProviderActionType": "previousAction",
                    "loadIDs":          "request.loadIDs",
                    "grid": "{{data.grids.cbaSourceTree}}",
                    "uwDataProvider":   "{{data.dataProviders.srcOccDataProvider}}",
                    "declViewModel":    "{{data}}",
                    "sortCriteria":     "{{data.columnProviders.srcOccColumnProvider.sortCriteria}}",
                    "subPanelContext":"{{props.subPanelContext.provider}}"
                }
            },
            "outputData": {
                "dataProviders.srcOccDataProvider.scrollPosition": "{{function:clearCurrentExpandBelowBufferVmo}}",
                "dataProviders.srcOccDataProvider.columnConfig": "result.treeLoadResult.columnConfig"
            },
            "events": {
                "success": [ {
                        "name": "sourcePCILoaded"
                    },
                    {
                        "name": "occDataLoadedEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}",
                            "dataProviderActionType": "previousAction",
                            "occContext" :"{{props.subPanelContext.provider.occContext}}"
                        }
                    },
                    {
                        "name": "updateActiveContextEvent",
                        "eventData": {
                            "contextKey": "{{props.subPanelContext.provider.contextKey}}"
                        }
                    }
                ]
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "loadSrcOccProperties": {
            "actionType": "JSFunctionAsync",
            "method": "loadTreeTableProperties",
            "inputData": {
                "methodArgument": {
                    "propertyLoadInput": "request.propertyLoadInput",
                    "propertyLoadContext": {
                        "clientName": "AWClient",
                        "clientScopeURI": "{{data.dataProviders.srcOccDataProvider.objectSetUri}}",
                        "typesForArrange": "{{data.dataProviders.srcOccDataProvider.columnConfig.typesForArrange}}"
                    },
                    "contextKey": "{{props.subPanelContext.provider.contextKey}}",
                    "declViewModel": "{{data}}",
                    "uwDataProvider": "{{data.dataProviders.srcOccDataProvider}}",
                    "subPanelContext": "{{props.subPanelContext.provider}}"
                }
            },
            "outputData": {
                "dataProviders.srcOccDataProvider.columnConfig": "result.propertyLoadResult.columnConfig",
                "ctx.searchResponseInfo.columnConfig": "result.propertyLoadResult.columnConfig",
                "dataProviders.srcOccDataProvider.scrollPosition": "{{function:clearCurrentPropBufferVmo}}"
            },
            "deps": "js/occmgmtTreeTableDataService",
            "events": {
                "success": [ {
                        "name": "entCBA.visibilityStateChanged",
                        "eventData": {
                            "viewToReact": "CBASrcContext",
                            "subPanelContext":"{{props.subPanelContext}}"
                        }
                    }
                ]
            }
        },
        "loadOccColumns": {
            "actionType": "JSFunctionAsync",
            "method": "loadTreeTableColumns",
            "inputData": {
                "dataProvider": "{{data.dataProviders.srcOccDataProvider}}",
                "columnProvider": "{{data.columnProviders.srcOccColumnProvider}}",
                "contextKey": "{{props.subPanelContext.provider.contextKey}}"
            },
            "outputData":{
                "dataProviders.srcOccDataProvider.columnConfig": "columnConfig"
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "resetColumnConfig": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-AWS2-2022-06-UiConfig",
            "method": "getOrResetUIColumnConfigs3",
            "inputData": {
                "getOrResetUiConfigsIn": [ {
                    "scope": "LoginUser",
                    "scopeName": "",
                    "clientName": "AWClient",
                    "resetColumnConfig": true,
                    "columnConfigQueryInfos": [ {
                        "clientScopeURI": "{{data.dataProviders.srcOccDataProvider.objectSetUri}}",
                        "operationType": "union",
                        "typeNames": "{{data.dataProviders.srcOccDataProvider.columnConfig.typesForArrange}}",
                        "columnsToExclude": "{{ctx.CBASrcContext.columnsToExclude}}"
                    } ],
                    "businessObjects": [ {} ]
                } ]
            },
            "outputData": {
                "dataProviders.srcOccDataProvider.columnConfig": "{{function:postResetFunction}}"
            },
            "events": {
                "success": [ {
                    "name": "cbaSourceTree.updateCBASplitTreeColumns"
                } ]
            },
            "deps": "js/tcarrange.service"
        },
        "saveColumnConfigLoadData": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-AWS2-2016-03-UiConfig",
            "method": "saveUIColumnConfigs",
            "inputData": {
                "columnConfigurations": [ {
                    "clientScopeURI": "{{data.dataProviders.srcOccDataProvider.objectSetUri}}",
                    "columnConfigId": "{{data.dataProviders.srcOccDataProvider.columnConfig.columnConfigId}}",
                    "columns": "{{data.dataProviders.srcOccDataProvider.newColumns}}",
                    "scope": "LoginUser",
                    "scopeName": ""
                } ]
            },
            "outputData": {},
            "events": {
                "success": [ {
                    "name": "cba.ColumnConfigSaved"
                } ]
            }
        },
        "saveColumnConfigData": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-AWS2-2016-03-UiConfig",
            "method": "saveUIColumnConfigs",
            "inputData": {
                "columnConfigurations": [ {
                    "clientScopeURI": "{{data.dataProviders.srcOccDataProvider.objectSetUri}}",
                    "columnConfigId": "{{data.dataProviders.srcOccDataProvider.columnConfig.columnConfigId}}",
                    "columns": "{{data.dataProviders.srcOccDataProvider.newColumns}}",
                    "scope": "LoginUser",
                    "scopeName": ""
                } ]
            },
            "outputData": {}
        },
        "loadDataForSavedColumnConfig": {
            "actionType": "JSFunctionAsync",
            "method": "getTableViewModelProperties",
            "deps": "js/tcViewModelObjectService",
            "inputData": {
                "vmNodes": "{{data.dataProviders.srcOccDataProvider.viewModelCollection.loadedVMObjects}}",
                "context": {
                    "clientScopeURI": "{{data.dataProviders.srcOccDataProvider.objectSetUri}}",
                    "clientName": "AWClient",
                    "columnsToExclude": "{{ctx.CBASrcContext.columnsToExclude}}"
                }
            }
        },
        "updateDisplayNames": {
            "actionType": "JSFunction",
            "method": "updateDisplayNames",
            "inputData": {
                "eventData": "{{data.eventData}}"
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "updateSourceContextWithRowSelection":
        {
            "actionType": "JSFunction",
            "method": "updateCBAContextOnRowSelection",
            "inputData":
            {
                "target":"{{props.subPanelContext.provider.occContext}}",
                "value": "{{data.eventData.selectedObjects.length > 0}}"
            },
            "events": {
                "success": [ {
                    "name": "cbaSourceTree.addStateParametersOnUrl"
                } ]
            },
            "deps": "js/CadBomOccurrenceAlignmentUtil"
        },
        "plTableClientRefresh": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "cbaSourceTree.plTable.clientRefresh"
                } ]
            }
        },
        "updateAlignmentCheckStatus":{
            "actionType": "JSFunction",
            "method": "updateAlignmentCheckStatus",
            "inputData": {
                "contextKey": "CBASrcContext",
                "uids":"{{data.eventData.sourceIdsToUpdate}}",
                "supportedColumnTostatus":"{{data.supportedStatusToColumn}}"
            },
            "deps": "js/CadBomOccAlignmentCheckService"
        },
        "updateCBASplitTreeColumns": {
            "actionType": "JSFunction",
            "method": "updateOccMgmtTreeTableColumns",
            "inputData": {
                "data": "{{data}}",
                "dataProvider": "{{data.dataProviders.srcOccDataProvider}}"
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "setCBASrcOccVisibility": {
            "actionType": "JSFunction",
            "method": "setOccVisibility",
            "inputData": {
                "loadedVMObjects": "{{data.dataProviders.srcOccDataProvider.viewModelCollection.loadedVMObjects}}",
                "contextKey": "CBASrcContext",
                "gridId": "cbaSourceTree"
            },
            "deps": "js/occmgmtTreeTableDataService"
        },
        "updateCBASrcTableVisibility": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "cbaSourceTree.plTable.visibilityStateChanged"
                } ]
            }
        },
        "cbaSrcToggleTreeNodeHierarchy": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "toggleTreeNodeHierarchy",
                    "eventData": {
                        "data": "{{data}}",
                        "row": "{{data.eventData}}"
                    }
                } ]
            }
        },
        "updatedDesignSelectionInOccContext": {
            "actionType": "JSFunction",
            "method": "updateValueOnCtxOrState",
            "deps": "js/occmgmtUtils",
            "inputData": {
                "path": "selectionsToModify",
                "value": {
                    "elementsToSelect": "{{parameters.eventData.vmo}}",
                    "overwriteSelections":true
                },
                "target": "{{props.subPanelContext.provider.occContext}}"

            }
        },
        "updatedDesignSelectionAtPort": {
            "actionType": "Sync",
            "inputData": {
                "port": "designSelection",
                "syncObject": "{{parameters.eventData}}"
            }
        },
        "updatedFindAlignedSourceDesign": {
            "actionType": "batchJob",
            "steps": [
                {
                    "action": "updatedDesignSelectionInOccContext"
                },
                {
                    "action": "updatedDesignSelectionAtPort"
                }
            ]
        },
        "updatePartsOutputAlignedDesignsPort": {
            "actionType": "Sync",
            "inputData": {
                "port": "partsOutputAlignedDesigns",
                "syncObject": "{{data.eventData.secondarySelection}}"
            }
        },
        "addStateParametersOnUrl": {
            "actionType": "JSFunction",
            "method": "addParametersOnUrl",
            "inputData": {
                "paramsToBeStoredOnUrl": {
                    "c_uid":"{{ctx.CBASrcContext.currentState.c_uid}}",
                    "o_uid":"{{ctx.CBASrcContext.currentState.o_uid}}"
                }
            },
            "deps": "js/CadBomOccurrenceAlignmentUtil"
        },
        "bufferExtraPages": {
            "actionType": "JSFunction",
            "method": "bufferExtraPages",
            "inputData": {
                "gridId": "cbaSourceTree",
                "uwDataProvider": "{{data.dataProviders.srcOccDataProvider}}",
                "scrollEventData": "{{data.eventData}}",
                "subPanelContext": "{{props.subPanelContext.provider}}"
            },
            "outputData": {
                "dataProviders.srcOccDataProvider.scrollPosition": ""
            },
            "events":{
                "success":[
                    {
                        "name": "cba.executeAlignmentCheck",
                        "condition":"ctx.cbaContext.alignmentCheckContext.alignmentCheckClicked === true"
                    }
                ]
            },
            "deps": "js/occmgmtTreeTableBufferService"
        },
        "performAlignmentCheckForCachedNode":{
            "actionType": "JSFunction",
            "method": "performAlignmentCheckForCachedNode",
            "inputData": {
                "data": "{{data.eventData}}",
                "contextName": "CBASrcContext",
                "partDesignRequiredProp":"pma1IsPartRequired"
            },
            "deps": "js/CadBomOccAlignmentCheckService"
        },
        "addNodeToExpansionState": {
            "actionType": "JSFunction",
            "method": "addNodeToExpansionState",
            "inputData": {
                "node": "{{data.eventData.nodeToExpand}}",
                "data": "{{data}}"
            },
            "deps": "js/occmgmtTreeTableStateService"
        },
        "addNodeToCollapsedState":{
            "actionType": "JSFunction",
            "method": "addNodeToCollapsedState",
            "inputData": {
                "data": "{{data}}",
                "row": "{{data.eventData}}"
            },
            "deps": "js/occmgmtTreeTableStateService"
        },
        "clearAlignmentCheckStatus": {
            "actionType": "JSFunction",
            "method": "clearAlignmentCheckStatus",
            "inputData": {
                "dataProviderActionType": "{{data.eventMap['productContextChangedEvent'].dataProviderActionType}}"
            },
            "deps": "js/CadBomOccAlignmentCheckService"
        },
        "updateTreeNodeStates":{
            "actionType": "JSFunction",
            "method": "updateTreeNodeStates",
            "inputData": {
                "vmNodes": "{{data.dataProviders.srcOccDataProvider.viewModelCollection.loadedVMObjects}}",
                "data": "{{data}}",
                "subPanelContext": "{{props.subPanelContext.provider}}"
            },
            "deps": "js/occmgmtTreeTableStateService"
        },
        "swaTabChange": {
            "actionType": "JSFunction",
            "method": "swaTabChange",
            "inputData": {
                "subPanelContext": "{{props.subPanelContext.provider}}"
            },
            "deps": "js/aceSwaService"
        }
    },
    "data": {
        "columns": [
            {
                "name": "srcAlignmentIndication",
                "displayName": "{{i18n.AlignmentColumnTitle}}",
                "clientColumn":true,
                "columnOrder":10,
                "maxWidth": 30,
                "minWidth": 30,
                "width": 30,
                "enableColumnMenu": false,
                "enableSorting": false,
                "enableColumnMoving": false,
                "enableColumnResizing": false
            },
            {
                "name": "srcAdvanceIndication",
                "displayName": "{{i18n.AdvanceIndicationColumnTitle}}",
                "clientColumn":true,
                "columnOrder":20,
                "maxWidth": 30,
                "minWidth": 30,
                "width": 30,
                "enableColumnMenu": false,
                "enableSorting": false,
                "enableColumnMoving": false,
                "enableColumnResizing": false
            }
        ],
        "supportedStatusToColumn":[
            {
                "columnName":"srcAlignmentIndication",
                "statuses":[1, 2, 3, 4, 5, 6, 102, 357, 359, 614]
            },
            {
                "columnName":"srcAdvanceIndication",
                "statuses":[1, 2, 3, 4, 5, 101, 102, 357, 614]
            }
        ]
    },
    "i18n": {
        "AlignmentColumnTitle":["CadBomAlignmentConstants"],
        "AdvanceIndicationColumnTitle":["CadBomAlignmentConstants"],
        "FindAlignedNoAlignment":["CadBomAlignmentMessages"]
    },
    "dataProviders": {
        "srcOccDataProvider": {
            "initializeAction":    "loadInitialOccurrences",
            "nextAction":          "loadNextOccurrences",
            "previousAction":      "loadPreviousOccurrences",
            "focusAction":         "loadOccurrencesWithFocus",
            "editContext":         "srcOccDataProvider",
            "treeLoadResult":      "action.result.treeLoadResult",
            "selectionModelMode":  "multiple",
            "treePageSize": 250,
            "cacheCollapse": true,
            "inputData": {
                "selectionModel":   "{{subPanelContext.selectionModel}}",
                "accessMode":       "tree",
                "topNodeUid":       "{{ctx.aceActiveContext.context.currentState.uid}}"
            }
        },
        "srcOccPropertyProvider": {
            "action": "loadSrcOccProperties",
            "propertyLoadResult": "action.result.propertyLoadResult"
        }
    },

    "columnProviders": {
        "srcOccColumnProvider": {
            "loadColumnAction": "loadOccColumns",
            "clientColumns": "{{data.columns}}",
            "saveColumnAction": "saveColumnConfigData",
            "saveColumnAndLoadAction": "saveColumnConfigLoadData",
            "resetColumnAction": "resetColumnConfig",
            "frozenColumnIndex":2
        }
    },
    "grids": {
        "cbaSourceTree": {
            "dataProvider": "srcOccDataProvider",
            "propertyProvider": "srcOccPropertyProvider",
            "columnProvider": "srcOccColumnProvider",
            "enableArrangeMenu": true,
            "addIconColumn": false,
            "gridOptions": {
                "useStaticFirstCol": true,
                "enableSorting": true
            }
        }
    },
    "functions": {
        "getContextKeyFromParentScope": {
            "functionName": "getContextKeyFromParentScope",
            "parameters": [
                "{{data}}"
            ]
        },
        "processFindAlignedResponse":{
            "functionName": "processFindAlignedResponse",
            "parameters": [
                "CBATrgContext"
            ]
        },
        "postResetFunction": {
            "functionName": "postResetFunction",
            "parameters": [
                "{{data.dataProviders.srcOccDataProvider.columnConfig}}"
            ]
        },
        "clearCurrentPropBufferVmo": {
            "functionName": "clearCurrentPropBufferVmo",
            "parameters": [
                "{{dataProviders.srcOccDataProvider.scrollPosition}}"
            ]
        },
        "clearCurrentExpandBelowBufferVmo": {
            "functionName": "clearCurrentExpandBelowBufferVmo",
            "parameters": [
                "{{dataProviders.srcOccDataProvider.scrollPosition}}"
            ]
        }
    },

    "onEvent": [ {
            "eventId": "columnArrange",
            "cacheEventData": true,
            "action": "doArrangeEvent",
            "condition": "name === 'cbaSourceTree' || ( name === 'cbaTargetTree' && ( ctx.CBATrgContext.sublocation.clientScopeURI === ctx.CBASrcContext.sublocation.clientScopeURI ) )"
        },
        {
            "eventId": "srcOccDataProvider.modelObjectsUpdated",
            "cacheEventData": true,
            "action": "updateDisplayNames"
        },
        {
            "eventId": "vmc.modified.srcOccDataProvider",
            "cacheEventData": true,
            "action": "updateDisplayNames"
        },
        {
            "eventId": "srcOccDataProvider.rowToggled",
            "cacheEventData": true,
            "action": "publishTreeTableRowToggledEvent"
        },
        {
            "eventId": "sourcePCILoaded",
            "action": "addSourcePCIOnUrl"
        },
        {
            "eventId": "srcOccDataProvider.selectionChangeEvent",
            "cacheEventData":true,
            "action": "updateSourceContextWithRowSelection"
        },
        {
            "eventId": "primaryWorkarea.multiSelectActionForAce",
            "action": "plTableClientRefresh"
        },
        {
            "eventId": "cba.alignmentCheckComplete",
            "cacheEventData": true,
            "action": "updateAlignmentCheckStatus"
        },
        {
            "eventId": "cbaSourceTree.updateCBASplitTreeColumns",
            "action": "updateCBASplitTreeColumns"
        },
        {
            "eventId": "entCBA.visibilityStateChanged",
            "action": "setCBASrcOccVisibility"
        },
        {
            "eventId": "entCBA.visibilityStateChanged",
            "action": "updateCBASrcTableVisibility"
        },
        {
            "eventId": "srcOccDataProvider.toggleTreeNodeHierarchy",
            "cacheEventData": true,
            "action": "cbaSrcToggleTreeNodeHierarchy"
        },
        {
            "eventId": "cba.findAlignedObject",
            "action": "updatedFindAlignedSourceDesign",
            "criteria": {
                "contextName": "CBASrcContext"
            },
            "inputArgs": {
                "eventData": "{{eventData}}"
            }
        },
        {
            "eventId": "cba.partDesignUnAlignment",
            "cacheEventData": true,
            "action": "updatePartsOutputAlignedDesignsPort",
            "criteria": {
                "contextName": "CBASrcContext"
            }
        },
        {
            "eventId": "cba.partDesignAlignment",
            "cacheEventData": true,
            "action": "updatePartsOutputAlignedDesignsPort",
            "criteria": {
                "contextName": "CBASrcContext"
            }
        },
        {
            "eventId": "cba.ColumnConfigSaved",
            "action": "loadDataForSavedColumnConfig",
            "condition": "!ctx.editInProgress"
        },
        {
            "eventId": "cba.refreshTree",
            "action": "plTableClientRefresh"
        },
        {
            "eventId": "cbaSourceTree.addStateParametersOnUrl",
            "action": "addStateParametersOnUrl"
        },
        {
            "eventId": "cbaSourceTree.plTable.loadMorePages",
            "cacheEventData": true,
            "action": "bufferExtraPages"
        },
        {
            "eventId": "cbaSourceTree.plTable.toggleTreeNode",
            "cacheEventData": true,
            "action": "performAlignmentCheckForCachedNode"
        },
        {
            "eventId": "srcOccDataProvider.addNodeToExpansionState",
            "cacheEventData": true,
            "action": "addNodeToExpansionState"
        },
        {
            "eventId":"srcOccDataProvider.addNodeToCollapsedState",
            "cacheEventData":true,
            "action":"addNodeToCollapsedState"
        },
        {
            "eventId":"cba.findAlignedDesigns",
            "cacheEventData":true,
            "action":"findAlignedDesigns"
        },
        {
            "eventId":"cba.updateFindAlignedInfo",
            "cacheEventData":true,
            "action":"updateFindAlignedInfo",
            "criteria": {
                "contextName": "CBASrcContext"
            }
        },
        {
            "eventId":"cba.vmoPropsUpdated",
            "cacheEventData":true,
            "action":"notifyVMOPropertiesUpdated",
            "criteria": {
                "contextName": "CBASrcContext"
            }
        },
        {
            "eventId":"cba.updateSelections",
            "cacheEventData":true,
            "action":"cbaUpdateSelectionsEvent"
        },
        {
            "eventId": "productContextChangedEvent",
            "cacheEventData": true,
            "action": "clearAlignmentCheckStatus",
            "criteria": {
                "updatedView": "CBASrcContext"
            }
        },
        {
            "eventId": "cba.selectSingleAlignedDesign",
            "action": "selectSingleAlignedDesign",
            "inputArgs": {
                "overwriteSelections": "{{eventData.overwriteSelections}}"
            }
        },
        {
            "eventId": "cba.selectMultipleAlignedDesigns",
            "action": "selectMultipleAlignedDesigns",
            "inputArgs": {
                "overwriteSelections": "{{eventData.overwriteSelections}}"
            }
        },
        {
            "eventId": "cba.selectObjectsInTree",
            "action": "selectObjectsInTree",
            "inputArgs": {
                "eventData": "{{eventData}}"
            }
        },
        {
            "eventId": "occMgmt.visibilityStateChanged",
            "condition": "viewToReact ? viewToReact === 'CBASrcContext' : true",
            "action": "setCBASrcOccVisibility"
        }
    ],
    "messages": {
        "FindAlignedNoAlignmentMessage":{
            "messageType": "ERROR",
            "messageText": "{{i18n.FindAlignedNoAlignment}}",
            "messageTextParams": [
                "{{ctx.cbaContext.findAlignedDesignsInput.sourceObject}}"
            ]
        },
        "FindAlignedNoAlignmentERRORMessage":{
            "messageType": "ERROR",
            "messageText": "{{errorCode}}"
        }
    },
    "lifecycleHooks": {
        "onUpdate": [ {
            "action": "updateTreeNodeStates",
            "observers": [ "viewModel.dataProviders.srcOccDataProvider.viewModelCollection.loadedVMObjects" ]
        },
        {
            "action": "swaTabChange",
            "observers": [ "props.subPanelContext.provider.pageContext.secondaryActiveTabId" ]
        } ]
    }
}
